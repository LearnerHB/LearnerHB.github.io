<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Introduction of Kubernetes(k8s)</title>
    <link href="/2021/06/28/k8s-learning/"/>
    <url>/2021/06/28/k8s-learning/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Kubernetes-K8s-是什么"><a href="#Kubernetes-K8s-是什么" class="headerlink" title="Kubernetes(K8s)是什么"></a>Kubernetes(K8s)是什么</h2><p><a href="https://kubernetes.io/zh/">Kubernetes</a> 是用于自动部署，扩展和管理容器化应用程序的开源系统。它可以帮助用户省去应用容器化过程中的许多手动部署和扩展操作。你可以将Linux容器的多组主机聚集在一起，由Kubernetes来轻松高效地管理这些集群。<strong>Kubernetes</strong> 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。</p><p>当我们把容器部署到生产环境或者扩展成多个应用，我们显然需要许多托管在相同位置的容器来协同提供各种服务，随着这些容器的积累，环境中容器的数量会急剧增加，复杂度随之增长。Kubernetes通过将容器分类成 容器集(pod)，解决了容器增殖带来的许多问题。容器集为分组容器增加了一个抽象层，可以帮助我们调用工作负载，并为这些容器提供所需的联网和存储服务，而Kubernetes的其他部分可以帮助我们在这些容器集之间达成负载均衡，同时确保运行正确数量的容器来充分支持我们的工作负载。</p><h2 id="K8s相关术语"><a href="#K8s相关术语" class="headerlink" title="K8s相关术语"></a>K8s相关术语</h2><p><strong>主机（Master）：</strong> 用于控制 Kubernetes 节点的计算机。所有任务分配都来自于此。</p><p><strong>节点（Node）：</strong>负责执行请求和所分配任务的计算机。由 Kubernetes 主机负责对节点进行控制。</p><p><strong>容器集（Pod）：</strong>被部署在单个节点上的，且包含一个或多个容器的容器组。同一容器集中的所有容器共享同一个 IP 地址、IPC、主机名称及其它资源。容器集会将网络和存储从底层容器中抽象出来。这样，您就能更加轻松地在集群中移动容器。</p><p><strong>复制控制器（Replication controller）：</strong>用于控制应在集群某处运行的完全相同的容器集副本数量。</p><p><strong>服务（Service）：</strong>将工作内容与容器集分离。Kubernetes 服务代理会自动将服务请求分发到正确的容器集——无论这个容器集会移到集群中的哪个位置，甚至可以被替换掉。</p><p><strong>Kubelet：</strong>运行在节点上的服务，可读取容器清单（container manifest），确保指定的容器启动并运行。</p><p><strong>kubectl：</strong> Kubernetes 的命令行配置工具。</p><h2 id="K8s集群架构"><a href="#K8s集群架构" class="headerlink" title="K8s集群架构"></a>K8s集群架构</h2><p>一个K8s集群可以可视化为两个部分：控制平面和计算设备（或节点）。每个节点都是自己的Linux环境，可以是物理机或者虚拟机，每个节点都运行由若干容器组成的容器集。</p><p>如下架构图显示K8s集群的各部分之间的联系。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2021-06-29-023053.png" alt="image-20210629103052447"></p><ul><li><p>K8s集群的神经中枢：控制平台 Control plane</p></li><li><p>K8s集群API：kube-apiserver</p></li><li><p>K8s调度程序：kube-scheduler</p></li><li><p>K8s控制器：kube-controller-manager</p></li><li><p>键值存储数据库 etcd</p></li><li><p>K8s节点：Compute machines</p><ul><li>容器集Pod</li><li>容器运行时引擎：如Docker，但K8s也支持其他诸如rkt和CRI-O</li><li>kubelet：与控制平面通信的微型应用，可确保容器在容器集内运行</li><li>kube-proxy：用于优化K8s网络服务的网络代理</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://www.redhat.com/zh/topics/containers/kubernetes-architecture">K8s 原理：Kubernetes 架构解析</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Container</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Social Media Analysis (4)</title>
    <link href="/2021/04/21/socialmedia-a4/"/>
    <url>/2021/04/21/socialmedia-a4/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Sentiment-Analysis"><a href="#1-Sentiment-Analysis" class="headerlink" title="1. Sentiment Analysis"></a>1. Sentiment Analysis</h2><p>I obtained in Project One is 0.89 . It means that basiclly, comments given to me or I give to others are positive. </p><h2 id="2-Social-Network-Analysis"><a href="#2-Social-Network-Analysis" class="headerlink" title="2. Social Network Analysis"></a>2. Social Network Analysis</h2><ol><li>My in-degree is 8, which means that there are 8 people that have ever left a comment in my blogs. I think the number is not as many as I thought. Maybe I should have more interactions with my classmates and the in-degree might be more. </li><li>My out-degree is 11, which means that I gave comments to 11 classmates. That’s more than my in-degree. But I believe if more classmates I have given comments, maybe the in-degree will be more. </li><li>My closeness centrality is 0.44. The value is between 0 and 1. The more closeness centrality is, the more interaction with classmates. The more out-degree is, the more closenesss centrality will be. (Not exactly proportional)</li><li>My shortest-path betweenness is 0.0137. It means the number of shortest-path that go through a point, which shows the importance of a point. 0.01 maybe a little bit small.</li></ol><h2 id="3-Overall-Course-Reflection"><a href="#3-Overall-Course-Reflection" class="headerlink" title="3. Overall Course Reflection"></a>3. Overall Course Reflection</h2><p>In this course, I have learn some skills to do the social media analysis. And it is the first time of mine to see our behaviors in such a way, using some programming methods. </p><p>Also, I shared with others my understandings of some concepts like “Mutual Information”, or the relationship between emotions and dynamic free energy. I also gave some examples which impress some of my classmates. </p><p>I feel that using the technical or analytics way to think about our social behaviors could make us more positive in the social interaction. The more people you give comments to, the more comments you will get.</p><p>After this course, I think I will be more willing to share my comments or interact with people in the future life. And also I will keep using these methods to analyze the behavior of people. This course really took me in to the trip to social analysis world.</p>]]></content>
    
    
    <categories>
      
      <category>CUHK</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Social Media Analysis (3)</title>
    <link href="/2021/03/06/socialmedia-a3/"/>
    <url>/2021/03/06/socialmedia-a3/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Computational-x2F-Calculation"><a href="#1-Computational-x2F-Calculation" class="headerlink" title="1. Computational &#x2F; Calculation"></a>1. Computational &#x2F; Calculation</h2><h3 id="1-H-X"><a href="#1-H-X" class="headerlink" title="1) H(X)"></a>1) H(X)</h3><p>My student ID is 1155151103 so the 8 outcomes of Y is {aaeeaeaa}. The student ID of my partner is 1155148799 so the 8 outcomes of X is {aaeeadhg}</p><table><thead><tr><th>Outcomes</th><th>1st</th><th>2nd</th><th>3rd</th><th>4th</th><th>5th</th><th>6th</th><th>7th</th><th>8th</th></tr></thead><tbody><tr><td>Y &#x3D;</td><td>a</td><td>a</td><td>e</td><td>e</td><td>a</td><td>e</td><td>a</td><td>a</td></tr><tr><td>X &#x3D;</td><td>a</td><td>a</td><td>e</td><td>e</td><td>a</td><td>d</td><td>h</td><td>g</td></tr></tbody></table><p>In the 8 outcomes of Y, </p><p>P(a) &#x3D; 5&#x2F;8, P(e) &#x3D; 3&#x2F;8</p><p>In the 8 outcomes of X,</p><p>P(a) &#x3D; 3&#x2F;8, P(d) &#x3D; 1&#x2F;8, P(e) &#x3D; 2&#x2F;8 &#x3D; 1&#x2F;4, P(h) &#x3D; 1&#x2F;8,  P(g) &#x3D; 1&#x2F;8</p><p>So the H(X) can be calculated out:</p><p><strong>H(X)</strong> &#x3D; -(0.375*log2(0.375) + 0.125*log2(0.125)*3 + 0.25*log2(0.25))</p><p>&#x3D; -(-0.531 -1.125 -0.5) </p><p><strong>&#x3D; 2.156</strong> </p><h3 id="2-Joint-probability-distribution-matrix"><a href="#2-Joint-probability-distribution-matrix" class="headerlink" title="2) Joint probability distribution matrix"></a>2) Joint probability distribution matrix</h3><table><thead><tr><th align="center">PXY(x,y)</th><th align="center">a</th><th align="center">e</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">15&#x2F;64</td><td align="center">9&#x2F;64</td></tr><tr><td align="center">d</td><td align="center">5&#x2F;64</td><td align="center">3&#x2F;64</td></tr><tr><td align="center">e</td><td align="center">5&#x2F;32</td><td align="center">3&#x2F;32</td></tr><tr><td align="center">h</td><td align="center">5&#x2F;64</td><td align="center">3&#x2F;64</td></tr><tr><td align="center">g</td><td align="center">5&#x2F;64</td><td align="center">3&#x2F;64</td></tr></tbody></table><h3 id="3-H-X-Y-and-I-X-Y"><a href="#3-H-X-Y-and-I-X-Y" class="headerlink" title="3) H(X|Y) and I(X,Y)"></a>3) H(X|Y) and I(X,Y)</h3><p>Since we don’t know our partner’s student ID at first, or we don’t know waht is the observerd result of our partner’s, these two distribution X and Y could be seemed as independent with each other. So <strong>P(X|Y) &#x3D; P(X).</strong> So <strong>H(X|Y) &#x3D; H(X) &#x3D; 2.156</strong> (we have already calculated out in 1) ). </p><p>And with the formula <strong>H(X) &#x3D; H(X|Y) + I(X,Y)</strong>, we know the value of H(X) is the sum of the value of mutual information I(X,Y) and H(X|Y). So in this case we can easily get the value of <strong>I(X,Y) &#x3D;</strong> H(X) - H(X|Y) &#x3D; 2.156 - 2.156 </p><p><strong>&#x3D; 0</strong></p><h2 id="2-Mutual-Information"><a href="#2-Mutual-Information" class="headerlink" title="2. Mutual Information"></a>2. Mutual Information</h2><p>Mutual information measures the degree of interdependence between random variables. Let’s take the things in our daily life as example. </p><h3 id="An-example-Sunset-glow"><a href="#An-example-Sunset-glow" class="headerlink" title="An example: Sunset glow"></a>An example: Sunset glow</h3><p>We know the Chinese saying that “朝霞不出门，晚霞行千里”, which means that when you see the morning glow, you’d better not go out this day (due to the high possibility of raining) and if you see the sunset glow, you might go out for a thousand miles of walk (for the high possibility of sunny the next day). </p><p>Let’s apply the concept of mutual information to this example. Assume that “it is rainy tomorrow” is a random event X, and “there is sunset glow tonight” is a random event Y. So when we don’t have any idea of whether “sunset glow tonight”, the uncertainty of “rainy tomorrow” is <strong>H(X)</strong>. And if we already know that “sunset glow tonight”, the uncertainty of “rainy tomorrow” is <strong>H(X|Y)</strong>. And the <strong>mutual information I(X,Y)</strong> will be the difference between H(X) and H(X|Y), which measures the reduction in uncertainty of a random variable X due to another random variable Y. It shows that when knowing “sunset glow tonight”, to what extent we will feel less uncertain about “rainy tomorrow”. I am not going to quantilization the value of I(X,Y) here because it could be 0 or more than 0, which are both possible in different case. </p>]]></content>
    
    
    <categories>
      
      <category>CUHK</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Social Media Analysis (2)</title>
    <link href="/2021/02/19/socialmedia-a2/"/>
    <url>/2021/02/19/socialmedia-a2/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Divergence"><a href="#1-Divergence" class="headerlink" title="1. Divergence"></a>1. Divergence</h2><ul><li><strong>Description</strong></li></ul><p>Let Ni for i &#x3D; 1 to 10 be the i-th digit of a valid CUHK student ID, and N be the sum of these 10 digits. Let q(x) be the approximated probability mass function where q(i) &#x3D; Ni&#x2F;N for i &#x3D; 1 to 10 is obtained from your own student ID. Furthermore, let p(x) be the true probability mass function obtained by replacing your student ID with that of your partner’s. Calculate: <strong>(1) forward divergence; (2) reverse divergence.</strong></p><ul><li><strong>Solution</strong></li></ul><p>My student ID is 1155151103 but in order to prevent an denominator from being 0, I would turn the digit 0 to 2. So the ID will become 1155151123. The sum of each digit is 25. The student ID of my partner is 1155148799 so the sum of each digit is 50. </p><p>So pi for i &#x3D; 1 to 10 are: 0.04, 0.04, 0.2, 0.2, 0.04, 0.2, 0.04, 0.04, 0.08, 0.12. </p><p>And qi for i &#x3D; 1 to 10 are: 0.02, 0.02, 0.1, 0.1, 0.02, 0.08, 0.16, 0.14, 0.18, 0.18.</p><p>So the <strong>forward divergence D(p||q)</strong> is: </p><p>0.04*log2(0.04&#x2F;0.02) + 0.04*log2(0.04&#x2F;0.02) + 0.2*log2(0.2&#x2F;0.1) + 0.2*log2(0.2&#x2F;0.1) + 0.04*log2(0.04&#x2F;0.02) + 0.2*log2(0.2&#x2F;0.08) + 0.04*log2(0.04&#x2F;0.16) + 0.04*log2(0.04&#x2F;0.14) + 0.08*log2(0.08&#x2F;0.18) + 0.12*log2(0.12&#x2F;0.18) </p><p>&#x3D; 0.04+0.04+0.2+0.2+0.04+0.26+0.05-0.07-0.09-0.7 </p><p>&#x3D; <strong>-0.03</strong></p><p>And the <strong>reverse divergence D(q||p)</strong> is: </p><p>0.02*log2(0.02&#x2F;0.04) + 0.02*log2(0.02&#x2F;0.04) + 0.1*log2(0.1&#x2F;0.2) + 0.1*log2(0.1&#x2F;0.2) + 0.02*log2(0.02&#x2F;0.04) + 0.08*log2(0.08&#x2F;0.2) + 0.16*log2(0.16&#x2F;0.04) + 0.14*log2(0.14&#x2F;0.04) + 0.18*log2(0.18&#x2F;0.08) + 0.18*log2(0.18&#x2F;0.12) </p><p>&#x3D; -0.02-0.02-0.1-0.1-0.1-0.1+0.32+0.25+0.21+0.1 </p><p>&#x3D; <strong>0.44</strong></p><h2 id="2-Suprise"><a href="#2-Suprise" class="headerlink" title="2. Suprise"></a>2. Suprise</h2><p>Since the information content  of the individual event or the “surprise” of the event is calculated by:</p><center>I(E) = -log(P(E))</center><p>For the observed event x &#x3D; 10, from last question we know the probability that this event happens is 0.18. So the surprise of it is: </p><p>-log2(0.18) &#x3D; -(-2.47) &#x3D; <strong>2.47</strong></p><h2 id="3-Free-Energy"><a href="#3-Free-Energy" class="headerlink" title="3. Free Energy"></a>3. Free Energy</h2><p>From last two questions we have already got the reverse divergence (&#x3D;0.1) and surprise (&#x3D;2.47) of event No.10. Using the formula:</p><center>Free Energy = Reverse Divergence + Surprise</center><p>we could easily get Free Energy (F) &#x3D; 0.1 + 2.47 </p><p><strong>&#x3D; 2.57</strong></p><h2 id="4-Relationship-between-emotions-and-dynamic-free-energy"><a href="#4-Relationship-between-emotions-and-dynamic-free-energy" class="headerlink" title="4. Relationship between emotions and dynamic free energy"></a>4. Relationship between emotions and dynamic free energy</h2><blockquote><p>According to Joffily &amp; Coricelli (2013), how do the emotions “happiness”, “unhappiness”, “hope”, and “fear” relate to the dynamic free energy F(t)?</p></blockquote><p>According to Joffily &amp; Coricelli’s research, emotions are explained by the change of free-energy. And the first time-derivative Fi’(t) and second time-derivative Fi’’(t) of free-energy can be understood as the <strong>velocity</strong> and <strong>acceleration</strong> of free-energy Fi(t) at time t. Our emotions are changing all the time and the dynamics of free-energy show the temporal dependency within the emotion forms. We know that <strong>free-energy is decreasing when the real fact comes closer to our expectation</strong>. </p><h3 id="An-example-waitng-for-the-bus"><a href="#An-example-waitng-for-the-bus" class="headerlink" title="An example: waitng for the bus"></a>An example: waitng for the bus</h3><p>Take four basic emotions, happy, unhappy, hopes, fears, as example. Assume that you are David and you are waiting for bus No.1. You are in the emotion of “<strong>hopes</strong>“ when you want the bus No.1 to come (free-energy is decreasing, F’(t)&lt;0) and you are not sure whether it will come (decreasing faster and faster, F’’(t)&lt;0). And when the bus No.1 really comes, you are “**happy**” (free-energy is still decreasing, F’(t)&lt;0, but slower because the event is factive, F’’(t)&gt;0). And equivalently, when hopes bus No.1 to come, for the event “here comes bus No.2”, you are in the emotion of “fears” because it is far away from your expectation. So when “<strong>fears</strong>“, free-energy is increasing (F’(t)&gt;0) and because of the uncertaincy (epistemic), this increasing is faster and faster(F’’(t)&gt;0). And when the event “here comes the bus No.2” happen, this fact is far away from your expectation, free-enegy is increasing (F’(t)&gt;0) but slower (because factive, F’’(t)&lt;0). Then youe emotion is “<strong>unhappy</strong>“. </p><p>From above, you can also see that when the bus has not come (epistemic event), your emotion could be concurrently in the status of “fears”(for bus No.2) or “hopes”(for bus No.1). It shows that it is common that different emotions can occur at the same time.</p><p>This relationship are shown in the table and figure below. </p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2021-02-21-102249.png" alt="image-20210221172520150"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2021-02-21-102242.png" alt="image-20210221175815162"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Joffily M, Coricelli G (2013) Emotional Valence and the Free-Energy Principle. PLoS Comput Biol 9(6): e1003094.</p>]]></content>
    
    
    <categories>
      
      <category>CUHK</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Social Media Analysis (1)</title>
    <link href="/2021/01/26/socialmedia-a1/"/>
    <url>/2021/01/26/socialmedia-a1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Shannon-Entropy"><a href="#1-Shannon-Entropy" class="headerlink" title="1. Shannon Entropy"></a>1. Shannon Entropy</h2><ul><li><strong>Description</strong></li></ul><p>Let there be a system having 10 discrete energy levels, from 1 to 10. Let N be the sum of the digits of your student ID, e.g., if your SID &#x3D; 1155012345, then N &#x3D; 27. Let Pi &#x3D; Ni&#x2F;N for i&#x3D;1 to 10 be the probability that the system is at an energy level i. </p><p>Calculate the <strong>Shannon entropy</strong> of the system.</p><ul><li><strong>Solution</strong></li></ul><p>My student ID is 1155151103 so N &#x3D; 23. </p><p>So Ni (for i &#x3D; 1 to 10) is {1&#x2F;23, 1&#x2F;23, 5&#x2F;23, 5&#x2F;23, 1&#x2F;23, 5&#x2F;23, 1&#x2F;23, 1&#x2F;23, 0, 3&#x2F;23}. And We calculate Shannon Entropy using the formulation shown below. </p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2021-01-30-064608.png" alt="image-20210129113456540"></p><p>We can first calculate the information content of each energy level of the system. </p><p>log2(1&#x2F;23) &#x3D; -4.52</p><p>log2(3&#x2F;23) &#x3D; -2.93</p><p>log2(5&#x2F;23) &#x3D; -2.20</p><p>So the calculation result of H(X) is: </p><p>H(X) &#x3D; -(1&#x2F;23*(-4.52) + 1&#x2F;23*(-4.52) + 5&#x2F;23*(-2.20) +  5&#x2F;23*(-2.20) + 1&#x2F;23*(-4.52) + 5&#x2F;23*(-2.20) + 1&#x2F;23*(-4.52) + 1&#x2F;23*(-4.52) + 0 + 3&#x2F;23*(-2.93)) &#x3D; 2.80</p><p>So the Shannon entropy of this system is 2.80.</p><h2 id="2-What-is-Friston’s-Free-Energy-Principle-FEP"><a href="#2-What-is-Friston’s-Free-Energy-Principle-FEP" class="headerlink" title="2. What is Friston’s Free Energy Principle (FEP)?"></a>2. What is Friston’s Free Energy Principle (FEP)?</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>In a word, Friston’s Free Energy Priciple (FEP) is used to describe that every self-organizing system in equilibrium tends to be in a state of minimal free energy. </p><p>In Friston’s assumption, FEP could be applied to the whole world, including not only the perception, motion control or memory of our brains or our body, but also the biological evolution or the changes in the natural environment. </p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><h4 id="formula"><a href="#formula" class="headerlink" title="formula"></a>formula</h4><p><strong>Free energy &#x3D; Internal energy - Entropy</strong></p><p>–&gt; Error  &#x3D; real case - prediction</p><p>In this formulation, internal energy refers to energy of sensor data for example that received through perception. And entropy is “calculated” by a probably model which is constructed by our brain (the agent) to describe the sensor data. </p><p>To make it easy, just see internal energy as “real case”, entropy as “prediction” and free energy as “prediction error”. The main goal of our brain perceiving the circumstances is to predict the changes of the circumstances. If our brain could predict it correctly, we know that it result in a smallest prediction error. </p><p>To get the minimal free energy, mathematically, one way is to increase the entropy (change our probably model to get better prediction result), another is to decrease internal energy (change the circumstances or choose other real case to make it more close to our prediction).</p><h4 id="Markov-blanket"><a href="#Markov-blanket" class="headerlink" title="Markov blanket"></a>Markov blanket</h4><p>Markov blanket is a key part of FEP. By restricting the interaction between inside and outside of the “blanket”, it proctect the internal state from the influence of the enviroment and prevent the external state from being changed by the agent (e.g. our brain). It is like a “cell membrane” or those diaphragm in our body to seperate our organs. </p><h2 id="3-How-can-FEP-be-applied-to-explain-the-information-dynamics-in-social-media"><a href="#3-How-can-FEP-be-applied-to-explain-the-information-dynamics-in-social-media" class="headerlink" title="3. How can FEP be applied to explain the information dynamics in social media?"></a>3. How can FEP be applied to explain the information dynamics in social media?</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>From my point of view, the procedure of minimizing the free energy is quite similar to people finding the most satisfying social enviroment in this digital world to minimize the difference between the real world and expectation. </p><p>See from the formula of FEP, we know that the keys to the optimal social enviroment are either (1) changing the social environment we located or (2) modifying our prediction or expectation to fit the environment. Both of the methods are related to information dynamics. </p><h3 id="Two-Examples"><a href="#Two-Examples" class="headerlink" title="Two Examples"></a>Two Examples</h3><p>Take recommender system as the example for the former one (environment changing), we are using social media applications like TikTok and we may found that these apps know us a lot. It seems like they always know what kind of things we want to see and recommend those interesting videos to us. This is because the recommendation systems under these apps take the information of our or even our friends’ watching history as the input and train the specifc recommendation model for us so that the more we use these apps, the better they know us. This procedure shows that the information of our behaviors influent the social enviroment, or call it the internal state influent the external state. </p><p>And another example for the latter one (expectation modifying) is that people are getting more and more adaptable to the developing digital world. From web application in 3G to short video in 4G and then AR&#x2F;VR in 5G, or the social media platform developing from Renren to Weibo and then Weibo, TikTok, the digital world that people exist in are changing constantly. People get information through sensory perception. In order not to be outdated we have to get ourselves used to those social applications that more and more people start to use or we choose the apps that people around us most lukely to use. This shows that the information from outside environment greatly influent the agent ourselves, or call it the external state influent the internal state. </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Free_energy_principle">[Wikipedia] Free energy principle</a></li><li><a href="https://en.wikipedia.org/wiki/Markov_blanket">[Wikipedia] Markov Blanket</a></li><li><a href="https://zhuanlan.zhihu.com/p/55839967">[知乎] 自由能最小原理说的是什么？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CUHK</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记-《Effective C++》</title>
    <link href="/2021/01/01/Notes-EffectiveCpp/"/>
    <url>/2021/01/01/Notes-EffectiveCpp/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><span id="more"></span><h2 id="1-习惯C"><a href="#1-习惯C" class="headerlink" title="1. 习惯C++"></a>1. 习惯C++</h2><h3 id="Rule-1-View-C-as-a-federation-of-labguages"><a href="#Rule-1-View-C-as-a-federation-of-labguages" class="headerlink" title="Rule 1: View C++ as a federation of labguages."></a>Rule 1: View C++ as a federation of labguages.</h3><p>将C++视为一个由相关语言组成的联邦而非单一语言，在其某个次语言中，各种守则和通例都倾向简单、直观易懂。然而当你从一个次语言转向另一个次语言的时候，守则可能会改变。</p><p>C++主要的次语言：</p><ul><li>C</li><li>Object-Oriented C++</li><li>Template C++</li><li>STL</li></ul><p>举个例子，对于内置（C-like）类型而言，pass-by-value通常比pass-by-reference高效，但是当你从C part of C++ 转向 Object-Oriented C++ 的时候，由于用户自定义构造函数和析构函数的存在，pass-by-reference-to-const 往往更好。运用Template C++时尤其如此，因为彼时你甚至不知道所处理的对象的类型。然而一旦跨入STL，由于迭代器和函数都是在C指针之上塑造出来的，所以对STL的迭代器和函数对象而言，旧式的C的pass-by-value守则再次适用。</p><h3 id="Rule-2-Prefer-consts-enums-and-inlines-to-defines"><a href="#Rule-2-Prefer-consts-enums-and-inlines-to-defines" class="headerlink" title="Rule 2: Prefer consts, enums, and inlines to #defines."></a>Rule 2: Prefer consts, enums, and inlines to #defines.</h3><p>换言之：以编译器替换预处理器。</p><p>当你使用<code>#define ASPECT_RATIO 1.653</code>的时候，记号名称也许从未被编译器看见，所以没有进入到记号表（symbol table）中。于是当你运用这个常量但是获得一个编译错误信息的时候，错误信息可能会提到1.653而不是ASPECT_RATIO。当这个ASPECT_RATIO被定义在一个非你所写的头文件内，你肯定会对1.653和其来自何处毫无概念，于是将为了追踪这个错误浪费时间。</p><p>解决的方案是用一个常量替换上述的宏：<code>const double AspectRatio  =1.653;</code>。此外对于浮点常量而言，使用常量可能比使用#define带来更少的码量，因为预处理器盲目的将宏名称改成1.653可能导致目标码（object code）出现多份1.653，而改用常量不会出现相同情况。</p><ul><li>对于单纯常量，最好以const 对象或enums替换#defines</li><li>对于形似函数的宏（marcos），最好改用inline函数替换#defines</li></ul><h3 id="Rule-3-Use-const-whenever-possible"><a href="#Rule-3-Use-const-whenever-possible" class="headerlink" title="Rule 3: Use const whenever possible."></a>Rule 3: Use const whenever possible.</h3><p>如果const出现在星号左边，表示被指物是常量；如果出现在星号右边，表示指针自身是常量；如果出现在两边，表示被指物和指针两者都是常量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greeting = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p = greeting;<span class="comment">//non-const pointer, non-const data</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* p = greeting;<span class="comment">//non-const poiter, const data </span></span><br><span class="line"><span class="type">char</span>* <span class="type">const</span> p = greeting;<span class="comment">//const pointer, non-const data</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> p = greeting;<span class="comment">//const pointer, const data</span></span><br></pre></td></tr></table></figure><p>如果被指物是常量，const写在类型之前或者类型之后星号之前的意义是相同的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f1获得一个指针，指向一个常量的/不变的Widget对象；f2也是</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">const</span> Widget* pw)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(Widget <span class="type">const</span> * pw)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful Links</title>
    <link href="/2020/12/26/usefulLink/"/>
    <url>/2020/12/26/usefulLink/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a>或许是最直观好用的Git学习网站</p>]]></content>
    
    
    <categories>
      
      <category>Miscellaneous</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac终端改造计划</title>
    <link href="/2020/12/21/macTerminalRebuild/"/>
    <url>/2020/12/21/macTerminalRebuild/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>Mac终端(Terminal)凭借Unix特性让用户爱不释手，但作为程序员们频繁使用的软件，其默认界面的文字阅读常令人感到吃力。我将借助oh-my-zsh对其进行界面上的美化，让Terminal更加美观易读。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-12-21-023914.png" alt="未改造之前的Terminal"></p><center>Figure 1. 原本的Terminal界面</center><h2 id="0-准备：安装Homebrew"><a href="#0-准备：安装Homebrew" class="headerlink" title="0. 准备：安装Homebrew"></a>0. 准备：安装Homebrew</h2><p>后续的部分插件安装需要用到homebrew，所以可以提前安装。</p><p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p><p>如果你的macOS版本早于Catalina，你需要手动安装zsh：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 zsh</span></span><br><span class="line">brew install zsh</span><br><span class="line"><span class="comment"># 设置zsh为你的默认shell</span></span><br><span class="line">chsh -s /usr/local/bin/zsh</span><br></pre></td></tr></table></figure><h2 id="1-配置Mac终端主题"><a href="#1-配置Mac终端主题" class="headerlink" title="1. 配置Mac终端主题"></a>1. 配置Mac终端主题</h2><ol><li>在 <a href="https://github.com/lysyi3m/macos-terminal-themes">OSX主题的项目主页</a> 里面选择自己喜欢的主题；</li><li>把项目Clone或者Download下来；</li><li>在 <code>themes/</code> 文件夹下，双击相应的*.terminal 文件。一个对应主题的终端窗口将会弹出；</li><li>将当前主题设置为默认：菜单里找到 <em>Shell -&gt; Use Settings as Default</em> 或 <em>Shell -&gt; 将设置用作默认设置</em> 。</li></ol><h2 id="2-安装-oh-my-zsh"><a href="#2-安装-oh-my-zsh" class="headerlink" title="2. 安装 oh-my-zsh"></a>2. 安装 oh-my-zsh</h2><p>参考 <a href="https://ohmyz.sh/">Oh My Zsh 主页</a>。Oh My Zsh 是一个令人愉快的、开源的、社区驱动的管理zsh配置的框架，安装十分简单，在Mac终端下输入如下代码即可。</p><p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p><h2 id="3-安装-oh-my-zsh-主题"><a href="#3-安装-oh-my-zsh-主题" class="headerlink" title="3. 安装 oh-my-zsh 主题"></a>3. 安装 oh-my-zsh 主题</h2><p>如果不想鼓捣第三方主题，oh-my-zsh内置的主题其实也完全足够。只需要：</p><ol><li>在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">内置主题列表</a>寻找你想要的主题；</li><li>在<code>~/.zshrc</code>配置文件里设置<code>ZSH_THEME</code>为你想要的主题名称；如果你不想使用任何内置主题，也可以把这个字段设置为空：<code>ZSH_THEME=&quot;&quot;</code></li><li>激活设置<code>source ~/.zshrc</code></li></ol><p>当然，如果想要安装第三方主题，也可以在 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes">这里</a> 查看。</p><h2 id="4-安装oh-my-zsh插件"><a href="#4-安装oh-my-zsh插件" class="headerlink" title="4. 安装oh-my-zsh插件"></a>4. 安装oh-my-zsh插件</h2><p>Oh-my-zsh提供了丰富的插件，你可以通过查看Github上地 <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins">plugins目录</a>或者 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">wiki</a>来获知哪些插件是可用的。除了许多自带的插件可以直接在~&#x2F;.zshrc 文件的 plugins字段按如下方式使用，也可以便捷地安装其他的插件。下面列举5个插件，更多地插件可以自行寻找。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.zshrc:</span></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><blockquote><p>自带插件。可以使用缩写命令, 比如 <code>gaa</code> -&gt; <code>git add --all</code>, 通过<code>alias | grep git</code>查看所有支持缩写命令。直接按上面的方式加入plugins字段。</p></blockquote><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><blockquote><p>自带插件。不用再使用复杂的<code>tar</code>来解压。直接按上面的方式加入plugins字段。</p></blockquote><h3 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h3><blockquote><p>自带插件。可以使用sublime text打开文件&#x2F;文件夹，用 <code>st</code> 指令直接打开sublime text (前提是已经安装)，用<code> st + 文件/文件夹</code> 可以用sublime打开指定文件夹 。直接按上面的方式加入plugins字段。</p></blockquote><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><blockquote><p>非自带插件。使用<code>j</code>命令直接快速进入某个目录, 比如 <code>j Downloads</code> -&gt; <code>cd ~/Downloads</code>。</p></blockquote><p>用 <code>brew install autojump</code> 安装之后，按照提示在<code>~/.zshrc</code>配置文件添加:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><blockquote><p>非自带插件。命令高亮，让命令五彩缤纷。</p></blockquote><p>用  <code>brew install zsh-syntax-highlighting</code> 完成安装。按照安装完成后的提示，在~&#x2F;.zshrc文件中进行相应的配置。</p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><blockquote><p>非自带插件。输入时按右方向键→自动补全命令。</p></blockquote><p>用 <code>brew install zsh-autosuggestions</code> 完成安装。按照安装完成后的提示，在~&#x2F;.zshrc文件中进行相应的配置。</p><h2 id="5-完成"><a href="#5-完成" class="headerlink" title="5. 完成"></a>5. 完成</h2><p>至此， 你应该可以拥有一个美观易用的terminal了。开始coding吧！</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-12-21-070158.png" alt="image-20201221150157035"></p><center>Figure 2. 配置之后的Terminal界面</center><h2 id="Optional-zsh安装后的conda使用：报错与解决"><a href="#Optional-zsh安装后的conda使用：报错与解决" class="headerlink" title="(Optional) zsh安装后的conda使用：报错与解决"></a>(Optional) zsh安装后的conda使用：报错与解决</h2><p>在安装完zsh，开始要使用原本环境中conda相关指令的时候出现错误，以下是错误内容和相应的解决方案。</p><ol><li><p><code>zsh：command not find:conda</code></p><ul><li><p>首先检查是否安装了conda。在anaconda安装的文件夹下的bin文件夹查看是否有conda指令，没有的话就是尚未安装。</p></li><li><p>如果已经安装了conda，但是仍然报这个错，应该是因为环境变量配置文件没有更新。对于zsh来说，配置文件是 ~&#x2F;.zshrc。</p><blockquote><p>简单来说.zshrc是linux文件夹的一个配置文件，这个文件主要保存个人的一些个性化设置，比如命名别名、路径等。</p></blockquote></li><li><p><code>vi ~/.zshrc</code> 打开配置文件。</p></li><li><p>在文件末尾加入一行<code>export PATH=/path/to/anaconda/bin:$PATH</code> 。注意这里的路径需要改成自己电脑上的anaconda的路径。比如我的电脑上装的是miniconda3，路径是 &#x2F;Users&#x2F;bing&#x2F;miniconda3&#x2F;，那么这一句就应该是<code>export PATH=/Users/bing/miniconda3/bin:$PATH</code>。添加完成后保存退出。</p></li><li><p><code>source ~/.zshrc</code> 使配置文件的修改立即生效。</p></li><li><p>再次查看conda指令，输入<code>conda --version</code>，如果可以正常显示版本号，说明问题已经解决。</p></li></ul></li><li><p><code>CommandNotFoundError: Your shell has not been properly configured to use &#39;conda activate&#39;.</code>  </p><p><strong>解决</strong>：用<code>source activate</code> 重新激活一下activate，这时候当前环境会变更到(base)，说明activate指令可以正常运行了。</p></li></ol><h2 id="Optional-zsh自定义快捷指令"><a href="#Optional-zsh自定义快捷指令" class="headerlink" title="(Optional) zsh自定义快捷指令"></a>(Optional) zsh自定义快捷指令</h2><p>平时使用terminal的时候，我们输入很长的指令往往会感到繁琐头疼。我们可以通过修改zshrc文件来设置快捷指令。</p><p>比如想要用安装的Typora软件来打开某个Markdown文件，我们需要命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a &quot;Typora&quot; filename.md</span><br></pre></td></tr></table></figure><p>前摇过长，不能忍。</p><p>要实现类似 <code>st filename.md</code> 这种用Sublime Text快捷打开文件的操作，我们需要向~&#x2F;.zshrc文件添加一行<code>alias</code>指令替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 tp 指定为 open -a <span class="string">&quot;Typora&quot;</span>，并添加到 ~/.zshrc 文件末尾</span></span><br><span class="line">echo &quot;alias tp=&quot;open -a &quot;Typora&quot; &quot; &quot; &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行立即生效</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tp filename.md</span><br></pre></td></tr></table></figure><p>可以发现已经可以快捷打开某文件。同理可以自行设置其他的快捷指令。:-)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://ohmyz.sh/">Oh My Zsh - 官网</a></li><li><a href="https://github.com/ohmyzsh">Oh My Zsh - Github主页</a></li><li><a href="https://tonyxu.io/zh/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/">程序员的Mac终端(oh-my-zsh)终极美化及必备插件推荐 | Tony Xu 博客</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IERG4160 Image and Video Processing</title>
    <link href="/2020/12/02/IERG4160/"/>
    <url>/2020/12/02/IERG4160/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Lecture-07-Object-Recogonition"><a href="#Lecture-07-Object-Recogonition" class="headerlink" title="Lecture 07 Object Recogonition"></a>Lecture 07 Object Recogonition</h2><ul><li>What is Object Recogonition</li><li>Pipeline: image –&gt; feature –(classifier)–&gt; class label</li><li>feature representation<ul><li>Bag of words</li><li>dictionary &lt;– K-means</li></ul></li><li>local descriptor &lt;– HOG</li><li>Spatial Pyramid &#x2F; Part-based models (basic ideas)</li><li>Classifier<ul><li>K-means neighbor</li></ul></li></ul><h2 id="Lecture-08-Linear-Classifier"><a href="#Lecture-08-Linear-Classifier" class="headerlink" title="Lecture 08 Linear Classifier"></a>Lecture 08 Linear Classifier</h2><ul><li>Binary Classificatoin</li><li>Linear Classifier    f(x)&#x3D;sign(wT+b)</li><li>Perceptron Algorithm   w&lt;–w+a<em>Yi</em>Xi (when misclassified)<ul><li>(linearly separable)</li></ul></li><li>Support Vector Machine &lt;– maximize the margin</li><li>Slack Variable &lt;– trade off</li></ul><h2 id="Lecture-09-Multi-class-Classification"><a href="#Lecture-09-Multi-class-Classification" class="headerlink" title="Lecture 09 Multi-class Classification"></a>Lecture 09 Multi-class Classification</h2><ul><li>Basic concept</li><li>Combine binary classifiers<ul><li>One-vs-all  –  k</li><li>All-vs-all  –  k(k-1)&#x2F;2</li><li>minimum # classifiers  – log(2)k</li></ul></li></ul><h2 id="Lecture-10-Deep-Learning"><a href="#Lecture-10-Deep-Learning" class="headerlink" title="Lecture 10 Deep Learning"></a>Lecture 10 Deep Learning</h2><ul><li>Deep: multi-level conputation for feature</li><li>Learning: end to end</li><li>Simpified formulation</li></ul><h2 id="Lecture-11-CNN-Convolutional-Neural-Network"><a href="#Lecture-11-CNN-Convolutional-Neural-Network" class="headerlink" title="Lecture 11 CNN (Convolutional Neural Network)"></a>Lecture 11 CNN (Convolutional Neural Network)</h2><ul><li>convolutional layer<ul><li>3D kernel –&gt; single mask (h·w·n_i)</li><li>multiple kernel –&gt; (h·w·n_i·n_o)</li><li>Together –&gt; convolutional layer</li></ul></li><li>activation</li><li>Pooling</li></ul><h2 id="Lecture-10b-Training-Process"><a href="#Lecture-10b-Training-Process" class="headerlink" title="Lecture 10b Training Process"></a>Lecture 10b Training Process</h2><ul><li>SGD: </li><li>back-propagation</li></ul><h2 id="Lecture-12-Object-Detection"><a href="#Lecture-12-Object-Detection" class="headerlink" title="Lecture 12 Object Detection"></a>Lecture 12 Object Detection</h2><ul><li><p>What is Object Detection </p><ul><li>bounding boxes</li></ul></li><li><p>R-CNN &#x2F; Fast R-CNN &#x2F; Faster R-CNN (Basic idea)</p><ul><li>Share computation –&gt; improve efficiency</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>CUHK</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记-《清华大学C++程序设计》</title>
    <link href="/2020/09/21/Notes-%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2020/09/21/Notes-%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="第四章-类与对象"><a href="#第四章-类与对象" class="headerlink" title="第四章 类与对象"></a>第四章 类与对象</h2><h2 id="第五章-数据的共享与保护"><a href="#第五章-数据的共享与保护" class="headerlink" title="第五章 数据的共享与保护"></a>第五章 数据的共享与保护</h2><ul><li>变量和对象定义在不同的位置, 其作用域、可见性、生存期都不同。</li><li>友元：对一些类外的函数、其他的类给予授权，使之可以访问本类的私有成员。</li><li>如何保障安全性？通过const关键字，限制对共享类型的修改</li></ul><h3 id="1-标识符的作用域与可见性"><a href="#1-标识符的作用域与可见性" class="headerlink" title="1. 标识符的作用域与可见性"></a>1. 标识符的作用域与可见性</h3><h4 id="1-1-作用域分类"><a href="#1-1-作用域分类" class="headerlink" title="1.1 作用域分类"></a>1.1 作用域分类</h4><ul><li>函数原型作用域：函数原型中的参数，形参表中的()括号之内<ul><li>函数声明中: double func(double a);</li></ul></li><li>局部作用域（块作用域）：函数的形参、在块中声明的标识符，作用域自声明处起，限于块中</li><li>类作用域：类的成员具有类作用域，范围包括类体和成员函数体<ul><li>在类作用域之外访问类成员：<ul><li>静态成员：通过类名，或者该类的对象名、对象引用访问</li><li>非静态成员：通过类名，或者该类的对象名、对象引用、对象指针访问</li></ul></li></ul></li><li>文件作用域：不在前述作用域中出现的声明，就具有文件作用域。开始于声明点，结束与文件结束处。</li><li>命名空间作用域</li></ul><h4 id="1-2-可见性"><a href="#1-2-可见性" class="headerlink" title="1.2 可见性"></a>1.2 可见性</h4><ul><li><p>是对标识符的引用的角度来谈的概念，表示从内层作用域向外层作用域“看”时能看见什么。</p></li><li><p>如果标识在某处可见，那么就可以在该处引用这个标识符</p></li><li><p>如果标识符在外层中声明，且在内层中没有同一标识符的声明，则该标识符在内层可见；对于两个嵌套作用域，若内层作用域内声明了与外层作用域中同名的标识符，则外层作用域的标识符在内层不可见（但仍在外层同名标识符的作用域中）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">i = <span class="number">5</span>;</span><br><span class="line">&#123;<span class="type">int</span> i;</span><br><span class="line">i = <span class="number">7</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;i= &quot;</span> &lt;&lt; i &lt;&lt; endl;<span class="comment">//输出7</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;i= &quot;</span> &lt;&lt; i &lt;&lt; endl;<span class="comment">//输出5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-对象的生存期"><a href="#2-对象的生存期" class="headerlink" title="2. 对象的生存期"></a>2. 对象的生存期</h3><h4 id="2-1-静态生存期"><a href="#2-1-静态生存期" class="headerlink" title="2.1 静态生存期"></a>2.1 静态生存期</h4><ul><li>该生存期与程序的运行期相同。</li><li>在文件作用域中声明的变量具有这种生存期；</li><li>在函数内部声明静态生存期对象，要冠以关键字static（static关键字声明的局部变量具有<strong>全局的寿命</strong>（即在整个程序中都存在）、局部的可见性）</li></ul><h4 id="2-2-动态生存期"><a href="#2-2-动态生存期" class="headerlink" title="2.2 动态生存期"></a>2.2 动态生存期</h4><ul><li>开始于程序执行到声明点时，结束于命名该标识符的作用域结束处。</li><li>块作用域中声明的，没有用static修饰的对象，是动态生存期的对象（习惯称局部生存期对象）。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> b;</span><br><span class="line">  <span class="comment">//a b 为静态局部变量，具有全局寿命，局部可见，只第一次进入函数时初始化</span></span><br><span class="line">  <span class="type">int</span> c = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">//c 为局部变量，具有动态生存期，每次进入函数时都初始化</span></span><br><span class="line">  a += <span class="number">2</span>; i += <span class="number">32</span>; c += <span class="number">5</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;---OTHER---&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;i: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; a: &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b: &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">  b = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> a;<span class="comment">//此处的 a 为静态局部变量，全局寿命，局部可见</span></span><br><span class="line">  <span class="type">int</span> b = <span class="number">-10</span>;</span><br><span class="line">  <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//b c 为局部变量，具有动态生存期</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;---MAIN---&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;i: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; a: &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b: &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">  c += <span class="number">8</span>; <span class="built_in">other</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;---MAIN---&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;i: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; a: &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b: &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">  c += <span class="number">10</span>; <span class="built_in">other</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果：</span></span><br><span class="line"><span class="comment">---MAIN---</span></span><br><span class="line"><span class="comment">i:1 a:0 b:-10 c:0</span></span><br><span class="line"><span class="comment">---OTHER---</span></span><br><span class="line"><span class="comment">i:33 a:4 b:0 c:15</span></span><br><span class="line"><span class="comment">---MAIN---</span></span><br><span class="line"><span class="comment">i:33 a:0 b:-10 c:8</span></span><br><span class="line"><span class="comment">---OTHER---</span></span><br><span class="line"><span class="comment">i:75 a:6 b:4 c:15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-类的静态成员"><a href="#3-类的静态成员" class="headerlink" title="3. 类的静态成员"></a>3. 类的静态成员</h3><ul><li>类的静态成员是用static修饰的，属于整个类而不属于对象</li></ul><h4 id="3-1-静态数据成员"><a href="#3-1-静态数据成员" class="headerlink" title="3.1 静态数据成员"></a>3.1 静态数据成员</h4><ul><li>用关键字static声明</li><li>为该类的所有对象共享，具有静态生存期</li><li>必须在类外定义和初始化，用::来指明所属的类</li></ul><h4 id="3-2-静态函数成员"><a href="#3-2-静态函数成员" class="headerlink" title="3.2 静态函数成员"></a>3.2 静态函数成员</h4><p>上面的例子中，我们发现类中定义的函数都是属于对象的，也就是说必须有相应的对象我们才能够调用如getX()、showCount()这样的函数。但是由于我们定义了静态的数据成员，它不属于任一对象，那么我们如何在没有初始化对象的时候就知道当前的count数量呢？于是我们需要定义静态函数成员。</p><ul><li>对于非静态函数，每次调用都是用 对象名.函数名() 这样的形式，也就是函数能够清楚地知道是什么对象调用了它</li><li>对于静态函数，调用的时候不通过特定对象，所以一般不用来处理属于对象的非静态数据，而专门用来处理整个类的静态数据。（如果非要处理属于对象的数据，就需要将希望其处理的这个对象作为参数传给它）</li></ul><h3 id="4-类的友元"><a href="#4-类的友元" class="headerlink" title="4. 类的友元"></a>4. 类的友元</h3><ul><li>是C++提供的一种破坏数据封装和数据隐藏的机制</li><li>通过将一个模块声明为另一个模块的友元，一个模块能够引用到另一个模块中本是被隐藏的信息。</li><li>为了确保数据的完整性，及数据封装与隐藏的原则，建议尽量不使用或少使用友元。</li></ul><h4 id="4-1-友元函数"><a href="#4-1-友元函数" class="headerlink" title="4.1 友元函数"></a>4.1 友元函数</h4><ul><li>友元函数是在类声明中由关键字friend修饰说明的非成员函数，在它的函数体中能够通过对象名访问 private 和 protected成员</li><li>作用：增加灵活性，使程序员可以在封装和快速性方面做合理选择。</li><li>访问对象中的成员必须通过对象名。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="comment">//Point类声明</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//外部接口</span></span><br><span class="line"><span class="built_in">Point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123; &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="type">float</span> <span class="title">dist</span><span class="params">(Point &amp;a, Point &amp;b)</span></span>;</span><br><span class="line">  <span class="keyword">private</span>: <span class="comment">//私有数据成员</span></span><br><span class="line">  <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">dist</span><span class="params">( Point&amp; a, Point&amp; b)</span> </span>&#123;</span><br><span class="line">  <span class="type">double</span> x = a.x - b.x;</span><br><span class="line">  <span class="type">double</span> y = a.y - b.y;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(<span class="built_in">sqrt</span>(x * x + y * y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">p2</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt;<span class="string">&quot;The distance is: &quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">dist</span>(p1, p2) &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">The distance is: 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>思考：dist传的是a和b的引用而不是直接传值（对象），好处和坏处？</li></ul><p>好处：效率高，不需要传递整个对象而只是引用</p><p>坏处：安全隐患，引用是双向传递，有可能会不小心更改a和b原数据</p><h4 id="4-2-友元类"><a href="#4-2-友元类" class="headerlink" title="4.2 友元类"></a>4.2 友元类</h4><ul><li>若一个类为另一个类的友元，则此类的所有成员都能访问对方类的私有成员。</li><li>声明语法：将友元类名在另一个类中使用friend修饰说明。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//友元类举例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">B::set</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">a.x=i;<span class="comment">//注意这里为了B类直接通过对象访问到A类的私有成员x，需要在A类中定义友元</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">B::display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">a.<span class="built_in">display</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>类的友元关系是单向的：声明B类是A类的友元 ≠ A类是B类的友元</li></ul><h3 id="5-共享数据的保护"><a href="#5-共享数据的保护" class="headerlink" title="5. 共享数据的保护"></a>5. 共享数据的保护</h3><ul><li>既需要共享数据，又需要保证共享数据的安全性，即不被修改。则可以定义为const常类型。</li></ul><h4 id="5-1-常类型"><a href="#5-1-常类型" class="headerlink" title="5.1 常类型"></a>5.1 常类型</h4><ul><li>常对象：必须初始化，不能被更新 </li><li>常成员：常数据成员、常成员函数</li><li>常引用：被引用的对象不能被更新 </li><li>（常数组：被引用数组不能被修改）</li><li>（常指针：指向常量的指针）</li></ul><h5 id="5-1-1-常对象"><a href="#5-1-1-常对象" class="headerlink" title="5.1.1 常对象"></a>5.1.1 常对象</h5><p>—— const 类名 对象名</p><p>常成员函数可以被非常对象调用，但常对象不可调用非常成员函数。</p><p>（一个const常对象调用的函数只能是类中的const修饰的常成员函数。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> i,<span class="type">int</span> j) &#123;x=i; y=j;&#125;</span><br><span class="line">                     ...</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="type">const</span> <span class="title">a</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>; <span class="comment">//a是常对象，不能被更新</span></span><br></pre></td></tr></table></figure><h5 id="5-1-2-常成员"><a href="#5-1-2-常成员" class="headerlink" title="5.1.2 常成员"></a>5.1.2 常成员</h5><p>如果在定义类的成员函数的时候，里面的操作本就没有打算修改成员函数的值，那么可以把函数定义成const类型，这样之后使用会更加方便。</p><ul><li>常成员函数 —— 类型说明符 函数名（参数表）const；<ul><li>const关键字可以被用于参与对重载函数的区分</li><li>通过常对象只能调用它的常成员函数</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">R</span>(<span class="type">int</span> r1, <span class="type">int</span> r2) : <span class="built_in">r1</span>(r1), <span class="built_in">r2</span>(r2) &#123; &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> r1, r2;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; r1 &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; r2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R::print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; r1 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; r2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">  a.<span class="built_in">print</span>(); <span class="comment">//调用void print()</span></span><br><span class="line">  <span class="function"><span class="type">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>,<span class="number">52</span>)</span></span>; </span><br><span class="line">  b.<span class="built_in">print</span>(); <span class="comment">//调用void print() const</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常数据成员</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       <span class="built_in">A</span>(<span class="type">int</span> i);</span><br><span class="line">       <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">       <span class="type">const</span> <span class="type">int</span> a;</span><br><span class="line">       <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> b;  <span class="comment">//静态常数据成员，只初始化一次</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> A::b=<span class="number">10</span>;</span><br><span class="line">A::<span class="built_in">A</span>(<span class="type">int</span> i) : <span class="built_in">a</span>(i) &#123; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; a &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; b &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//建立对象a和b，并以100和0作为初值，分别调用构造函数，</span></span><br><span class="line"><span class="comment">//通过构造函数的初始化列表给对象的常数据成员赋初值</span></span><br><span class="line">  <span class="function">A <span class="title">a1</span><span class="params">(<span class="number">100</span>)</span>, <span class="title">a2</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  a1.<span class="built_in">print</span>();<span class="comment">// 100:10</span></span><br><span class="line">  a2.<span class="built_in">print</span>();<span class="comment">// 0:10</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-常引用"><a href="#5-1-3-常引用" class="headerlink" title="5.1.3 常引用"></a>5.1.3 常引用</h5><p> —— const 类型说明符 &amp;引用名</p><p>在友元中用常引用做参数，既能获得较高执行效率，又能保证实参的安全性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="comment">//Point类定义</span></span><br><span class="line"><span class="keyword">public</span>:          <span class="comment">//外部接口</span></span><br><span class="line">       <span class="built_in">Point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>)</span><br><span class="line">    : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123; &#125;</span><br><span class="line">       <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">       <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">friend</span> <span class="type">float</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> Point &amp;p1,<span class="type">const</span> Point &amp;p2)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:         <span class="comment">//私有数据成员</span></span><br><span class="line">       <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> Point &amp;p1, <span class="type">const</span> Point &amp;p2)</span> </span>&#123;</span><br><span class="line">       <span class="type">double</span> x = p1.x - p2.x; <span class="comment">//只能引用，不能修改</span></span><br><span class="line">       <span class="type">double</span> y = p1.y - p2.y;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(<span class="built_in">sqrt</span>(x*x+y*y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">//主函数</span></span><br><span class="line">       <span class="function"><span class="type">const</span> Point <span class="title">myp1</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">myp2</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;    </span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;The distance is: &quot;</span>;</span><br><span class="line">       cout &lt;&lt; <span class="built_in">dist</span>(myp1, myp2) &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六章-数组、指针和字符串"><a href="#第六章-数组、指针和字符串" class="headerlink" title="第六章 数组、指针和字符串"></a>第六章 数组、指针和字符串</h2><h3 id="6-1-数组的定义和初始化"><a href="#6-1-数组的定义和初始化" class="headerlink" title="6.1 数组的定义和初始化"></a>6.1 数组的定义和初始化</h3><p>略。</p><h3 id="6-2-数组作为函数的参数"><a href="#6-2-数组作为函数的参数" class="headerlink" title="6.2 数组作为函数的参数"></a>6.2 数组作为函数的参数</h3><p>略。</p><h3 id="6-3-对象数组"><a href="#6-3-对象数组" class="headerlink" title="6.3 对象数组"></a>6.3 对象数组</h3><ul><li>例如：Point a[2] &#x3D; {Point(1,2), Point(1,3)};</li><li>数组中每一个元素对象被创建时，系统都会调用类构造函数初始化该对象。</li></ul><h4 id="6-3-1-数组元素的构造和析构"><a href="#6-3-1-数组元素的构造和析构" class="headerlink" title="6.3.1 数组元素的构造和析构"></a>6.3.1 数组元素的构造和析构</h4><ul><li>元素所属的类不声明构造函数，则采用默认构造函数。</li><li>各元素对象的初值要求为相同的值时，可以声明具有默认形参值的构造函数。</li><li>各元素对象的初值要求为不同的值时，需要声明带形参的构造函数。</li><li>当数组中每一个对象被删除时，系统都要调用一次析构函数。</li></ul><h3 id="6-4-基于范围的for循环"><a href="#6-4-基于范围的for循环" class="headerlink" title="6.4 基于范围的for循环"></a>6.4 基于范围的for循环</h3><ul><li>for (int x : array) {}</li></ul><h3 id="6-5-指针的定义和运算"><a href="#6-5-指针的定义和运算" class="headerlink" title="6.5 指针的定义和运算"></a>6.5 指针的定义和运算</h3><ul><li>内存空间的访问方式：1. 通过变量名；2. 通过地址</li></ul><h4 id="6-5-1-指针的概念"><a href="#6-5-1-指针的概念" class="headerlink" title="6.5.1 指针的概念"></a>6.5.1 指针的概念</h4><ul><li>指针：内存地址，用于间接访问内存单元</li><li>指针变量：用于存放地址的变量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> i;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>* ptr = &amp;i;<span class="comment">//指向int变量的指针</span></span><br><span class="line"><span class="comment">//ifi = 3;</span></span><br><span class="line"><span class="comment">//then*ptr = 3;</span></span><br><span class="line"><span class="comment">//ptr = &amp;i = i所在的地址</span></span><br></pre></td></tr></table></figure><h4 id="6-5-2-指针的初始化和赋值"><a href="#6-5-2-指针的初始化和赋值" class="headerlink" title="6.5.2 指针的初始化和赋值"></a>6.5.2 指针的初始化和赋值</h4><ul><li>语法形式：存储类型 数据类型 *指针名 &#x3D; 初始地址</li><li>例如：int *pa &#x3D; &amp;a         </li><li>a必须提前声明且变量类型和指针类型一致；可以用一个已有合法值的指针去初始化另一个指针变量，不要用一个内部非静态变量去初始化static指针</li><li>指针空值 nullptr，是表达更准确，类型安全的指针</li><li>可以声明void类型的指针：void *pv；不可以声明void类型的变量</li><li></li></ul><h5 id="指向常量的指针-amp-指针类型的常量"><a href="#指向常量的指针-amp-指针类型的常量" class="headerlink" title="指向常量的指针 &amp; 指针类型的常量"></a>指向常量的指针 &amp; 指针类型的常量</h5><ul><li><p>指向常量的指针：const int* p1 &#x3D; &amp;a</p><ul><li><p>不能通过指向常量的指针来改变所指对象的值，但指针本身可以改变，可以指向另外的对象</p></li><li><p>如果希望一个指针是一个只读的指针，可以访问内存空间中的内容但是不能进行改写和覆盖，那么可以将其定义为一个const指针</p></li><li><p>&#96;&#96;&#96;c++<br>int a;<br>const int *p1 &#x3D; &amp;a; &#x2F;&#x2F;p1是指向常量的指针<br>int b;<br>p1 &#x3D; &amp;b; &#x2F;&#x2F;正确，p1本身的值可以改变<br>*p1 &#x3D; 1; &#x2F;&#x2F;编译时出错，不能通过p1改变所指的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 指针类型的常量：int * const p2 = &amp;a</span><br><span class="line"></span><br><span class="line">  - 若声明指针常量，则指针本身的值不能被改变</span><br><span class="line"></span><br><span class="line">  - ```c++</span><br><span class="line">    int a;</span><br><span class="line">    int * const p2 = &amp;a;</span><br><span class="line">    p2 = &amp;b; //错误，p2是指针常量，值不能改变</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="6-5-3-指针的算术运算、关系运算"><a href="#6-5-3-指针的算术运算、关系运算" class="headerlink" title="6.5.3 指针的算术运算、关系运算"></a>6.5.3 指针的算术运算、关系运算</h4><h5 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h5><ul><li>指针的加减操作意义是指向下一个或前一个完整数据的起始值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="type">short</span> *pa = a;</span><br><span class="line"><span class="comment">//*pa等同于a[0]</span></span><br><span class="line"><span class="comment">//*(pa+1)等同于a[1]</span></span><br><span class="line"><span class="comment">//*(pa+2)等同于a[2] </span></span><br></pre></td></tr></table></figure><h5 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h5><ul><li>指向相同类型数据的指针之间可以进行各种关系运算</li><li>指向不同数据类型的指针，以及指针与一般整数变量之间的关系运算是无意义的</li><li>指针可以和零之间进行等于或不等于的关系运算（判空）<ul><li>例如 p&#x3D;&#x3D;0 或 p!&#x3D;0</li></ul></li></ul><h3 id="6-6-指针与数组"><a href="#6-6-指针与数组" class="headerlink" title="6.6 指针与数组"></a>6.6 指针与数组</h3><ul><li>定义与赋值：int a[10], *pa; pa &#x3D; &amp;a[0] 或 pa &#x3D; a</li><li>等效的形式：a[i] , *(pa+i), *(a+i), pa[i]</li><li>用指针数组来表示二维数组的时候，数组里面每一个元素都是一个指针，分别指向一个数组。这种表示和二维数组最大得不同就是，指针数组的数组元素之间的内存不一定需要连续，但是二维数组的各行各列内存是连续的</li></ul><h3 id="6-7-指针与函数"><a href="#6-7-指针与函数" class="headerlink" title="6.7 指针与函数"></a>6.7 指针与函数</h3><h4 id="6-7-1-指针类型的函数"><a href="#6-7-1-指针类型的函数" class="headerlink" title="6.7.1 指针类型的函数"></a>6.7.1 指针类型的函数</h4><ul><li>返回值是指针类型</li><li>定义：存储类型 数据类型 *函数名(){};</li><li>不要将非静态局部地址用作函数的返回值</li></ul><p>错误的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span>* <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="type">int</span>* ptr= <span class="built_in">function</span>();</span><br><span class="line">    *prt=<span class="number">5</span>; <span class="comment">//危险的访问！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> local=<span class="number">0</span>; <span class="comment">//非静态局部变量作用域和寿命都仅限于本函数体内</span></span><br><span class="line">    <span class="keyword">return</span> &amp;local;</span><br><span class="line">&#125;<span class="comment">//函数运行结束时，变量local被释</span></span><br></pre></td></tr></table></figure><p>正确的例子1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> array[<span class="number">10</span>]; <span class="comment">//主函数中定义的数组</span></span><br><span class="line">    <span class="function"><span class="type">int</span>* <span class="title">search</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> num)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">      cin&gt;&gt;array[i];</span><br><span class="line">    <span class="type">int</span>* zeroptr= <span class="built_in">search</span>(array, <span class="number">10</span>);  <span class="comment">//将主函数中数组的首地址传给子函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">search</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> num)</span></span>&#123; <span class="comment">//指针a指向主函数中定义的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">      <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> &amp;a[i]; <span class="comment">//返回的地址指向的元素是在主函数中定义的</span></span><br><span class="line">&#125;<span class="comment">//函数运行结束时，a[i]的地址仍有</span></span><br></pre></td></tr></table></figure><p>正确的例子2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span>* <span class="title">newintvar</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="type">int</span>* intptr= <span class="built_in">newintvar</span>();</span><br><span class="line">    *intptr=<span class="number">5</span>; <span class="comment">//访问的是合法有效的地址</span></span><br><span class="line">    <span class="keyword">delete</span> intptr; <span class="comment">//如果忘记在这里释放，会造成内存泄漏</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">newintvar</span> <span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="type">int</span>* p=<span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">//返回的地址指向的是动态分配的空间</span></span><br><span class="line">&#125;<span class="comment">//函数运行结束时，p中的地址仍有效</span></span><br></pre></td></tr></table></figure><h4 id="6-7-2-指向函数的指针"><a href="#6-7-2-指向函数的指针" class="headerlink" title="6.7.2 指向函数的指针"></a>6.7.2 指向函数的指针</h4><ul><li>函数指针指向函数的起始地址（指向的是程序代码存储区）</li><li>定义：存储类型 数据类型 (*函数指针名)();     &#x2F;&#x2F;如果没有这对括号，那么定义的就是返回值为指针类型的函数</li><li>典型用途：实现函数回调<ul><li>通过函数指针调用的函数<ul><li>例如将函数的指针作为参数传递给一个函数，使得在处理相似事件的时候可以灵活使用不同的方法</li></ul></li><li>调用者不关心谁是被调用者<ul><li>需要知道存在一个具有特定原型和限制条件的被调用函数</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compute</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>(*func)(<span class="type">int</span>, <span class="type">int</span>)&#123; </span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">return</span> func(a,b);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> max(<span class="type">int</span> a, <span class="type">int</span> b)&#123; <span class="keyword">return</span> (a&gt;b)?a:b; &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> min(<span class="type">int</span> a, <span class="type">int</span> b)&#123; <span class="keyword">return</span> (a&lt;b)?a:b; &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> sum(<span class="type">int</span> a, <span class="type">int</span> b)&#123; <span class="keyword">return</span> a+b &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> main()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">int</span> a, b, res;</span></span></span><br><span class="line"><span class="params"><span class="function">  cin &gt;&gt; a &gt;&gt; b;</span></span></span><br><span class="line"><span class="params"><span class="function">  res = compute(a, b, &amp;max);cout &lt;&lt; res &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function">  res = compute(a, b, &amp;min);cout &lt;&lt; res &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function">  res = compute(a, b, &amp;sum);cout &lt;&lt; res &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">return</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="6-8-对象指针"><a href="#6-8-对象指针" class="headerlink" title="6.8 对象指针"></a>6.8 对象指针</h3><ul><li>类名 *对象指针名  :   TreeNode* root;</li><li>访问对象：root-&gt;val</li><li>this指针：隐含与类的每一个非静态成员函数中。当通过一个对象调用成员函数时，系统先将该对象的地址赋给this指针，然后调用成员函数，成员函数对对象的数据成员进行操作时，就隐含使用了this指针。</li></ul><h3 id="6-9-动态内存分配"><a href="#6-9-动态内存分配" class="headerlink" title="6.9 动态内存分配"></a>6.9 动态内存分配</h3><h4 id="6-9-1-动态分配与释放内存"><a href="#6-9-1-动态分配与释放内存" class="headerlink" title="6.9.1 动态分配与释放内存"></a>6.9.1 动态分配与释放内存</h4><p>动态申请内存操作符 new —— new 类型名T(初始化参数列表)</p><ul><li>功能：在程序执行期间，申请用语存储T类型对象的内存空间，并依初值列表赋以初值</li><li>结果值：T类型的指针，指向新分配的内存；失败：抛出异常</li></ul><p>释放内存操作符delete —— delete 指针p</p><ul><li><p>功能：释放指针p所指向的内存。p必须是new操作的返回值。</p></li><li><p>注意：是删除指针指向的内存而不是指针自己。delete之后p可以重新进行赋值。</p></li><li><p>&#96;&#96;&#96;c++<br>int main() {</p><p>  Point *ptr1 &#x3D; new Point; &#x2F;&#x2F;调用默认构造函数<br>  delete ptr1; &#x2F;&#x2F;删除对象，自动调用析构函数</p><p>  ptr1 &#x3D; new Point(1,2);&#x2F;&#x2F;ptr1可以继续使用<br>  delete ptr1;</p><p>  return 0;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 6.9.2 申请和释放动态数组</span><br><span class="line"></span><br><span class="line">分配：new 类型名T[数组长度]; （多维数组：new 类型名T[维度1\][维度2] </span><br><span class="line"></span><br><span class="line">释放：delete[] 数组名p （p是new分配得到的数组首地址）</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">  int (*cp)[9][8] = new int[7][9][8];</span><br><span class="line">  for (int i = 0; i &lt; 7; i++)</span><br><span class="line">    for (int j = 0; j &lt; 9; j++)</span><br><span class="line">      for (int k = 0; k &lt; 8; k++)</span><br><span class="line">      *(*(*(cp + i) + j) + k) =（i * 100 + j * 10 + k);</span><br><span class="line">  for (int i = 0; i &lt; 7; i++) &#123;</span><br><span class="line">  for (int j = 0; j &lt; 9; j++) &#123;</span><br><span class="line">  for (int k = 0; k &lt; 8; k++)</span><br><span class="line">  cout &lt;&lt; cp[i][j][k] &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  delete[] cp;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>将动态数组封装成类 </p><ul><li>更加简洁,便于管理</li><li>可以在访问数组元素前检查下标是否越界</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="comment">//类的声明同例6-16 … &#125;;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayOfPoints</span> &#123; <span class="comment">//动态数组类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">ArrayOfPoints</span>(<span class="type">int</span> size) : <span class="built_in">size</span>(size) &#123;</span><br><span class="line">  points = <span class="keyword">new</span> Point[size];</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">ArrayOfPoints</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Deleting...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span>[] points;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function">Point&amp; <span class="title">element</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size);</span><br><span class="line"><span class="keyword">return</span> points[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Point *points; <span class="comment">//指向动态数组首地址</span></span><br><span class="line"><span class="type">int</span> size; <span class="comment">//数组大小</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> count;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Please enter the count of points: &quot;</span>;</span><br><span class="line">  cin &gt;&gt; count;</span><br><span class="line">  <span class="function">ArrayOfPoints <span class="title">points</span><span class="params">(count)</span></span>; <span class="comment">//创建数组对象</span></span><br><span class="line">  points.<span class="built_in">element</span>(<span class="number">0</span>).<span class="built_in">move</span>(<span class="number">5</span>, <span class="number">0</span>); <span class="comment">//访问数组元素的成员</span></span><br><span class="line">  points.<span class="built_in">element</span>(<span class="number">1</span>).<span class="built_in">move</span>(<span class="number">15</span>, <span class="number">20</span>); <span class="comment">//访问数组元素的成员</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">Please enter the number of points:<span class="number">2</span></span><br><span class="line">Default Constructor called.</span><br><span class="line">Default Constructor called.</span><br><span class="line">Deleting...</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br></pre></td></tr></table></figure><h3 id="6-10-智能指针"><a href="#6-10-智能指针" class="headerlink" title="6.10 智能指针"></a>6.10 智能指针</h3><ul><li>unique_ptr：不允许多个指针共享资源，可以用标准库中的move函数转移指针</li><li>shared_ptr：多个指针共享资源</li><li>weak_ptr：可复制shared_ptr，但其构造或者释放对资源不产生影响</li></ul><h3 id="6-11-vector对象"><a href="#6-11-vector对象" class="headerlink" title="6.11 vector对象"></a>6.11 vector对象</h3><ul><li>注意：vector对象名不能当做数组的头指针使用</li></ul><h3 id="6-12-对象复制与移动"><a href="#6-12-对象复制与移动" class="headerlink" title="6.12 对象复制与移动"></a>6.12 对象复制与移动</h3><h4 id="6-12-1-深层复制和浅层复制"><a href="#6-12-1-深层复制和浅层复制" class="headerlink" title="6.12.1 深层复制和浅层复制"></a>6.12.1 深层复制和浅层复制</h4><ul><li>浅层复制：实现对象间数据元素的一一复制</li><li>深层复制：当被复制的对象数据成员是指针类型时，不是复制该指针成员本身，而是将指针所指对象进行复制。（防止调用析构函数时候出错）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cassert&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Point &#123; //类的声明同例6-16</span><br><span class="line">&#125;;</span><br><span class="line">class ArrayOfPoints &#123;</span><br><span class="line">public:</span><br><span class="line">ArrayOfPoints(const ArrayOfPoints&amp; pointsArray);</span><br><span class="line">//其他成员同例6-18</span><br><span class="line">&#125;;</span><br><span class="line">ArrayOfPoints::ArrayOfPoints(const ArrayOfPoints&amp; v) &#123;</span><br><span class="line">    size = v.size;</span><br><span class="line">    points = new Point[size];</span><br><span class="line">    for (int i = 0; i &lt; size; i++)</span><br><span class="line">    points[i] = v.points[i];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">//同例6-20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-12-2-移动构造"><a href="#6-12-2-移动构造" class="headerlink" title="6.12.2 移动构造"></a>6.12.2 移动构造</h4><ul><li>C++11之前，将源对象的状态转移到目标对象只能通过复制，但有时候我们没有必要复制，只需要移动。</li><li>C++11引入移动定义：源对象资源的控制权全部交给目标对象。</li><li>什么时候触发：有可被利用的临时对象</li><li>移动构造函数：class_name ( class_name &amp;&amp; )<ul><li>&amp;&amp;是右值引用，&amp;是左值引用</li><li>左值和右值都是针对表达式而言的，左值是指表达式结束后依然存在的持久对象，右值指表达式结束时就不再存在的临时对象</li></ul></li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-10-04-082609.png" alt="image-20201004162608854"></p><ul><li>使用深层复制构造函数：返回时构造临时对象，动态分配将临时对象返回到主调函数，然后删除临时对象。</li><li>使用移动构造函数：将要返回的局部对象转移到主调函数，省去了构造和删除临时对象的过程。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IntNum</span>(<span class="type">const</span> IntNum &amp; n) : <span class="built_in">xptr</span>(<span class="keyword">new</span> <span class="built_in">int</span>(*n.xptr))&#123;<span class="comment">//复制构造函数</span></span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;Calling copy constructor...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IntNum</span>(IntNum &amp;&amp; n): <span class="built_in">xptr</span>( n.xptr)&#123; <span class="comment">//移动构造函数</span></span><br><span class="line"> n.xptr = <span class="literal">nullptr</span>;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;Calling move constructor...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-13-字符串"><a href="#6-13-字符串" class="headerlink" title="6.13 字符串"></a>6.13 字符串</h3><h4 id="6-13-1-C风格字符串"><a href="#6-13-1-C风格字符串" class="headerlink" title="6.13.1 C风格字符串"></a>6.13.1 C风格字符串</h4><ul><li>例：”program”</li><li>各字符连续、顺序存放，每个字符占一个字节，以‘\0’结尾，相当于一个隐含创建的字符常量数组</li><li>“program”出现在表达式中，表示这一char数组的首地址</li><li>首地址可以赋给char常量指针：const char *STRING1 &#x3D; “program”;</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-10-04-083950.png" alt="image-20201004163950472"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例题：</span></span><br><span class="line"><span class="comment">//函数F定义如下：</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">7</span>] = &#123; <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用F()时，将会出现：</span></span><br><span class="line"><span class="comment">//输出program以及任意长度的随机字符后换行（而非编译错误）</span></span><br></pre></td></tr></table></figure><p><strong>用字符数组表示字符串的缺点</strong></p><ul><li>执行连接、拷贝、比较等操作，都需要显式调用库函数，很麻烦</li><li>当字符串长度很不确定时，需要用new动态创建字符数组，最后要用delete释放，很繁琐</li><li>字符串实际长度大于为它分配的空间时，会产生数组下标越界的错误</li></ul><h4 id="6-13-2-string类"><a href="#6-13-2-string类" class="headerlink" title="6.13.2 string类"></a>6.13.2 string类</h4><ul><li>string实际上是对字符数组操作的封装</li></ul><p>如何输入整行字符串：</p><ul><li><p>用cin的&gt;&gt;操作符输入字符串，会以空格作为分隔符，空格后的内容会在下一回输入时被读取</p></li><li><p>getline可以输入整行字符串（要包string头文件），例如：getline(cin, s2);</p></li><li><p>输入字符串时使用其它分隔符作为字符串结束的标志（例如逗号、分号）：getline(cin, s2, ‘,’);</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">    string city, state;</span><br><span class="line">    <span class="built_in">getline</span>(cin, city, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="built_in">getline</span>(cin, state);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;City:&quot;</span> &lt;&lt; city &lt;&lt; “ State:<span class="string">&quot; &lt;&lt; state &lt;&lt; endl;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第七章-继承与派生"><a href="#第七章-继承与派生" class="headerlink" title="第七章 继承与派生"></a>第七章 继承与派生</h2><h3 id="7-1-继承的基本概念和语法"><a href="#7-1-继承的基本概念和语法" class="headerlink" title="7.1 继承的基本概念和语法"></a>7.1 继承的基本概念和语法</h3><h4 id="7-1-1-继承与派生概述"><a href="#7-1-1-继承与派生概述" class="headerlink" title="7.1.1 继承与派生概述"></a>7.1.1 继承与派生概述</h4><ul><li>继承与派生是同一过程从不同的角度看<ul><li>保持已有类的特性而构造新类的过程称为继承</li><li>在已有类的基础上新增自己的特性而产生新类的过程称为派生。</li></ul></li><li>被继承的已有类称为基类（或父类）</li><li>派生出的新类称为派生类（或子类）</li><li>直接参与派生出某类的基类称为直接基类</li><li>基类的基类甚至更高层的基类称为间接基类</li></ul><h4 id="7-1-2-继承与派生的目的"><a href="#7-1-2-继承与派生的目的" class="headerlink" title="7.1.2 继承与派生的目的"></a>7.1.2 继承与派生的目的</h4><ul><li>继承的目的：实现设计与代码的重用。</li><li>派生的目的：当新的问题出现，原有程序无法解决（或不能完全解决）时，需要对原有程序进行改造。</li></ul><h4 id="7-1-3-派生类的构成"><a href="#7-1-3-派生类的构成" class="headerlink" title="7.1.3 派生类的构成"></a>7.1.3 派生类的构成</h4><ul><li>吸收基类成员<ul><li>默认情况下派生类包含了全部基类中除构造和析构函数之外的所有成员</li><li>C++11规定可以用using语句继承基类构造函数</li></ul></li><li>改造基类成员<ul><li>隐藏或者覆盖外层同名成员</li></ul></li><li>添加新的成员</li></ul><h4 id="7-1-3-单继承时派生类的定义"><a href="#7-1-3-单继承时派生类的定义" class="headerlink" title="7.1.3 单继承时派生类的定义"></a>7.1.3 单继承时派生类的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Derived</span> ();</span><br><span class="line">  ~<span class="built_in">Derived</span> ();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="7-1-4-多继承时派生类的定义"><a href="#7-1-4-多继承时派生类的定义" class="headerlink" title="7.1.4 多继承时派生类的定义"></a>7.1.4 多继承时派生类的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base1, <span class="keyword">private</span> Base2</span><br><span class="line">&#123;<span class="comment">//注意：每一个“继承方式public/private”，只用于限制对紧随其后之基类的继承。</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Derived</span> ();</span><br><span class="line">  ~<span class="built_in">Derived</span> ();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-2-继承方式"><a href="#7-2-继承方式" class="headerlink" title="7.2 继承方式"></a>7.2 继承方式</h3><h4 id="7-2-1-继承方式简介"><a href="#7-2-1-继承方式简介" class="headerlink" title="7.2.1 继承方式简介"></a>7.2.1 继承方式简介</h4><p>不同继承方式的影响主要体现在：</p><ul><li>派生类<strong>成员</strong>对基类成员的访问权限</li><li>通过派生类<strong>对象</strong>对基类成员的访问权限</li></ul><p>三种继承方式：</p><ul><li>公有继承</li><li>私有继承</li><li>保护继承</li></ul><h4 id="7-2-2-公有继承-public"><a href="#7-2-2-公有继承-public" class="headerlink" title="7.2.2 公有继承 public"></a>7.2.2 公有继承 public</h4><ul><li>继承的访问控制<ul><li>基类的public和protected成员：访问属性在派生类中保持不变</li><li>基类的private成员：不可直接访问。</li></ul></li><li>访问权限<ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员；</li><li>通过派生类的对象：只能访问public成员。</li></ul></li></ul><h4 id="7-2-3-私有继承-private"><a href="#7-2-3-私有继承-private" class="headerlink" title="7.2.3 私有继承 private"></a>7.2.3 私有继承 private</h4><ul><li><p>继承的访问控制</p></li><li><ul><li>基类的<strong>public</strong>和<strong>protected</strong>成员：都以<strong>private</strong>身份出现在派生类中</li><li>基类的private成员：<strong>不可直接访问</strong>。</li></ul></li><li><p>访问权限</p></li><li><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员；</li><li>通过派生类的对象：不能直接访问从基类继承的任何成员。</li></ul></li></ul><h4 id="7-2-4-保护继承-protected"><a href="#7-2-4-保护继承-protected" class="headerlink" title="7.2.4 保护继承 protected"></a>7.2.4 保护继承 protected</h4><ul><li><p>继承的访问控制</p></li><li><ul><li>基类的<strong>public</strong>和<strong>protected</strong>成员：都以<strong>protected</strong>身份出现在派生类中；</li><li>基类的<strong>private</strong>成员：<strong>不可直接访问</strong>。</li></ul></li><li><p>访问权限</p></li><li><ul><li>派生类中的成员函数：可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员；</li><li>通过派生类的对象：不能直接访问从基类继承的任何成员。</li></ul></li><li><p>protected 成员的特点与作用</p></li><li><ul><li>对建立其所在类对象的模块来说，它与 private 成员的性质相同。</li><li>对于其派生类来说，它与 public 成员的性质相同。</li><li>既实现了数据隐藏，又方便继承，实现代码重用。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    a.x = <span class="number">5</span>;<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> B:<span class="built_in">function</span>() &#123;</span><br><span class="line">    x = <span class="number">5</span>;   <span class="comment">//正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果派生类有多个基类，也就是多继承时，可以用不同的方式继承每个基类。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setA</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showA</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setB</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showB</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A, <span class="keyword">private</span> B &#123; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setC</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showC</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">A::setA</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    a=x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">B::setB</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    b=x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">C::setC</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//派生类成员直接访问基类的</span></span><br><span class="line">    <span class="comment">//公有成员</span></span><br><span class="line">    <span class="built_in">setA</span>(x); </span><br><span class="line">    <span class="built_in">setB</span>(y); </span><br><span class="line">    c = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他函数实现略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C obj;</span><br><span class="line">    obj.<span class="built_in">setA</span>(<span class="number">5</span>);</span><br><span class="line">    obj.<span class="built_in">showA</span>();</span><br><span class="line">    obj.<span class="built_in">setC</span>(<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>);</span><br><span class="line">    obj.<span class="built_in">showC</span>();</span><br><span class="line"><span class="comment">// obj.setB(6);  错误因为B是通过私有继承到C类，B类内的私有成员在C类外不能通过对象访问</span></span><br><span class="line"><span class="comment">// obj.showB(); 错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-基类与派生类类型转换"><a href="#7-3-基类与派生类类型转换" class="headerlink" title="7.3 基类与派生类类型转换"></a>7.3 基类与派生类类型转换</h3><ul><li><p>公有派生类对象可以被当作基类的对象使用，反之则不可。</p></li><li><ul><li>派生类的对象可以隐含转换为基类对象；</li><li>派生类的对象可以初始化基类的引用；</li><li>派生类的指针可以隐含转换为基类的指针。</li></ul></li><li><p>通过基类对象名、指针只能使用从基类继承的成员。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; <span class="comment">//基类Base1定义</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::display()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>: <span class="keyword">public</span> Base1 &#123; <span class="comment">//公有派生类Base2定义</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::display()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base2 &#123; <span class="comment">//公有派生类Derived定义</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::display()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Base1 *ptr)</span> </span>&#123;  <span class="comment">//参数为指向基类对象的指针</span></span><br><span class="line">    ptr-&gt;<span class="built_in">display</span>();     <span class="comment">//&quot;对象指针-&gt;成员名&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    <span class="comment">//主函数</span></span><br><span class="line">    Base1 base1;    <span class="comment">//声明Base1类对象</span></span><br><span class="line">    Base2 base2;    <span class="comment">//声明Base2类对象</span></span><br><span class="line">    Derived derived;    <span class="comment">//声明Derived类对象</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fun</span>(&amp;base1);    <span class="comment">//用Base1对象的指针调用fun函数</span></span><br><span class="line">    <span class="built_in">fun</span>(&amp;base2);    <span class="comment">//用Base2对象的指针调用fun函数</span></span><br><span class="line">    <span class="built_in">fun</span>(&amp;derived); <span class="comment">//用Derived对象的指针调用fun函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果</span></span><br><span class="line"><span class="comment">Base1::display()</span></span><br><span class="line"><span class="comment">Base1::display()</span></span><br><span class="line"><span class="comment">Base1::display()</span></span><br><span class="line"><span class="comment">如果要达到我们想要的效果先，需要定义虚函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>建议：不要重新定义继承而来的非虚函数</li></ul><h3 id="7-4-派生类的构造和析构"><a href="#7-4-派生类的构造和析构" class="headerlink" title="7.4 派生类的构造和析构"></a>7.4 派生类的构造和析构</h3><h4 id="7-4-1-派生类的构造函数"><a href="#7-4-1-派生类的构造函数" class="headerlink" title="7.4.1 派生类的构造函数"></a>7.4.1 派生类的构造函数</h4><ul><li><p>默认情况</p></li><li><ul><li>基类的构造函数不被继承;</li><li>派生类需要定义自己的构造函数。</li></ul></li><li><p>C++11规定</p></li><li><ul><li>可用using语句继承基类构造函数，但是只能初始化从基类继承的成员。派生类新增成员可以通过类内初始值进行初始化。</li><li>语法形式：using B::B;</li></ul></li></ul><p><strong>建议</strong></p><ul><li>如果派生类有自己新增的成员，且需要通过构造函数初始化，则派生类要自定义构造函数。</li></ul><p><strong>若不继承基类的构造函数</strong></p><ul><li>派生类新增成员：派生类定义构造函数初始化；</li><li>继承来的成员：自动调用基类构造函数进行初始化；</li><li>派生类的构造函数需要给基类的构造函数传递参数。</li></ul><h5 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h5><ul><li>派生类只有一个直接基类的情况，是单继承。单继承时，派生类的构造函数只需要给一个直接基类构造函数传递参数。</li></ul><p>单继承时构造函数的定义语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">派生类名::派生类名(基类所需的形参，本类成员所需的形参):</span><br><span class="line">基类名(参数表), 本类成员初始化列表</span><br><span class="line">&#123;</span><br><span class="line">//其他初始化；</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>();</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">int</span> i);</span><br><span class="line">    ~<span class="built_in">B</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B::<span class="built_in">B</span>() &#123;</span><br><span class="line">    b=<span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B&#x27;s default constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">B::<span class="built_in">B</span>(<span class="type">int</span> i) &#123;</span><br><span class="line">    b=i;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B&#x27;s constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">B::~<span class="built_in">B</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B&#x27;s destructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">B::print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>();</span><br><span class="line">    <span class="built_in">C</span>(<span class="type">int</span> i, <span class="type">int</span> j);</span><br><span class="line">    ~<span class="built_in">C</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line">C::<span class="built_in">C</span>() &#123;</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;C&#x27;s default constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">C::<span class="built_in">C</span>(<span class="type">int</span> i,<span class="type">int</span> j): <span class="built_in">B</span>(i), <span class="built_in">c</span>(j)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;C&#x27;s constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">C::~<span class="built_in">C</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;C&#x27;s destructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">C::print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    B::<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">C <span class="title">obj</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    obj.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h5><ul><li>多继承时，有多个直接基类，如果不继承基类的构造函数，派生类构造函数需要给所有基类构造函数传递参数。我们来看一下语法规定</li></ul><p>多继承时构造函数的定义语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">派生类名::派生类名(参数表) : </span><br><span class="line">基类名1(基类1初始化参数表), </span><br><span class="line">基类名2(基类2初始化参数表), </span><br><span class="line">...</span><br><span class="line">基类名n(基类n初始化参数表), </span><br><span class="line">本类成员初始化列表</span><br><span class="line">&#123;</span><br><span class="line">        //其他初始化；</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>派生类与基类的构造函数</p><ul><li><p>当基类有默认构造函数时</p></li><li><ul><li>派生类构造函数可以不向基类构造函数传递参数。</li><li>构造派生类的对象时，基类的默认构造函数将被调用。</li></ul></li><li><p>如需执行基类中带参数的构造函数</p></li><li><ul><li>派生类构造函数应为基类构造函数提供参数。</li></ul></li></ul><p>多继承且有对象成员时派生的构造函数定义语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">派生类名::派生类名(形参表):</span><br><span class="line">基类名1(参数), 基类名2(参数), ..., 基类名n(参数), </span><br><span class="line">本类成员（含对象成员）初始化列表</span><br><span class="line">&#123;</span><br><span class="line">        //其他初始化</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>构造函数的执行顺序</p><ol><li><p>调用基类构造函数。</p></li><li><ul><li>顺序按照它们被继承时声明的顺序（从左向右）。</li></ul></li><li><p>对初始化列表中的成员进行初始化。</p></li><li><ul><li>顺序按照它们在类中定义的顺序。</li><li>对象成员初始化时自动调用其所属类的构造函数。由初始化列表提供参数。</li></ul></li><li><p>执行派生类的构造函数体中的内容。</p></li></ol><h4 id="7-4-2-派生类的构造函数举例"><a href="#7-4-2-派生类的构造函数举例" class="headerlink" title="7.4.2 派生类的构造函数举例"></a>7.4.2 派生类的构造函数举例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123;<span class="comment">//基类Base1，构造函数有参数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>(<span class="type">int</span> i) </span><br><span class="line">  &#123; cout &lt;&lt; <span class="string">&quot;Constructing Base1 &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123;<span class="comment">//基类Base2，构造函数有参数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>(<span class="type">int</span> j) </span><br><span class="line">  &#123; cout &lt;&lt; <span class="string">&quot;Constructing Base2 &quot;</span> &lt;&lt; j &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span> &#123;<span class="comment">//基类Base3，构造函数无参数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base3</span>() </span><br><span class="line">  &#123; cout &lt;&lt; <span class="string">&quot;Constructing Base3 *&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base3 &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d): <span class="built_in">Base1</span>(a), <span class="built_in">member2</span>(d), <span class="built_in">member1</span>(c), <span class="built_in">Base2</span>(b)</span><br><span class="line">  <span class="comment">//此处的次序与构造函数的执行次序无关</span></span><br><span class="line">  <span class="comment">//执行的顺序应该按照本类进行多继承时候的基类排列顺序，然后是本类自己的成员函数定义的顺序</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Base1 member1;</span><br><span class="line">    Base2 member2;</span><br><span class="line">    Base3 member3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">obj</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-3-派生类复制构造函数"><a href="#7-4-3-派生类复制构造函数" class="headerlink" title="7.4.3 派生类复制构造函数"></a>7.4.3 派生类复制构造函数</h4><p>派生类未定义复制构造函数的情况</p><ul><li>编译器会在需要时生成一个隐含的复制构造函数；</li><li>先调用基类的复制构造函数；</li><li>再为派生类新增的成员执行复制。</li></ul><p>派生类定义了复制构造函数的情况</p><ul><li>一般都要为基类的复制构造函数传递参数。</li><li>复制构造函数只能接受一个参数，既用来初始化派生类定义的成员，也将被传递给基类的复制构造函数。</li><li>基类的复制构造函数形参类型是基类对象的引用，实参可以是派生类对象的引用</li><li>例如: C::C(const C &amp;c1): B(c1) {…}</li></ul><h4 id="7-4-4-派生类的析构函数"><a href="#7-4-4-派生类的析构函数" class="headerlink" title="7.4.4 派生类的析构函数"></a>7.4.4 派生类的析构函数</h4><ul><li>析构函数不被继承，派生类如果需要，要自行声明析构函数。</li><li>声明方法与无继承关系时类的析构函数相同。</li><li>不需要显式地调用基类的析构函数，系统会自动隐式调用。</li><li>先执行派生类析构函数的函数体，再调用基类的析构函数。</li></ul><h3 id="7-5-派生类成员的标识与访问"><a href="#7-5-派生类成员的标识与访问" class="headerlink" title="7.5 派生类成员的标识与访问"></a>7.5 派生类成员的标识与访问</h3><h4 id="7-5-1-访问从基类继承的成员"><a href="#7-5-1-访问从基类继承的成员" class="headerlink" title="7.5.1 访问从基类继承的成员"></a>7.5.1 访问从基类继承的成员</h4><p><strong>作用域限定</strong></p><p>当派生类与基类中有相同成员时：</p><ul><li>若未特别限定，则通过派生类对象使用的是派生类中的同名成员。</li><li>如要通过派生类对象访问基类中被隐藏的同名成员，应使用基类名和作用域操作符（::）来限定。</li></ul><p><strong>二义性问题</strong></p><ul><li>如果从不同基类继承了同名成员，但是在派生类中没有定义同名成员，“<strong>派生类对象名或引用名.成员名</strong>”、“<strong>派生类指针-&gt;成员名</strong>”访问成员存在二义性问题</li><li>解决方式：1. 用类名限定；2. 同名隐藏</li></ul><p><strong>Derived类对象d的存储结构示意图</strong></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-10-09-100024.png" alt="image-20201009180024326"></p><h4 id="7-5-2-虚基类"><a href="#7-5-2-虚基类" class="headerlink" title="7.5.2 虚基类"></a>7.5.2 虚基类</h4><ul><li><p>需要解决的问题</p></li><li><ul><li>当派生类从多个基类派生，而这些基类又共同基类，则在访问此共同基类中的成员时，将产生冗余，并有可能因冗余带来不一致性</li></ul></li><li><p>虚基类声明</p></li><li><ul><li>以virtual说明基类继承方式</li><li>例：class B1:virtual public B</li></ul></li><li><p>作用</p></li><li><ul><li>主要用来解决多继承时可能发生的对同一基类继承多次而产生的二义性问题</li><li>为最远的派生类提供唯一的基类成员，而不重复产生多次复制</li></ul></li><li><p>注意：</p></li><li><ul><li>在第一级继承时就要将共同基类设计为虚基类。</li></ul></li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-10-09-100229.png" alt="image-20201009180229499"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base0</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> var0;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun0</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Member of Base0&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="type">int</span> var1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="type">int</span> var2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line"><span class="comment">//定义派生类Derived </span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="type">int</span> var;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Member of Derived&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    Derived d;</span><br><span class="line">    d.var0 = <span class="number">2</span>; <span class="comment">//直接访问虚基类的数据成员</span></span><br><span class="line">    d.<span class="built_in">fun0</span>();     <span class="comment">//直接访问虚基类的函数成员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="虚基类及其派生类构造函数"><a href="#虚基类及其派生类构造函数" class="headerlink" title="虚基类及其派生类构造函数"></a>虚基类及其派生类构造函数</h5><ul><li>建立对象时所指定的类称为<strong>最远派生类</strong>。</li><li>虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的。</li><li>在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中为虚基类的构造函数列出参数。如果未列出，则表示调用该虚基类的默认构造函数。</li><li>在建立对象时，只有最远派生类的构造函数调用虚基类的构造函数，其他类对虚基类构造函数的调用被忽略。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base0</span> &#123;   </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base0</span>(<span class="type">int</span> var) : <span class="built_in">var0</span>(var) &#123; &#125;</span><br><span class="line">    <span class="type">int</span> var0;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun0</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Member of Base0&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">Base1</span>(<span class="type">int</span> var) : <span class="built_in">Base0</span>(var) &#123; &#125;</span><br><span class="line">    <span class="type">int</span> var1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Base0 &#123; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>(<span class="type">int</span> var) : <span class="built_in">Base0</span>(var) &#123; &#125;</span><br><span class="line">    <span class="type">int</span> var2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">int</span> var) : <span class="built_in">Base0</span>(var), <span class="built_in">Base1</span>(var), <span class="built_in">Base2</span>(var) </span><br><span class="line">   &#123; &#125;</span><br><span class="line">    <span class="type">int</span> var;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">   </span>&#123; cout &lt;&lt; <span class="string">&quot;Member of Derived&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    <span class="comment">//程序主函数</span></span><br><span class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    d.var0 = <span class="number">2</span>; <span class="comment">//直接访问虚基类的数据成员</span></span><br><span class="line">    d.<span class="built_in">fun0</span>();   <span class="comment">//直接访问虚基类的函数成员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八章-多态性"><a href="#第八章-多态性" class="headerlink" title="第八章 多态性"></a>第八章 多态性</h2><h3 id="8-1-运算符重载"><a href="#8-1-运算符重载" class="headerlink" title="8.1 运算符重载"></a>8.1 运算符重载</h3><h4 id="8-1-1-运算符重载的规则"><a href="#8-1-1-运算符重载的规则" class="headerlink" title="8.1.1 运算符重载的规则"></a>8.1.1 运算符重载的规则</h4><ul><li>C++ 几乎可以重载全部的运算符，而且只能够重载C++中已经有的。</li><li>不能重载的运算符：“.”、“.*”、“::”、“?:”</li><li>重载之后运算符的优先级和结合性都不会改变。</li><li>运算符重载是针对新类型数据的实际需要，对原有运算符进行适当的改造。</li></ul><h4 id="8-1-2-双目运算符重载为成员函数"><a href="#8-1-2-双目运算符重载为成员函数" class="headerlink" title="8.1.2 双目运算符重载为成员函数"></a>8.1.2 双目运算符重载为成员函数</h4><p>重载为类成员的运算符函数定义形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数类型  operator 运算符（形参）</span><br><span class="line">&#123;</span><br><span class="line">       ......</span><br><span class="line">&#125;</span><br><span class="line">参数个数=原操作数个数-1   （后置++、--除外）</span><br></pre></td></tr></table></figure><p><strong>双目运算符重载规则</strong></p><ul><li>如果要重载 B 为类成员函数，使之能够实现表达式 oprd1 B oprd2，其中 oprd1 为A 类对象，则 B 应被重载为 A 类的成员函数，形参类型应该是 oprd2 所属的类型。</li><li>经重载后，表达式 oprd1 B oprd2 相当于 oprd1.operator B(oprd2)</li></ul><p>例 : 复数类加减法运算重载为成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">要求:将+、-运算重载为复数类的成员函数。</span><br><span class="line">规则:实部和虚部分别相加减。</span><br><span class="line">操作数:两个操作数都是复数类的对象。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r = <span class="number">0.0</span>, <span class="type">double</span> i = <span class="number">0.0</span>) : <span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123; &#125;</span><br><span class="line">    <span class="comment">//运算符+重载成员函数</span></span><br><span class="line">  Complex <span class="keyword">operator</span> + (<span class="type">const</span> Complex &amp;c2) <span class="type">const</span>;</span><br><span class="line">    <span class="comment">//运算符-重载成员函数</span></span><br><span class="line">  Complex <span class="keyword">operator</span> - (<span class="type">const</span> Complex &amp;c2) <span class="type">const</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span></span>;   <span class="comment">//输出复数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real;    <span class="comment">//复数实部</span></span><br><span class="line">    <span class="type">double</span> imag;    <span class="comment">//复数虚部</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;c2) <span class="type">const</span>&#123;</span><br><span class="line">  <span class="comment">//创建一个临时无名对象作为返回值 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Complex</span>(real+c2.real, imag+c2.imag); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;c2) <span class="type">const</span>&#123;</span><br><span class="line"> <span class="comment">//创建一个临时无名对象作为返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(real-c2.real, imag-c2.imag); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Complex::display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">5</span>, <span class="number">4</span>)</span>, <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">10</span>)</span>, c3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span>; c1.<span class="built_in">display</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span>; c2.<span class="built_in">display</span>();</span><br><span class="line">    c3 = c1 - c2;   <span class="comment">//使用重载运算符完成复数减法</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = c1 - c2 = &quot;</span>; c3.<span class="built_in">display</span>();</span><br><span class="line">    c3 = c1 + c2;   <span class="comment">//使用重载运算符完成复数加法</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = c1 + c2 = &quot;</span>; c3.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-3-单目运算符重载为成员函数"><a href="#8-1-3-单目运算符重载为成员函数" class="headerlink" title="8.1.3 单目运算符重载为成员函数"></a>8.1.3 单目运算符重载为成员函数</h4><p><strong>前置单目运算符重载规则</strong></p><ul><li>如果要重载 U 为类成员函数，使之能够实现表达式 U oprd，其中 oprd 为A类对象，则 U 应被重载为 A 类的成员函数，无形参。</li><li>经重载后，表达式 U oprd 相当于 oprd.operator U()</li></ul><p><strong>后置单目运算符 ++和–重载规则</strong></p><ul><li>如果要重载 ++或–为类成员函数，使之能够实现表达式 oprd++ 或 oprd– ，其中 oprd 为A类对象，则 ++或– 应被重载为 A 类的成员函数，且具有一个 int 类型形参。</li><li>经重载后，表达式 oprd++ 相当于 oprd.operator ++(0)</li></ul><p><strong>例：重载前置++和后置++为时钟类成员函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">前置单目运算符，重载函数没有形参</span><br><span class="line">后置++运算符，重载函数需要有一个<span class="type">int</span>形参</span><br><span class="line">操作数是时钟类的对象。</span><br><span class="line">实现时间增加<span class="number">1</span>秒钟。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> &#123;<span class="comment">//时钟类定义</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">Clock</span>(<span class="type">int</span> hour = <span class="number">0</span>, <span class="type">int</span> minute = <span class="number">0</span>, <span class="type">int</span> second = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  <span class="comment">//前置单目运算符重载</span></span><br><span class="line">    Clock&amp; <span class="keyword">operator</span> ++ ();</span><br><span class="line">  <span class="comment">//后置单目运算符重载</span></span><br><span class="line">    Clock <span class="keyword">operator</span> ++ (<span class="type">int</span>);    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> hour, minute, second;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Clock::<span class="built_in">Clock</span>(<span class="type">int</span> hour, <span class="type">int</span> minute, <span class="type">int</span> second) &#123;    </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= hour &amp;&amp; hour &lt; <span class="number">24</span> &amp;&amp; <span class="number">0</span> &lt;= minute &amp;&amp; minute &lt; <span class="number">60</span></span><br><span class="line">        &amp;&amp; <span class="number">0</span> &lt;= second &amp;&amp; second &lt; <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;hour = hour;</span><br><span class="line">        <span class="keyword">this</span>-&gt;minute = minute;</span><br><span class="line">        <span class="keyword">this</span>-&gt;second = second;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Time error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::showTime</span><span class="params">()</span> <span class="type">const</span> </span>&#123;  <span class="comment">//显示时间</span></span><br><span class="line">    cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置++：先+1再使用</span></span><br><span class="line"><span class="comment">//运算结果返回的是左值，所以源数据是可以被修改的，可用在之后的后置++定义</span></span><br><span class="line">Clock &amp; Clock::<span class="keyword">operator</span> ++ () &#123; </span><br><span class="line">    second++;</span><br><span class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        second -= <span class="number">60</span>;  minute++;</span><br><span class="line">        <span class="keyword">if</span> (minute &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">          minute -= <span class="number">60</span>; hour = (hour + <span class="number">1</span>) % <span class="number">24</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置++：先使用后++</span></span><br><span class="line"><span class="comment">//运算结果返回的只是一个临时右值，是源数据的复制品</span></span><br><span class="line">Clock Clock::<span class="keyword">operator</span> ++ (<span class="type">int</span>) &#123;</span><br><span class="line">    <span class="comment">//注意形参表中的整型参数</span></span><br><span class="line">    Clock old = *<span class="keyword">this</span>;</span><br><span class="line">    ++(*<span class="keyword">this</span>);  <span class="comment">//调用前置“++”运算符，更能保证一致性</span></span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Clock <span class="title">myClock</span><span class="params">(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;First time output: &quot;</span>;</span><br><span class="line">    myClock.<span class="built_in">showTime</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Show myClock++:    &quot;</span>;</span><br><span class="line">    (myClock++).<span class="built_in">showTime</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Show ++myClock:    &quot;</span>;</span><br><span class="line">    (++myClock).<span class="built_in">showTime</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">  First time output: <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">  Show myClock++:    <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">  Show ++myClock:    <span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="8-1-4-运算符重载为非成员函数"><a href="#8-1-4-运算符重载为非成员函数" class="headerlink" title="8.1.4 运算符重载为非成员函数"></a>8.1.4 运算符重载为非成员函数</h4><ul><li>有些运算符不能重载为成员函数，例如二元运算符的左操作数不是对象，或者是不能由我们重载运算符的对象</li></ul><p>运算符重载为非成员函数的规则</p><ul><li><p>函数的形参代表依自左至右次序排列的各操作数。</p></li><li><p>重载为非成员函数时</p></li><li><p>参数个数&#x3D;原操作数个数（后置++、–除外）</p></li><li><p>至少应该有一个自定义类型的参数。</p></li><li><p>后置单目运算符 ++和–的重载函数，形参列表中要增加一个int，但不必写形参名。</p></li><li><p>如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数声明为该类的友元。</p></li><li><p>双目运算符 B重载后，表达式oprd1 B oprd2 等同于operator B(oprd1,oprd2 )</p></li><li><p>前置单目运算符 B重载后，表达式 B oprd 等同于operator B(oprd )</p></li><li><p>后置单目运算符 ++和–重载后，表达式 oprd B 等同于operator B(oprd,0 )</p></li></ul><p><strong>例：重载Complex的加减法和“&lt;&lt;”运算符为非成员函数</strong></p><ul><li>将+、-（双目）重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常引用。 • 将&lt;&lt;（双目）重载为非成员函数，并将其声明为复数类的友元，它的左操作数是std::ostream引用，右操作数为复数类的常引用，返回std::ostream引用，用以支持下面形式的输出：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; a &lt;&lt; b;</span><br></pre></td></tr></table></figure><p>该输出调用的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">operator &lt;&lt; (operator &lt;&lt; (cout, a), b);</span><br></pre></td></tr></table></figure><p>源代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8_3.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r = <span class="number">0.0</span>, <span class="type">double</span> i = <span class="number">0.0</span>) : <span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123; &#125;  </span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;c1, <span class="type">const</span> Complex &amp;c2);</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;c1, <span class="type">const</span> Complex &amp;c2);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> Complex &amp;c);</span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">    <span class="type">double</span> real;  <span class="comment">//复数实部</span></span><br><span class="line">    <span class="type">double</span> imag;  <span class="comment">//复数虚部</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;c1, <span class="type">const</span> Complex &amp;c2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(c1.real+c2.real, c1.imag+c2.imag); </span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;c1, <span class="type">const</span> Complex &amp;c2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(c1.real-c2.real, c1.imag-c2.imag); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> Complex &amp;c)&#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; c.real &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; c.imag &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">5</span>, <span class="number">4</span>)</span>, <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">10</span>)</span>, c3</span>;    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 = &quot;</span> &lt;&lt; c1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c2 = &quot;</span> &lt;&lt; c2 &lt;&lt; endl;</span><br><span class="line">    c3 = c1 - c2;   <span class="comment">//使用重载运算符完成复数减法</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = c1 - c2 = &quot;</span> &lt;&lt; c3 &lt;&lt; endl;</span><br><span class="line">    c3 = c1 + c2;   <span class="comment">//使用重载运算符完成复数加法</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c3 = c1 + c2 = &quot;</span> &lt;&lt; c3 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-虚函数"><a href="#8-2-虚函数" class="headerlink" title="8.2 虚函数"></a>8.2 虚函数</h3><h4 id="8-2-1-虚函数"><a href="#8-2-1-虚函数" class="headerlink" title="8.2.1 虚函数"></a>8.2.1 虚函数</h4><ul><li>用virtual关键字说明的函数</li><li>虚函数是实现运行时多态性基础</li><li>C++中的虚函数是动态绑定的函数</li><li>虚函数必须是非静态的成员函数，虚函数经过派生之后，就可以实现<strong>运行过程中的多态</strong>。</li><li>一般成员函数可以是虚函数</li><li>构造函数不能是虚函数</li><li>析构函数可以是虚函数</li></ul><p><strong>一般虚函数成员</strong></p><ul><li>虚函数的声明：virtual 函数类型 函数名（形参表）;</li><li>虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候。</li><li>在派生类中可以对基类中的成员函数进行覆盖。</li><li>虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理是静态的。</li></ul><p><strong>virtual 关键字</strong></p><ul><li><p>派生类可以不显式地用virtual声明虚函数，这时系统就会用以下规则来判断派生类的一个函数成员是不是虚函数：</p></li><li><ul><li>该函数是否与基类的虚函数有相同的名称、参数个数及对应参数类型；</li><li>该函数是否与基类的虚函数有相同的返回值或者满足类型兼容规则的指针、引用型的返回值；</li></ul></li><li><p>如果从名称、参数及返回值三个方面检查之后，派生类的函数满足上述条件，就会自动确定为虚函数。这时，派生类的虚函数便覆盖了基类的虚函数。</p></li><li><p>派生类中的虚函数还会隐藏基类中同名函数的所有其它重载形式。</p></li><li><p>一般习惯于在派生类的函数中也使用virtual关键字，以增加程序的可读性。</p></li></ul><h4 id="8-2-2-虚析构函数"><a href="#8-2-2-虚析构函数" class="headerlink" title="8.2.2 虚析构函数"></a>8.2.2 虚析构函数</h4><p>为什么需要虚析构函数？</p><ul><li>可能通过基类指针删除派生类对象；</li><li>如果你打算允许其他人通过基类指针调用对象的析构函数（通过delete这样做是正常的），就需要让基类的析构函数成为虚函数，<strong>否则执行delete的结果是不确定的。</strong></li></ul><h4 id="8-2-3-虚表与动态绑定"><a href="#8-2-3-虚表与动态绑定" class="headerlink" title="8.2.3 虚表与动态绑定"></a>8.2.3 虚表与动态绑定</h4><ul><li><p>虚表</p></li><li><ul><li>每个多态类有一个虚表（virtual table）</li><li>虚表中有当前类的各个虚函数的入口地址</li><li>每个对象有一个指向当前类的虚表的指针（虚指针vptr）</li></ul></li><li><p>动态绑定的实现</p></li><li><ul><li>构造函数中为对象的虚指针赋值</li><li>通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址</li><li>通过该入口地址调用虚函数</li></ul></li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/photo/2020-10-09-103629.png" alt="image-20201009183628918"></p><h3 id="8-3-抽象类"><a href="#8-3-抽象类" class="headerlink" title="8.3 抽象类"></a>8.3 抽象类</h3><p>纯虚函数</p><ul><li><p>纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式为：</p><p>virtual 函数类型 函数名(参数表) &#x3D; 0;</p></li><li><p>带有纯虚函数的类称为抽象类</p></li></ul><p>抽象类</p><ul><li><p>带有纯虚函数的类称为抽象类:</p><p>class 类名 { virtual 类型 函数名(参数表)&#x3D;0; &#x2F;&#x2F;其他成员…… }</p></li></ul><p>抽象类作用</p><ul><li>抽象类为抽象和设计的目的而声明</li><li>将有关的数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为。</li><li>对于暂时无法实现的函数，可以声明为纯虚函数，留给派生类去实现。</li></ul><p>注意</p><ul><li>抽象类只能作为基类来使用。</li><li>不能定义抽象类的对象。</li></ul><h3 id="8-4-override与final"><a href="#8-4-override与final" class="headerlink" title="8.4 override与final"></a>8.4 override与final</h3><p>override</p><ul><li>多态行为的基础：基类声明虚函数，继承类声明一个函数覆盖该虚函数</li><li>覆盖要求： 函数签名（signatture）完全一致</li><li>函数签名包括：函数名 参数列表 const</li></ul><p><strong>显式函数覆盖</strong></p><ul><li>C++11 引入显式函数覆盖，在编译期而非运行期捕获此类错误。 - 在虚函数显式重载中运用，编译器会检查基类是否存在一虚拟函数，与派生类中带有声明override的虚拟函数，有相同的函数签名（signature）；若不存在，则会回报错误。</li></ul><p><strong>final</strong></p><ul><li><p>C++11提供的final，用来避免类被继承，或是基类的函数被改写 例： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Base1</span> <span class="keyword">final</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived1</span> : Base1 &#123; &#125;; <span class="comment">// 编译错误：Base1为final，不允许被继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base2</span> &#123; <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">final</span></span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Derived2</span> : Base2 &#123; <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>; <span class="comment">// 编译错误：Base2::f 为final，不允许被覆盖 &#125;;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Spiritual Life</title>
    <link href="/2020/04/05/%E6%88%91%E7%9A%84%E7%B2%BE%E7%A5%9E%E7%94%9F%E6%B4%BB/"/>
    <url>/2020/04/05/%E6%88%91%E7%9A%84%E7%B2%BE%E7%A5%9E%E7%94%9F%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><em><strong>2020年</strong></em></p><p><strong>1月</strong></p><ul><li><p>（书）《思考，快与慢》 丹尼尔·卡尼曼</p></li><li><p>（书）《月亮与六便士》毛姆</p></li></ul><p><strong>2月</strong></p><ul><li><p>（书）《未来简史：从智人到智神》 尤瓦尔·赫拉利</p></li><li><p>（书）《邓小平时代》  傅高义</p></li><li><p>（书）《睡眠革命》尼克·利特尔黑尔斯</p></li></ul><p><strong>3月</strong></p><ul><li><p>（书）《腾讯传1998-2016》吴晓波</p></li><li><p>（书）《Python神经网络编程》塔里克·拉希德</p></li><li><p>（书）《人生的智慧》叔本华</p></li></ul><p><strong>4月</strong></p><ul><li><p>（剧）《我是余欢水》正午阳光</p></li><li><p>（书）《如果没有明天》余耕</p></li><li><p>（书）《论中国》基辛格</p></li></ul><p><strong>5月</strong></p><ul><li><p>（影）《利刃出鞘》</p></li><li><p>（书）《中国经济2020》王德培</p></li></ul><p><strong>6月</strong></p><ul><li>（影）《暗杀》</li></ul><p><strong>7月</strong></p><ul><li><p>（游）《塞尔达传说：旷野之息》</p></li><li><p>（剧）《隐秘的角落》紫金陈</p></li><li><p>（书）《剑指offer》何海涛</p></li></ul><p><strong>8月</strong></p><ul><li>（书）《原则》瑞·达利欧</li></ul><p><strong>9月</strong></p><ul><li><p>（影）《信条》诺兰</p></li><li><p>（剧）《沉默的真相》紫金陈</p></li><li><p>（漫）《雾山五行》林魂</p></li><li><p>（书）《李光耀观天下》李光耀</p></li></ul><p><strong>10月</strong></p><ul><li>（书）《贫穷的本质》阿比吉特·班纳吉 埃斯特·迪弗洛</li></ul><p><strong>11月</strong></p><ul><li><p>（影）《1917》</p></li><li><p>（剧）《The Undoing》(无所作为)</p></li></ul><p><strong>12月</strong></p><ul><li><p>（影）《绅士们》</p></li><li><p>（影）《电话》</p></li><li><p>（剧）《是，首相》</p></li><li><p>（剧）《弥留之国的爱丽丝》</p></li></ul><p><em><strong>2021年</strong></em></p><p><strong>1月</strong></p><ul><li>（影）《饥饿站台》</li></ul><p><strong>2月</strong></p><ul><li><p>DOING（书）《穷查理宝典》彼得·考夫曼</p></li><li><p>（剧）《山海情》</p></li></ul><p><strong>3月</strong></p><ul><li>DOING（书）《非暴力沟通》马歇尔·卢森堡</li></ul><p><strong>4月</strong></p><ul><li>DOING（书）《跃迁：从技术到管理的硅谷路径》朱赟</li></ul><p><strong>5月</strong></p><ul><li>繁忙的5月……</li></ul><p><strong>6月</strong></p><ul><li><p>（影）《贫民窟的百万富翁》</p></li><li><p>（剧）《爱，死亡，机器人》第二季</p></li><li><p>（剧）《九号秘事》第六季</p></li></ul><p><strong>7月</strong></p><ul><li>（书）《软技能：代码之外的生存之道》</li></ul><p><strong>8月</strong></p><ul><li><p>（剧）《扫黑风暴》</p></li><li><p>（影）《怒火：重案》</p></li><li><p>（书）《毛泽东传》罗斯·特里尔</p></li></ul><p><strong>9月</strong></p><ul><li><p>DOING（书）《禅与摩托车维修艺术》</p></li><li><p>（影）《悬崖之上》</p></li><li><p>（影）《失控玩家》</p></li><li><p>（剧）《鱿鱼游戏》</p></li></ul><p><strong>10月</strong></p><ul><li><p>（影）《长津湖》</p></li><li><p>（影）《沙丘》</p></li><li><p>（影）《八恶人》</p></li><li><p>（影）《被解救的姜戈》</p></li><li><p>DOING（书）《结构性改革》黄奇帆</p></li><li><p>DOING（书）《世界前沿技术发展报告2021》</p></li></ul><p><strong>11月</strong></p><ul><li>繁忙的11月……</li></ul><p><strong>12月</strong></p><ul><li>（书）《中国城市大洗牌》</li></ul><p><em><strong>2022年</strong></em></p><p><strong>1月</strong></p><ul><li>（书）《商业的本质与互联网》 许小年</li></ul><p><strong>2月</strong></p><ul><li><p>（书）《一看就懂的法律常识》</p></li><li><p>DOING（书）《置身事内：中国政府与经济发展》</p></li><li><p>（书）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Reading&amp;Thinking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20200328 尘埃落定</title>
    <link href="/2020/03/28/20200328/"/>
    <url>/2020/03/28/20200328/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>折腾半天交完港中文的巨额留位费，算是主动结束自己的申请季了。虽然下午刚交完钱晚上就戏剧性地收到NUS-ISS的面试通知，不过无论结果如何，该也不会改变自己的选择了。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-27-162507.jpg" alt="61585326304_.pic"></p><p>去年2月份作出留学的决定以来，咨询过很多家中介，最终还是决定自己DIY全流程。因为GPA比较低所以在这一年里做了很多提升软实力的努力，申请台湾交换&#x2F;新国大暑校&#x2F;找技术实习等等，虽然不清楚这些最后都给我的申请带来各种程度的加成，不过这些经历确实给我带来了预期之外的极大收获，让我认识了很多有趣的朋友和前辈，亦是幸运的事情。</p><p>一路上遇到了许多给我极大帮助和激励的人，有素未谋面的学长学姐，也有身边的亲人朋友师长，在我焦虑迷茫的时候为我提供方向，在我迟疑纠结的时候告诉我“冲就完了”，感谢你们。曾经囿于追求所谓“更好的offer”而心神不宁，现在想来学校的Title并无法让自己坐享其成，适时接受并且务实地规划接下来的发展才是更为重要的事情。</p><p>希望一切顺利吧。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Big Data Notes</title>
    <link href="/2020/03/24/mindmap-bigData/"/>
    <url>/2020/03/24/mindmap-bigData/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-24-055730.png" alt="BigData"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Big Data</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20200323 碎碎念</title>
    <link href="/2020/03/23/20200323/"/>
    <url>/2020/03/23/20200323/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>从去年2月份做出了香港留学的决定以来，这一年自己经历了大大小小改变自己想法的事件，尝试跳出舒适区，申请新加坡暑期项目，申请台湾秋季交流，每一个决定其实都牵连着其他种种的考量和取舍。比如台湾交流，这一段时间里我收获了很多难得的、许多人可能都不会有过的对于那天土地的切身感受，同时我也等于放弃了考研、考公的机会，一心专注于为申请留学做准备。当然，我没有丝毫的后悔。即使是现如今仍不容忽视的香港社会问题、国际疫情原因让每一个考虑留学的中国学生都有所担忧，我也不曾为我这一年来所有的准备感到遗憾。如果风险可控，我还是会选择踏上香港这片土地。 </p><p>对于留学院校的选择，其实在这一年当中我经历了很多个阶段。我喜欢华人比较多的环境，便把眼光放在了香港和新加坡上。最开始的时候，是对自己的不自信。受困惑于我自己成绩条件的捉襟见肘，我并不奢望自己能够成功申请上香港前三的学校，当然彼时新加坡两所院校对我来说也是难上加难。看了一些申请成功案例，询问过有相关经验的学长姐之后，我觉得自己的能力能够冲刺港前三了，于是我进入了一个较为自信的阶段。问过了好几家留学中介，得到的选校建议均是建议我把港前三作为冲刺校，港理工和港城作为保底。我深知受限于留学中介的资本属性，他们会建议目标用户采取稳健的申请方式以确保其『录取率』以及利益。我没有听取他们的建议，因为彼时的我并不能很好地接受这两所学校的排名以及生源。之后的台湾和新加坡两地的求学经历更加助长了自己对于冲刺名校的期望，加上DIY申请过程中需要自己撰写华丽的言语来包装自己的经历，可以说这之后我的心态进入到一个膨胀期。2020年年初我接到港中文信息工程系愿意为我推研的信件，虽然对我来说，没有丝毫消息的港大和港科的录取会让我更开心，但CUHK的这一消息已经足够让我感到满足。我认为能力得到证明，便放开手脚申请新加坡的学校。自以为条件足够、加上曾经的新加坡国立的暑期经历能够有大的加分以弥补均分的不足，但是申请时候遇到的一个又一个条件比自己好很多的同学着实让自己心神不宁、坐立不安。伴随着漫长的等待的是一个个申请群中大佬们接连的捷报。我四处搜集着录取信息并将其与自己的条件进行对比，比自己条件好的就默默接受，学校一般但均分很好的录取案例却让自己羡慕，认为自己空有名校招牌可是成绩不够硬。我进入一段焦虑期，对于新加坡录取的过分期待让我难以满足于港中文的这个录取。我觉得自己能有更多。可是却似乎眼高手低，我的自信受到了一定程度的打击。</p><p>很快的，我意识到今年的9月份，在我刚成为硕士的时刻，我也需要面临秋招的难题了，而现阶段准备暑期实习并争取留用看似是不可多得的好选择，于是我把目光放在了暑期实习上。通过对互联网不同技术岗位的进一步了解，我开始意识到，一个光鲜亮丽的学校Title并不能为我带来太多的加成，也不能让我一劳永逸，要追求大厂的技术岗，我更应该做的是提高自己的技术能力，而非妄图用『名校毕业』来获得大厂的橄榄枝。</p><p>我开始反思，为什么我当时费尽心思追求更高更好的学校，可是却没有真正务实地考虑一下自己的职业发展？港中文难道就比新国立差很多吗？并不是的。我无非是觉得，新国立录取条件较高，身边的同学肯定也更加厉害，我喜欢这样的圈子。可是港中文的圈子就会不好么？尽管不可否认的是，去年的香港问题带来的负面影响让部分人放弃了申请香港，但这不意味着香港中文大学今年所录取的学生就是资质不够的。我也曾抱有这样的偏见，以本科学校地档次来给别人划分资质优劣，因此会觉得若我在港中文和普通本科出身的学生坐在同一个课堂，是一件让自己受挫的事情。现在看来，这些想法未免太幼稚。这两天我渐渐想通了，当我有着明晰的职业规划并且制定切实可行的计划去实现它的时候，似乎其他的就显得不那么重要了。我可以放下曾经的偏见和所谓的身段，把眼光放在未来，而非顶着985学校的光环而固步自封。学校title能给自己自信，但大多时候这种自信却只是虚荣罢了。我再一次为港中文的录取感到满足了，因为我清楚香港留学和我近阶段的职业规划（base深圳的互联网大厂）是相辅相成的，我也能坦然接受之后可能遇到的同学，无论他们来自什么样的本科学校，这都没那么重要了。我的许多好朋友，他们并非好学校出身，但是他们务实进取、勤劳善良，我很喜欢他们，也乐意同他们交谈。而我将会遇到的硕士班的同学，他们大体也该是这样的。学校出身能决定的事情不少，而其不能决定的事情却更多。在很长的一段时间里我曾经被唯名校论所捆绑，认为对于自己而言，只有最顶尖的名校才能够让我实现所谓的自身价值。但是我清楚现在及以后的时间里，我会摒除这样的想法，把眼光放长远，务实地规划自己的职业发展，同时也学会接纳和包容。</p><p>2020年3月23日深夜</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>About WeRead</title>
    <link href="/2020/03/18/aboutWeRead/"/>
    <url>/2020/03/18/aboutWeRead/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>本年度至今使用体验最佳、粘性最高的应用软件：微信读书。</p><p>谈点个人的理解：用做游戏or社交软件的思路去做一个读书软件，腾讯的产品能力真的很强大。</p><p>打游戏为什么上瘾？短时间内正向激励频繁。用户粘性怎么来？刷级，装备，成就积累。微信读书有什么？记录用户看书时长，总时长以及每周时长，每周进行好友排行。在大众文化水平逐渐提高的当下，一个读书读得多、书的品质高的人，是不是会让人发自内心有所欣赏？尤其是在高知识水平用户的身上，简直一拿一个准。这其中“阅读时长”就好像是游戏里的等级，打开软件开始阅读就能刷级，也没有什么人民币玩家欺负普通玩家的剧情，对每个阅读者都是公平的，刷级的手段只有一个：阅读。用户粘性怎么积累？看了多少小时，读了多少书，全部都是可见的，这不就是游戏里的“勋章”或者“成就”吗？</p><p>如果你觉得阅读本身是一件无聊的事情，“我不喜欢读书啊，我的朋友们也都不怎么读书，那些排名什么的对我来说没有意义。腾讯哪里发展我这个用户？”。那或许你就不是腾讯的key target。读书时长排名这种手段，就是把手伸向那些对于自身所呈现的社交属性有一定高要求的用户。读书时长多≈喜欢阅读≈有耐心≈靠谱的办事能力。无需耗费口水和社交手段，直接通过静静地阅读，一边增长见识一边把个人魅力值提上去。</p><p>当其他阅读软件还在考虑用户下沉的时候，腾讯已经用丰富的产品经验，把手伸向了对社交属性有较高需求的潜在高级用户所在的市场。</p><p>腾讯把他当一个社交软件在做。你以为他在第一层，其实他在第五层。</p>]]></content>
    
    
    <categories>
      
      <category>Reading&amp;Thinking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>求职后台开发岗位需要做哪些准备？</title>
    <link href="/2020/03/04/career-develop/"/>
    <url>/2020/03/04/career-develop/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-122711.png" alt="image-20200318202711089"></p><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ul><li>C++知识(基础、面向对象、内存模型)</li><li>操作系统基本原理</li><li>TCP&#x2F;IP基础知识</li><li>网络编程(socket编程， I&#x2F;O模型等)</li><li>数据结构（链表、栈、队列、堆、红黑树、哈希表）</li><li>Linux</li><li>设计模式</li></ul><h3 id="个人面试经历"><a href="#个人面试经历" class="headerlink" title="个人面试经历"></a>个人面试经历</h3><h4 id="2020-04-02-腾讯互娱-后台开发岗-一面"><a href="#2020-04-02-腾讯互娱-后台开发岗-一面" class="headerlink" title="2020.04.02 腾讯互娱 后台开发岗 一面"></a>2020.04.02 腾讯互娱 后台开发岗 一面</h4><ol><li>TCP三次握手四次挥手、TCP&#x2F;UDP区别（我举了游戏登录和运行时候的例子来说明TCP&#x2F;UDP分别适用的场景，他问我游戏服务器端如何知道客户端发过来的数据是否是完整的）</li><li>你知道epoll吗（不知道，就没再问）</li><li>C++特点。</li><li>面向对象的特性，什么机制来实现它</li><li>多态的实现机制，迟绑定如何实现，虚函数和纯虚函数的区别，析构函数是否需要是虚函数，为什么？</li><li>类里面的static成员变量和非成员变量有什么区别？还有一个关于memset函数的忘记是问的什么</li><li>Linux里面如何查看进程是否运行；查看磁盘状态？</li><li>Linux进程和线程有什么区别；进程如何进行通信？</li><li>静态库和动态库有什么区别</li><li>如何用C++库函数实现LRU</li><li>Map的insert和[]的区别</li><li>……</li></ol><p>编程题</p><ol><li>输入n，输出1+2+3+4+……+n的值，不用循环（我用的递归）</li><li>一个vector数组，输出里面的元素，如果几个数字连续（如1，2，3），那就输出1-&gt;3，如果不连续就输出单个数字。</li><li>如何对一个一百亿个元素的数组，取出前一万大的数字（Top k 问题）</li></ol><h4 id="2020-04-07-字节跳动-后端C-岗-一面"><a href="#2020-04-07-字节跳动-后端C-岗-一面" class="headerlink" title="2020.04.07 字节跳动 后端C++岗 一面"></a>2020.04.07 字节跳动 后端C++岗 一面</h4><ol><li>自我介绍；</li><li>后端开发相关项目？介绍一下。</li><li>TCP四次挥手；</li><li>进程和线程区别；</li><li>数据库的事务机制（特性，隔离）</li><li>忘了几个，有几个自己也没答出来</li><li>算法手写<ol><li>合并 k 个有序链表（没想出来）</li><li>快速排序</li></ol></li><li>有什么要问他</li></ol><h4 id="2020-04-23-蚂蚁金服国际事业-研发C-岗-电话一面-55分钟"><a href="#2020-04-23-蚂蚁金服国际事业-研发C-岗-电话一面-55分钟" class="headerlink" title="2020.04.23 蚂蚁金服国际事业 研发C++岗 电话一面 55分钟"></a>2020.04.23 蚂蚁金服国际事业 研发C++岗 电话一面 55分钟</h4><ol><li>对方自我介绍、部门介绍</li><li>自我介绍、个人技术情况</li><li>笔试题目回顾（第二题 环路）讲述解法</li><li>写伪代码：给定一个int数组和一个int数字，判断数组中是否存在两个数相加之和等于给定的数字 （用的哈希表）</li><li>简历上项目询问、让我自己找项目自己说</li><li>我有什么想问的</li></ol><ul><li>心得：应该准备好自己项目的闪光点、做的不好的、有待改进的之类的，这样比较有得聊</li></ul><h3 id="刷题方向"><a href="#刷题方向" class="headerlink" title="刷题方向"></a>刷题方向</h3><p>Leetcode算法题top100, 牛客(or AcWing)剑指offer专题</p><h3 id="腾讯-后台-面经汇总"><a href="#腾讯-后台-面经汇总" class="headerlink" title="腾讯 后台 面经汇总"></a>腾讯 后台 面经汇总</h3><p><strong>Case0：(移动客户端开发)</strong></p><p>一面:</p><ol><li><p>判断单链表是否存在环</p><ol><li><p>遍历链表，每到一个结点则比较之前所有。时间O(N^2) 空间O(N)</p></li><li><p>以节点ID为键的HashSet。时间空间均O(N)</p></li><li><p>创建两个指针同时指向头结点，指针1每次移动一步，指针2两步，循环比较两节点指向若相同则有环。时间O(N), 空间O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否有环</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> walker = head;</span><br><span class="line">        <span class="keyword">auto</span> runner = head;</span><br><span class="line">        <span class="keyword">while</span>(runner &amp;&amp; runner-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            walker = walker-&gt;next;</span><br><span class="line">            runner = runner-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(walker == runner)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//找到环入口</span></span><br><span class="line"><span class="comment">//采用两个指针，一个从表头出发，一个从相遇点出发，</span></span><br><span class="line"><span class="comment">//一次都只移动一步，当二者相等时便是环入口的位置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> walker = head;</span><br><span class="line">        <span class="keyword">auto</span> runner = head;</span><br><span class="line">        <span class="keyword">while</span>(runner &amp;&amp; runner-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            walker = walker-&gt;next;</span><br><span class="line">            runner = runner-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(walker == runner)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/* 求环的长度：相遇点之后再一次相遇，快比慢多走一圈</span></span><br><span class="line"><span class="comment">      int len = 0;</span></span><br><span class="line"><span class="comment">      while(runner &amp;&amp; runner-&gt;next)</span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">          ++len;</span></span><br><span class="line"><span class="comment">          walker = walker-&gt;next;</span></span><br><span class="line"><span class="comment">          runner = runner-&gt;next;</span></span><br><span class="line"><span class="comment">          if(walker == runner)</span></span><br><span class="line"><span class="comment">              break;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">return</span> len;</span><br><span class="line">        <span class="keyword">if</span>(!runner || !runner-&gt;next)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">auto</span> headWalker = head;</span><br><span class="line">        <span class="keyword">auto</span> crossWalker = walker;</span><br><span class="line">        <span class="keyword">while</span>(headWalker != crossWalker)</span><br><span class="line">        &#123;</span><br><span class="line">            headWalker = headWalker-&gt;next;</span><br><span class="line">            crossWalker = crossWalker-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headWalker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>二叉搜索树如何删除结点</p><ol><li>删除的结点没有孩子：直接删除</li><li>删除的结点只有左&#x2F;右孩子：待删节点的父亲结点指向待删结点的左&#x2F;右孩子，然后删除该结点（若根节点则根节点指针指向左&#x2F;右孩子）</li><li>删除的结点有左右孩子：找到该结点的右子树中的最左结点，将其值与待删结点的值交换，然后删除这个最左结点（或者左子树中的最右结点，同理）</li></ol></li><li><p>C++成员函数的覆盖，重写，隐藏</p></li><li><p>C++虚函数如何实现</p></li><li><p>析构函数为何需要使用Vitual修饰</p></li><li><p>C语言全局变量在内存中的存放位置</p></li><li><p>C++虚函数表在内存中的存放位置</p></li><li><p>Java多线程如何解决数据共享问题</p></li><li><p>tcp的滑动窗口机制</p></li><li><p>tcp的慢启动机制</p></li><li><p>使用C语言设计一个MemMove函数</p></li><li><p>Android的进程间通信机制</p></li><li><p>Android的broadcast相关，动态注册的receiver是否需要手动取消注册</p></li><li><p>Java LinkedList的原理和工作方式</p></li></ol><p>二面:</p><ol><li>设计一个最小栈，以O(1)的时间复杂度找到栈中元素的最小值</li><li>介绍你的项目，为什么要做，难点在哪，如何解决等等</li><li>如何对数据库的IO进行优化</li><li>存储大量（上亿）的单词，如何在最短时间内找到想要的数据</li><li>HashMap如何实现，数据的存储结构</li><li>操作系统为什么要在外存上使用分页技术</li><li>一个住西藏的大客户，使用App出现了小故障，无法点击某个按钮，如何在最短时间内进行处置</li><li>怎样实现我方工程师在后台可以直接获取客户的Debug日志而无须客户操作</li><li>一道智力题：有七个完全相同的筐，每个筐装有七个从外观上完全无法分辨出差异的橙子。其中有六个筐中的橙子都是每个10两，只有一个筐中的橙子是每个7两。请问，如何使用一台可以显示重量的电子秤只称一次就找出装有7两橙子的筐。</li></ol><p><strong>Case1:</strong><br><a href="https://www.jianshu.com/p/50b51ccbaa31">原Po</a></p><ol><li><p>自我介绍</p></li><li><p>排序的稳定性是什么，什么样的排序是稳定的？</p><ol><li>在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，则称这种排序算法是稳定的</li><li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序</li><li>不稳定的排序算法：选择排序、快速排序、希尔排序、堆排序</li></ol></li><li><p>对C++的学习掌握情况怎样？</p></li><li><p>一个C++程序从编译到运行都经历了哪些阶段？</p><ol><li>C源程序-&gt;编译预处理-&gt;编译-&gt;优化程序-&gt;汇编程序-&gt;链接程序-&gt;可执行文件</li></ol></li><li><p>C++的特点是什么？</p><ol><li>在C基础上增加了很多：类和对象，可重用性、可扩充性、可维护性和可靠性提升，泛型编程，异常机制，管理函数、类、变量名的名称空间……</li></ol></li><li><p>C++多态是怎么实现的？</p><ol><li><strong>函数的多态性</strong>（编译时的多态性，通过重载实现）是指一个函数被定义成多个不同参数的函数，它们一般被存在头文件中，当你调用这个函数，针对不同的参数，就会调用不同的同名函数。<br><strong>类的多态性</strong>（运行时的多态性，通过虚函数实现）用一句话概括就是：在基类的函数前加上virtual关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。</li><li>实现：虚函数，在基类中声明函数时候使用virtul关键字，从而让编译器采用迟绑定</li><li><a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html">菜鸟教程：C++ 多态</a></li></ol></li><li><p>static和const关键字是干什么的？</p><ol><li>static: <ol><li><strong>设置变量的存储域：在函数体内，一个被声明为静态的变量在这一函数被调用过程中维持其值不变（该变量存放在静态变量区）</strong></li><li>限制变量的作用域：在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。</li><li>限制函数的作用域：在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用。</li><li>在类中的static成员变量意味着它为该类的所有实例所共享，也就是说当某个类的实例修改了该静态成员变量，其修改值为该类的其它所有实例所见</li><li><strong>在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量</strong></li></ol></li><li>const:（ const在谁后面谁就不可修改，const在最前面则将其后移一位即可，二者等效）<ol><li>阻止一个变量被改变</li><li>对指针来说，可以指定指针本身为const，也可以指定指针所指的数据为const，或二者同时指定为const</li><li>在一个函数声明中，const可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值</li><li>对于类的成员函数，若指定其为const类型，则表明其是一个常函数，内部不能修改类的成员变量</li><li>类的成员函数，有时其返回值为const类型，以使得其返回值不为左值类型</li></ol></li></ol></li><li><p>举例自己熟悉的设计模式，并且解释观察者模式</p><ol><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">菜鸟教程：设计模式</a></li><li>抽象工厂模式：隶属于设计模式中的创建型模式，用于产品族的构建。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。</li><li>工厂方法模式：常用的类创建型设计模式,此模式的核心精神是封装类中变化的部分，提取其中个性化善变的部分为独立类，通过依赖注入以达到解耦、复用和方便后期维护拓展的目的。它的核心结构有四个角色，分别是抽象工厂；具体工厂；抽象产品；具体产品</li><li>观察者模式：一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。<ol><li>优点：解除了主题和具体观察者的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88/2821124">耦合</a>，让耦合的双方都依赖于抽象，而不是依赖具体。</li><li>缺点：在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂，而且Java中的消息的通知默认是顺序执行的，一个观察者的卡顿会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。</li><li>实现观察者模式有很多形式，比较直观的一种是使用一种“注册—通知—撤销注册”的形式。</li></ol></li><li>……</li></ol></li><li><p>设计模式在平时应用的情况</p><p>1. </p></li><li><p>tcp udp位于什么层，有什么区别？</p><ol><li>传输层</li><li>区别<ol><li>tcp是面向连接的（3次握手），udp是面向无连接的</li><li>tcp连接过程耗时，udp不耗时</li><li>tcp传输速率较慢，实时性差(连接时间、首部信息多)，udp传输速率较快</li><li>tcp连接过程中出现的延时增加了被攻击的可能，安全性不高，而udp不需要连接，安全性较高</li><li>tcp是可靠的，保证数据传输的正确性，不易丢包，udp是不可靠的，易丢包<ol><li>tcp可靠的四大手段: 顺序编号;确认机制;超时重传;校验信息</li><li>UDP使用尽最大努力交付，即不保证可靠交付， 因此主机不需要维持复杂的链接状态表（这里面有许多参数）</li></ol></li><li>tcp是流模式，udp是数据包模式：tcp只要不超过缓冲区的大小就可以连续发送数据到缓冲区上，接收端只要缓冲区上有数据就可以读取，可以一次读取多个数据包，而udp一次只能读取一个数据包，数据包之间独立</li></ol></li><li>二者的使用场合<ol><li>想象开发游戏时候，游戏的登录（TCP）、游戏的操作（UDP）</li><li>对数据可靠性的要求。tcp适用于可靠性高的场合，udp适用于可靠性低的场合</li><li>应用的实时性。tcp延时较大，udp延时较小</li><li>网络的可靠性。网络不好的情况下使用tcp，网络条件好的情况下，使用udp</li><li>使用TCP：HTTP(S)、FTP</li><li>使用UDP：DNS、IP电话</li></ol></li></ol></li><li><p>linux命令的举例</p><p>​<a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#diff">50个常用的Unix&#x2F;Linux命令</a></p><p>​ls&#x2F;mkdir&#x2F;pwd&#x2F;cd&#x2F;rmdir&#x2F;rm&#x2F;cp&#x2F;mv&#x2F;cat&#x2F;tail&#x2F;less(按页或按窗口打印文件内容)&#x2F;grep(在给定的文件中搜寻指定的字符串)&#x2F;find&#x2F;tar&#x2F;gzip&#x2F;unzip&#x2F;help&#x2F;whatis&#x2F;exit&#x2F;ping&#x2F;who&#x2F;su(切换不同的用户)&#x2F;uname(显示出关于系统的重要信息)&#x2F;df((-h 人类可读方式)查看文件系统中磁盘的使用情况)&#x2F;ps(显示系统的运行进程)&#x2F;top(默认按照CPU的占用情况，显示占用量较大的进程)&#x2F;shutdown&#x2F;<strong>chown(用于改变文件的所有者)</strong>&#x2F;<strong>chmod(改变文件的权限)</strong>&#x2F;vim&#x2F;nano&#x2F;gcc&#x2F;clang&#x2F;time(测算一个命令的执行时间)&#x2F;wget&#x2F;service(运行System V init脚本)</p></li><li><p><strong>一个32位机器上linux进程最大可以申请多少空间？</strong></p><p>1. </p></li><li><p>大端法和小端法指的是什么？在纸上写一个程序进行验证</p><p>数值 0x2211 使用两个字节储存：高位字节是 0x22 ，低位字节是 0x11 。</p><ol><li><strong>大端字节序</strong>：高位字节在前，低位字节在后，这是人类读写数值的方法</li><li><strong>小端字节序</strong>：低位字节在前，高位字节在后，即以 0x1122 形式储存</li><li>只有读取的时候，才必须区分字节序，其他情况都不用考虑**</li></ol></li><li><p>对java和mysql的询问</p></li><li><p>平时爱读什么技术书？</p></li><li><p>平时爱不爱玩游戏，对做游戏抵触不抵触？</p></li></ol><p><strong>Case2:(硕士)</strong><br><a href="https://www.nowcoder.com/discuss/160947">原Po</a></p><ol><li>C++对象内存分布<br>1. </li><li>Vector底层实现</li><li>Map底层实现，时间复杂度</li><li>IPC</li><li>深拷贝浅拷贝</li><li>协程的概念</li><li>构造函数和拷贝赋值函数的区别</li><li>树的算法</li><li>快速排序复杂度</li><li>解释Time_wait，time_wait连接过多如何解决</li><li>Select和epoll区别，epoll为什么快，epoll的底层实现</li><li>项目如果改成分布式怎么做，需要考虑哪些问题</li><li>项目改成分布式，如何实现负载均衡，如何解决孤岛问题</li><li>Stat，trace，抓包用什么命令</li><li>nginx</li><li>烧香问题</li><li>两个大文件存url，找相同url</li><li>K-means算法，有哪些聚类算法</li><li>目前找实习的状态，是否想转正</li></ol><p><strong>Case3:(分布式存储方向)</strong><br><a href="https://www.nowcoder.com/discuss/164207?type=2">原Po</a></p><p>一面:</p><ol><li>多线程通信和同步机制：加锁、信号量、条件变量</li><li>多进程与多线程的区别</li><li>共享内存、与malloc的区别</li><li>HTTP和HTTP2的了解</li><li>TCP与UDP的区别</li><li>查找的常用数据结构：二叉树、跳表、hash</li><li>类中一般包括哪些默认生成的函数<ol><li>构造、析构、复制构造、赋值操作符、取地址操作符等</li></ol></li><li>常用的STL数据结构、Vector、Map的底层实现</li><li>Top k问题</li><li>常用的调试方法和工具</li><li>现有开源分布式存储的系统或协议是否了解？</li><li>分布式存储系统相关问题：数据同步、单点故障、副本容灾、读写一致性等</li><li>本科期间参与的竞赛作品</li></ol><p>二面:</p><ol><li>多进程通信、同步方式</li><li>进程的地址空间</li><li>共享内存使用</li><li>操作系统内存管理、虚拟分页内存管理</li><li>TCP四次挥手</li><li>IO多路复用、select和epoll的区别</li><li>epoll的LT和ET</li><li>网络编程服务器端的接口调用顺序</li><li>多态</li><li>构造函数是否可抛异常？</li><li>构造函数中有哪些注意事项？不能为虚函数？</li><li>析构函数为什么要是虚函数？</li><li>STL容器的数据实际存在什么位置？</li><li>查找的常用数据结构？</li><li>hash冲突的几种解决办法</li><li>程序编译过程、静态链接和动态链接等</li><li>闪存介质的写放大问题如何优化？</li><li>5升和6升杯子，如何获得3升水？</li><li>项目中的优缺点？以及如何改进？</li><li>算法题目一道：栈思想，处理字符串</li></ol><p>三面:</p><ol><li>进程与线程的区别</li><li>是否有了解其他开源分布式存储框架和协议？</li><li>项目存在的缺点？如何优化？</li><li>单点故障问题如何解决？</li><li>多数据节点多线程写的一致性保证？</li><li>多机备份</li><li>其他类似关于分布式存储的问题</li><li>未来两到三年的规划</li><li>团队交流合作</li><li>日常如何学习新的知识</li><li>个人性格问题</li></ol><p><strong>Case4:</strong><br><a href="https://blog.csdn.net/feng964497595/article/details/80055047">原Po</a></p><p>一面:</p><ol><li>自我介绍</li><li>问了项目</li><li>网站多用户访问时会出现什么问题？如何优化？</li><li>给了个场景，在记录有用户上线下线的日志文件中查询某个时间点的在线人数。时间复杂度多少，能不能优化？</li><li>一句话说清楚快排，快排如何避免最坏情况？还能不能再优化？</li><li>数据库索引建立</li><li>MyISAM和InnoDB的区别，效率上的差异，锁的差别</li><li>虚函数和纯虚函数的区别</li><li>const和#define的区别</li><li>程序代码修改之后，如何实现热重启？</li><li>堆栈的区别</li><li>const常量存在哪里？#define呢？会不会在栈上？</li><li>有没有什么想问的？</li></ol><p>二面:</p><ol><li>自我介绍</li><li>学过哪些课程？</li><li>操作系统了解吗？进程与线程的差别</li><li>线程除了修改全局变量之外，还能怎么同步？</li><li>共享内存底层是怎么实现的？</li><li>Linux如何查看进程？</li><li>top命令都能看到哪些信息？</li><li>Linux是怎么创新新进程的？fork函数的返回值？</li><li>学过计算机网络吗？五层协议栈，get和post的区别（知道我没上过计网课之后就没问了，当时就觉得凉了）</li><li>cookie的作用</li><li>有哪些常用的排序算法？讲一下快排</li><li>快排会出现什么问题？为什么会栈溢出？</li><li>如果让你实现快排，你会怎么做？</li><li>学过哪些编程语言？</li><li>C++的多态是怎么实现的？有没有想过多态为什么能那样实现？编译时多态，运行时多态</li><li>平时代码写得多吗？</li><li>在什么操作系统上写代码？</li><li>socket编程写过吗？</li><li>平时怎么学习编程的？</li><li>有看过哪些源码？</li></ol><p><strong>Case5:</strong><br><a href="https://blog.csdn.net/qq_40910541/article/details/88735255?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task">原Po</a></p><ol><li>自我介绍</li><li>说项目，项目问的比较深，我说到算法（正态分布），问到正态分布的细节</li><li>HashMap原理</li><li>Hash碰撞的解决方法</li><li>HashMap put操作的最差情况解决方案</li><li>StringBuilder和StringBuffer的区别</li><li>StringBuilder和StringBuffer使用单线程执行，有区别吗？</li><li>CurrentHashMap原理</li><li>synchronized静态方法和实例所属方法的区别</li><li>说说Lock</li><li>说说ReentrantLock是基于哪个类的？说说队列同步器</li><li>说说list下的ArrayList和LinkedList的区别</li><li>讲讲线程，线程池</li><li>说说线程池创建时的参数</li><li>线程池处理task的流程</li><li>讲讲TCP和UDP的区别</li><li>TCP三次握手和四次挥手过程</li><li>四次挥手的状态</li><li>TCP最后一次ACK包没有送到就开始传输数据包，会发生什么？</li><li>HTTP1.0和 HTTP1.1的区别</li><li>HTTP1.0， HTTP1.1和 HTTP2.0的区别</li><li>HTTPS的改变？</li><li>数据库引擎有哪些？说说他们的区别</li><li>索引的底层</li><li>Linux命令你熟悉哪些？</li><li>TOP命令的详解，swap了解吗？真正内存包括缓存和cache吗？</li><li>用过网络编程吧？用过，说说select和epoll的原理和区别</li><li>永久代会变吗？</li><li>GC策略说说</li><li>JVM内存模型</li><li>年老代还有内存，但是程序显示OOM什么原因？</li><li>说说TreeMap的实现原理</li></ol><p>二面:</p><ol><li>自我介绍</li><li>使用过哪些集合框架？说说HashMap，为什么HashMap无序？为什么不安全？</li><li>海量数据存进HashMap性能会变差吗？</li><li>HashMap解决hash碰撞的方案？</li><li>HashMap的reHash过程</li><li>HashMap的rehash过程会发生安全问题吗？</li><li>HashTable安全，说说</li><li>海量数据怎么查找敏感词？</li><li>Redis的rehash过程</li><li>Redis使用哪些数据结构？</li><li>Redis是多线程还是单线程的？</li><li>说说TCP和UDP的区别</li><li>UDP传输数据的最大容量？为什么？</li><li>TCP三次握手和四次挥手</li><li>为什么四次挥手？？</li><li>协议层有哪些？说说五层协议</li><li>ping命令是哪一层？</li><li>HTTP协议的过程</li><li>DNS域名解析原理</li><li>ARP协议原理</li><li>每次DNS域名解析都要请求DNS服务器，是不是很耗时？怎么解决</li><li>Linux的命令你知道哪些？</li><li>top命令你注意哪个指标？</li><li>性能调优看哪些命令？</li><li>说说你遇到最具特色的项目</li><li>LRU算法知道吗？自己设计怎么设计？</li><li>最后一道算法题：7升桶和3升桶，怎么打到2升水？<br>(装3满，倒7，3空7余3；装3满，倒7，3空7余6；装3满，倒7，7满3余2)</li></ol><p><strong>Case6:</strong><br><a href="https://blog.csdn.net/lzhiwei/article/details/88578145?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task">原Po</a></p><ol><li>自我介绍</li><li>你在本科的时候参加过xx的比赛，在那个比赛中，你扮演什么角色？</li><li>你觉得这个比赛项目中最难的一点是哪里。</li><li>你知道WebSocket是怎么建立连接的吗？</li><li>在WebSocket通信的过程中，遇到过什么问题吗？</li><li>你的项目是部署在什么系统下的？</li><li>Linux的进程间的通信有哪些方式？</li><li>Liunx下如何查看共享内存的情况呢？</li><li>Linux下socket模型:epoll，poll，select等。说说原理，以及epoll和select有哪些不同点。</li><li>select的最大连接数是多少？</li><li>在windows系统下多少?</li><li>好的，没关系。linux下如何查看某个端口的占用？</li><li>你知道TCP和UDP的区别吗？</li><li>你在玩王者荣耀的时候，请问在对战过程中，用的是UDP连接还是TCP连接？</li><li><strong>C++的STL库有哪些容器？(map，vector，list，queue，set…)</strong></li><li>分别是如何实现的吗？</li><li>程序的内存模型分为那几个区域？(堆内存和栈内存)</li><li>栈内存和堆内存是用来干嘛的吗？(栈保存函数的局部变量和函数返回信息，堆内存用来保存类和对象)</li><li>通过malloc申请的内存是在哪个区域的？(堆内存)</li><li>申请内存有两种方式清除，free和delete，你知道这两种方式的区别吗？<br>(free是清除malloc申请的内存，而delete是清除new出来的内存)</li><li>用free去清理new出来的内存会产生什么问题吗？</li><li>Java和C++的最主要的区别是什么？<br>(C++支持面向过程，函数可以与类单独存在，而Java的函数必须在类里面。<br>内存管理，C++需要程序员自己去管理内存，而Java是通过垃圾回收自动管理内存。<br>多继承与单继承，接口等)</li><li>static关键字是用来干嘛的吗？</li><li>一个机器上有一个超大的文件，里面有4G个32位int型整数，而机器的内存只有512MB，我需要获得它的中位数，请问应该怎么办？</li></ol><p><strong>Case7:</strong></p><p>一面:</p><ol><li>代码在内存中的分布都有哪些区，宏定义存在刚才你说的哪个区域？堆栈有什么区别啊，堆中的数据会回收吗，malloc和new有什么区别？</li><li>说一下虚函数表是什么（C++后台开发必问），为什么析构函数都是虚函数，不这样会怎么样？</li><li>多态和重载都是什么？</li><li>知不知道现在C++现在发行到那个版本了？C++11有哪些新特性？</li><li>算法题: 100万数据找top k;<br>判断一个数是不是2的幂(不断模2；列出了所有2的幂指数后二分搜索；减一与本身取&amp;;统计二进制中1的个数);<br>两个单链表有公共节点，找出第一个。</li><li>TCP三次握手、四次挥手、超时重传。</li><li>Linux现在发行到哪个版本了？你一般用Centos还是Ubuntu啊，为什么？</li><li>Linux下查看内存使用命令是什么？查看负载的命令是什么？</li><li>SVM怎么分类的，有哪些核函数，如何优化SVM？</li><li>word2vec怎么实现的？</li><li>你有什么想问的？</li></ol><p>二面: </p><ol><li>c++虚函数和纯虚函数有什么区别，分别应用在什么场合？</li><li>子类析构会调用父类的析构函数吗？执行顺序是什么？</li><li>程序的内存分布。</li><li>知不知道桶排序和希尔排序，希尔排序和快速排序区别。</li><li>画出TCP的三次握手，为什么一定要三次，两次会有什么后果？</li><li>SQL语句，查询两个数据库表中ID相同的信息。</li><li>STL用过吗？map和hashmap的区别，查找的时间复杂度分别是多少？</li><li>手写两道算法题：二分查找和一个很简单的二维数组搜索。</li><li>场景题：现在要完成一个微博评论的部分，想在用户进入新闻时优先看到自己好友对此新闻的评论，好友可能有多条评论，怎么设计结构?</li><li>智力题：36匹马6个跑道无秒表选前三，最少跑几轮。</li><li>你有没有什么想问的？</li></ol><p>追加技术面:</p><ol><li>自我介绍</li><li>Linux下如何查看网络中服务器状态？</li><li>Linux下TCP服务器都有什么状态？</li><li>Linux下TIME_WAIT和CLOSE_WAIT区别是什么？</li><li>知道epoll和select吗？</li><li>创建一个TCP服务器的步骤是什么？</li><li>端口是干什么用的？</li><li>知道哪些排序算法，说一下时间复杂度，快速排序什么情况下时间复杂度最高？</li><li>图中的最短路径问题怎么求、迪杰斯特拉算法和弗洛伊德算法的区别有哪些？</li><li>B树和B+树的区别有哪些？</li><li>操作系统中的PV操作是做什么用的，能否举个例子？</li></ol><p><strong>Case8:</strong></p><p>一面:</p><ol><li>项目</li><li>select poll epoll 区别以及各自的应用场景</li><li>shared_ptr 线程安全，引用计数如何实现的，原子操作的原理</li><li>STL 迭代器什么情况下会失效，各个容器都说一下</li><li>虚继承的实现原理，编译器是怎么使用虚继承解决菱形继承的问题的</li><li>memory order内存序，lock-free? wait-free?</li><li>backlog的作用，编程中应该设置为多大</li><li>mysql中innodb和myisam的区别，行锁的实现原理</li><li>redis可以做什么，mysql buffer pool 可以做缓存吗？</li><li>三次握手，四次挥手</li><li>如何处理粘包</li><li>编程：实现 double pow(double a, int n)要求考虑double和int的所有取值范围，若有溢出抛出异常。</li></ol><p>二面:</p><ol><li>解释一下内存池的概念</li><li>动态数组如何实现？给他介绍了一下vector的实现。为什么扩容时是2倍。</li><li>没有连续空间如何实现？给他介绍了一下deque的实现。</li><li>设计一个随机数生成器生成给定概率的a，b，c</li><li>编程：实现 long avg(long *arr, int n)求平均数，要求考虑所有可能的取值范围</li></ol><h3 id="字节-后端-面经汇总"><a href="#字节-后端-面经汇总" class="headerlink" title="字节 后端 面经汇总"></a>字节 后端 面经汇总</h3><p><strong>case1：</strong></p><ul><li>一面</li></ul><p>计算机网络</p><ol><li>三次握手</li><li>握手时产生的序列号做什么用的？<ol><li>在 SYN flag 置 1 时，此为当前连接的初始序列号（Initial Sequence Number, ISN），数据的第一个字节序号为此 ISN + 1</li><li>在 SYN flag 置 0 时，为当前连接报文段的累计数据包字节数。</li></ol></li><li>接收窗口<ol><li>TCP是双工的协议，会话的双方都可以同时接收、发送数据。TCP会话的双方都各自维护一个“发送窗口”和一个“接收窗口”。其中各自的“接收窗口”大小取决于应用、系统、硬件的限制（TCP传输速率不能大于应用的数据处理速率）。各自的“发送窗口”则要求取决于对端通告的“接收窗口”，要求相同。</li></ol></li><li>TCP&#x2F;UDP本质区别、使用场景</li><li>HTTPS连接过程</li><li>7层模型和4层模型，每一层有哪些常见协议？</li><li>路由器&#x2F;交换机是哪一层</li><li>网络层用来干嘛？传输层用来干嘛？</li><li>HTTP可以使用UDP吗</li><li>HTTPS怎么确认收到的包就是服务器发来的：对称密钥加密</li></ol><p>数据库</p><ol><li><p>事务的四大特性</p><ol><li>原子性</li><li>一致性</li><li>隔离性<ol><li>脏读</li><li>不可重复读</li><li>虚读</li></ol></li><li>持久性</li></ol></li><li><p>四种隔离级别</p><ol><li>Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</li><li>Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</li><li>Read committed (读已提交)：可避免脏读的发生。</li><li>Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</li></ol></li><li><p>B+树原理，为什么使用B+而不是二叉平衡树 </p><ol><li>n个节点的平衡二叉树的高度为H(即logn),而n个节点的B&#x2F;B+树的高度为logt((n+1)&#x2F;2)+1</li></ol></li></ol><p>操作系统</p><ol><li><p>用户态如何切换到内核态 </p><ol><li>系统调用</li><li>异常</li><li>外围设备的中断</li></ol></li><li><p>进程和线程的区别</p><ol><li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.</li><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li></ol></li><li><p>进程间通信的方式，哪种最快 </p><ol><li><p>（1） 管道（pipe）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有血缘关系的进程间使用。进程的血缘关系通常指父子进程关系。</p><p>（2）有名管道（named pipe）：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间通信。</p><p>（3）信号量（semophore）：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它通常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p><p>（4）消息队列（message queue）：消息队列是由消息组成的链表，存放在内核中 并由消息队列标识符标识。消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p><p>（5）信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某一事件已经发生。</p><p>（6）共享内存（shared memory）：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问，共享内存是最快的IPC方式，它是针对其他进程间的通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。</p><p>（7）套接字（socket）：套接口也是一种进程间的通信机制，与其他通信机制不同的是它可以用于不同及其间的进程通信。</p></li></ol></li><li><p>信号量怎么实现对共享资源的访问 </p><ol><li><p>1.系统首先要检测该资源的信号量；</p><p>2.若该资源的信号量值大于0，则进程可以使用该资源，此时，进程将该资源的信号量值减1；</p><p>3.若该资源的信号量值为0，则进程进入休眠状态，直到信号量值大于0时进程被唤醒，访问该资源；</p><p>4.当进程不再使用由一个信号量控制的共享资源时，该信号量值增加1，如果此时有进程处于休眠状态等待此信号量，则该进程会被唤醒。</p></li></ol></li></ol><h3 id="阿里-研发C-面经汇总"><a href="#阿里-研发C-面经汇总" class="headerlink" title="阿里 研发C++ 面经汇总"></a>阿里 研发C++ 面经汇总</h3><ol><li><p>简历上的内容</p></li><li><p>虚函数；虚析构函数的使用场景</p><ol><li><a href="https://www.runoob.com/w3cnote/cpp-virtual-functions.html">C++虚函数和纯虚函数的区别</a></li><li>只有当一个类被定义为基类的时候，才会把析构函数写成虚析构函数。</li><li>虚析构函数使得在删除指向子类对象的基类指针时可以调用子类的析构函数达到释放子类中堆内存的目的，而防止内存泄露</li></ol></li><li><p>操作系统：进程线程</p></li><li><p>数据库</p></li><li><p>C++多态</p></li><li><p>C++的指针和引用的区别</p><ol><li>指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用跟原来的变量实质上是同一个东西，只不过是原变量的一个别名而已</li><li>指针可以有多级，但是引用只能是一级</li><li>可以有const指针，但是没有const引用</li><li>指针的值可以为空，但是引用的值不能为NULL，并且引用在定义的时候必须初始化</li><li>指针的值在初始化后可以改变，即指向其它的存储单元，而引用在进行初始化后就不会再改变了</li><li>“sizeof引用”得到的是所指向的变量(对象)的大小，而”sizeof指针”得到的是指针本身的大小</li></ol></li><li><p>define与const的区别</p><ol><li><p>编译器处理方式不同</p><ol><li>#define 宏是在预处理阶段展开</li><li>const 常量是编译运行阶段使用</li></ol></li><li><p>类型和安全检查不同</p><ol><li>#define 宏没有类型，不做任何类型检查，仅仅是展开</li><li>const 常量有具体的类型，在编译阶段会执行类型检查</li></ol></li><li><p>存储方式不同</p><ol><li>#define宏仅仅是展开，有多少地方使用，就展开多少次，不会分配内存。（宏定义不分配内存，变量定义分配内存。）</li><li>const常量会在内存中分配(可以是堆中也可以是栈中)。</li></ol></li><li><p>提高了效率。 编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。</p></li><li><p>宏替换只作替换，不做计算，不做表达式求解</p></li><li><p>const 可以节省空间，避免不必要的内存分配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 3.14159 <span class="comment">//常量宏</span></span></span><br><span class="line"><span class="type">const</span> doulbe Num = <span class="number">3.14159</span>; <span class="comment">//此时并未将Pi放入ROM中 ......</span></span><br><span class="line"><span class="type">double</span> i = Num; <span class="comment">//此时为Pi分配内存，以后不再分配！</span></span><br><span class="line"><span class="type">double</span> I= NUM; <span class="comment">//编译期间进行宏替换，分配内存</span></span><br><span class="line"><span class="type">double</span> j = Num; <span class="comment">//没有内存分配</span></span><br><span class="line"><span class="type">double</span> J = NUM; <span class="comment">//再进行宏替换，又一次分配内存！</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>TCP和UDP</p></li><li><p>乐观锁与悲观锁</p></li><li><p>C++中的流处理</p></li><li><p>死锁是什么，怎么解决死锁</p><ol><li>原因：系统资源不足、资源分配不当、进程推进顺序的不合理</li><li>必要条件<ol><li>互斥条件：一个资源每次只能被一个进程使用。　（资源本身的特点，不可避免）</li><li>请求与保持条件：一个进程因请求资源而等待时，不会释放已分配的资源。</li><li>不剥夺条件：进程已获得的资源，在未使用之前，不能被强行剥夺。</li><li>循环等待条件：若干个进程之间形成头尾相连的循环等待资源的关系</li></ol></li><li>预防死锁<ol><li><strong>资源一次性分配</strong>：破坏请求和保持条件。　当某个资源只在进程结束时使用一小会，那么在进程运行期间，这个资源都被占用，资源利用率很低。比较好的方法是，进程开始时，只申请和使用进程启动的资源，在运行过程中不断申请新的资源，同时释放已经使用完的资源。 </li><li><strong>可剥夺资源</strong>：当进程新申请的资源不满足时，释放已经分配的资源。破坏不可剥夺条件。　在使用某些资源，比如打印机时，当强制剥夺已分配资源的时候，会导致打印机资源打印的信息不连续的问题。 </li><li><strong>资源有序分配</strong>：系统给进程编号，按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol></li><li>避免死锁<ol><li>银行家算法：分配资源前先评估风险，是否可能在分配后导致死锁。即分配给一个进程资源的时候，该进程能否全部返还占用的资源。</li></ol></li><li>检测死锁<ol><li>建立资源分配表和进程等待表</li></ol></li><li>解除死锁<ol><li>从其他进程强制剥夺资源给死锁进程。 </li><li>可以直接撤销死锁进程，或撤销代价最小的进程。</li></ol></li></ol></li><li><p>当一个程序运行比较慢，你怎么解决</p></li><li><p>C++ RAII</p></li></ol><p>算法题</p><ol><li><p><strong>最长不重复子串</strong></p><p>参见 <a href="https://blog.csdn.net/sinat_35261315/article/details/78241863">每天一道LeetCode—–最长无重复子串</a></p></li><li><p><strong>海量数据求 top k</strong></p><p>参见 <a href="https://blog.csdn.net/zyq522376829/article/details/47686867">海量数据处理 - 10亿个数中找出最大的10000个数（top K问题）</a></p></li><li><p>两个数组求交集</p></li><li><p>两份海量数据求交集</p></li></ol><h3 id="深信服-星耀计划-C-x2F-C-网络安全方向-面经汇总"><a href="#深信服-星耀计划-C-x2F-C-网络安全方向-面经汇总" class="headerlink" title="深信服 星耀计划 C&#x2F;C++ 网络安全方向 面经汇总"></a>深信服 星耀计划 C&#x2F;C++ 网络安全方向 面经汇总</h3><ol><li><p>准备一下自己的闪光点之类的吧！把自己的简历上的内容过一遍</p></li><li><p>C语言编译和C++编译的区别</p></li><li><p>内存分布？内存申请+实现</p></li><li><p>结构体，求sizeof(A)—— struct A {  short a;  int b; }; ——主要考察内存对齐</p><ol><li>8</li></ol></li><li><p>内存释放</p></li><li><p>STL内存分配机制(SGI 第一级空间配置器和 SGI 第二级空间配置器)</p></li><li><p>共享内存读写</p></li><li><p>联合体Union是否了解</p></li><li><p><strong>二叉树和红黑树的区别；AVL树；红黑树；红黑树的查找复杂度；为什么查找速度快？有比红黑树更快的吗？时间复杂度？</strong></p></li><li><p><strong>哈希表的应用场景？和红黑树的优劣？</strong></p></li><li><p>三种IO复用的应用场景和区别；IO复用如何管理文件描述符？事件发生，如何找到对应的描述符？</p></li><li><p>二叉查找树+插入元素</p></li><li><p>二叉树的遍历，深度广度具体操作</p></li><li><p>双向链表元素操作</p></li><li><p><strong>堆和栈的区别</strong></p></li><li><p>函数指针了解吗？如何定义和初始化函数指针？函数指针通常用在什么地方？</p></li><li><p>手写atoi，边界问题</p></li><li><p>哈希冲突处理方法</p></li><li><p>常用的排序算法，快排的思想，最好、最坏、平均查找复杂度；冒泡排序和细节；手写快排、冒排</p></li><li><p>标准IO 和 系统IO的区别，哪个效率更高</p></li><li><p>多态和虚函数；虚函数表</p></li><li><p>重载和覆盖的区别</p></li><li><p>拷贝构造函数</p></li><li><p><strong>new 和 malloc 函数区别？如何判断他们的返回值是否成功?如果遇到内存不足以申请的情况怎么办？</strong></p></li><li><p>new函数失败怎么办</p><p>抛出bad_alloc异常，可以通过try catch捕捉。或者通过set_new_handler函数设置函数指针处理失败后的异常。</p><p>再问：可以不抛出异常吗？</p><p>答：可以，new时，添加std::nothrow</p></li><li><p>sizeof()与strlen()的区别</p></li><li><p>strcpy与memcpy的区别</p></li><li><p>手写 memcpy 和 memove，怎么处理重叠区间的</p></li><li><p>动态链接库如何进行内存泄露的检测</p></li><li><p>引用的底层实现</p></li><li><p>平时用到那些容器</p></li><li><p>平时用到那些数据结构</p></li><li><p>vector增长策略？</p></li><li><p>map低层实现？</p></li><li><p>算法题：统计一篇英文文章中出现次数最多的字符</p></li><li><p>堆排序？</p></li><li><p>项目中用到那些网络编程知识？TCP&#x2F;IP、 Socket</p></li><li><p>TCP的三次握手，ack如何计算</p></li><li><p>TCP拥塞控制</p></li><li><p>如果服务器端的SYN、ACK丢失了会怎么样</p></li><li><p>time_wait的作用</p></li><li><p>tls和ssl什么区别？</p></li><li><p>进程之间的通信方式</p></li><li><p>进程和线程之间的区别；内核级线程和用户级线程的区别</p></li><li><p>多进程、多线程</p></li><li><p>main函数执行前会做那些具体工作</p></li><li><p>extern的理解</p></li><li><p>define和const的区别？</p></li><li><p>引用和指针的区别？</p></li><li><p>智能指针</p></li><li><p>输入网址访问服务器的具体过程</p></li><li><p>10万数据中取出最大的100个，时间复杂度要求O(n)</p></li><li><p>1000万个url用什么数据结构存储？如何查找？（字符串匹配）（分文件存储，利用hash函数，hash到多个文件中，再分文件查找）（布隆过滤器？）</p></li><li><p>判断域名是否为一百万个域名的后缀；如果不是后缀，一百万个数找重复次数最多的数</p></li><li><p>爬虫遇到登录注册页面怎么办</p></li><li><p>大端存储、小端存储</p></li><li><p>Linux下调试；Linux指令</p></li><li><p>Linux为什么要有文件这一抽象概念？不同的文件类型如何挂载</p></li><li><p>Linux如何进行信号处理？信号处理函数中调用了malloc会怎么样（异步信号不安全）</p></li><li><p>Qt中有哪些类？</p></li><li><p>Select 、poll和 epoll的详细介绍？select的缺陷、epoll的改进</p><ol><li><p>都是IO多路复用的机制。I&#x2F;O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</p></li><li><p><strong>但select，poll，epoll本质上都是同步I&#x2F;O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</strong>。而异步I&#x2F;O则无需自己负责进行读写，异步I&#x2F;O的实现会负责把数据从内核拷贝到用户空间</p></li><li><p><strong>select的几大缺点：</strong></p><ol><li>每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</li><li>同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</li><li>select支持的文件描述符数量太小了，默认是1024</li></ol></li><li><p>poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构、</p></li><li><p>select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函数，epoll_create,epoll_ctl和epoll_wait。epoll_create是创建一个epoll句柄；epoll_ctl是注册要监听的事件类型；epoll_wait则是等待事件的产生。</p><ol><li>对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。</li><li>对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第7步是类似的）。</li><li>对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max察看,一般来说这个数目和系统内存关系很大。</li></ol></li><li><p>select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。</p></li><li><p>select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内部定义的等待队列）。这也能节省不少的开销。</p></li></ol></li><li><p>epoll中水平触发和边缘触发有什么区别？哪种更好？</p></li><li><p>libevent的基本原理</p></li><li><p>消息队列注意事项</p></li><li><p>动态规划</p></li><li><p>树的三种遍历</p></li><li><p>操作系统：消费者&#x2F;生产者；互斥锁</p></li><li><p>伙伴系统和slab</p></li><li><p>vector的底层实现？和C的数组有什么区别？</p></li><li><p>map的底层实现？</p></li><li><p>set的底层实现？和map的实现有什么区别？</p></li><li><p>C如何调用C++的函数？</p></li><li><p>网络编程会不会？讲讲如何使用Socket进行进程间通信？讲讲listen怎么用？</p></li><li><p><strong>算法题：最小时间复杂度匹配子串，例如chfgjsabcfjdgh匹配abc（KMP）</strong></p></li><li><p><strong>算法题：一篇英文文章，统计出现频率最高的k个单词（高频题，划重点！）</strong></p></li><li><p>算法题：101个数中重复的数，算法叙述</p></li><li><p>算法题：单链表反转算法叙述</p></li><li><p>算法题：删除链表中的一个节点，想想怎么优化？</p></li><li><p>算法题：将一个栈中无序的数据排序。</p></li><li><p>算法题：一个楼层，三个电梯，说说设计程序时候应该考虑的内容</p></li><li><p>手撕：实现数据结构–hash表（包括：<key>类型为 int 和 string；数据结构（用的链地址法，所以vector<list>）；可避免冲突的hash函数；插入、删除、euqal方法）</p></li><li><p>手撕：链表删除节点的代码</p></li><li><p>编程题：给定一个乱序的链表，使其按值递减的顺序排列？</p></li><li><p>编程题：给定两个数组，一个先序遍历数组，一个中序遍历数组，输出后序遍历数组</p></li><li><p>编程题：给定一个字符串str，如果可以在str的任意位置添加字符，请返回在添加字符最少的情况下，让str整体都是回文字符串的一种结果。<a href="https://www.nowcoder.com/practice/a5849b7e3bc940ff8c97b47d3f76199b?tpId=101&tqId=33192&tPage=1&rp=1&ru=/ta/programmer-code-interview-guide&qru=/ta/programmer-code-interview-guide/question-ranking">https://www.nowcoder.com/practice/a5849b7e3bc940ff8c97b47d3f76199b?tpId=101&amp;tqId=33192&amp;tPage=1&amp;rp=1&amp;ru=/ta/programmer-code-interview-guide&amp;qru=/ta/programmer-code-interview-guide/question-ranking</a></p></li><li><p>编程题：判断一棵树是不是平衡树</p></li><li><p>编程题：输入一个依次递增的数组，里面没有重复元素，将其变为区间表示的形式输出。输入输出示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 输入 [1,2,3,5,7,8,9,20,30] // 输出 [1,3],[5,5],[7,9],[20,20],[30,30]</span><br></pre></td></tr></table></figure></li><li><p>编程题：两个队列模拟一个栈</p></li><li><p>编程题：两个栈模拟一个队列</p></li><li><p>读了哪些书，平时一般怎么学习编程，</p></li></ol><h3 id="腾讯暑期实习生技术岗专场空中宣讲"><a href="#腾讯暑期实习生技术岗专场空中宣讲" class="headerlink" title="腾讯暑期实习生技术岗专场空中宣讲"></a>腾讯暑期实习生技术岗专场空中宣讲</h3><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-120714.png" alt="image-20200318200714368"></p><p>公司技术团队——六个事业群</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-120753.png" alt="image-20200318200753593"></p><p>技术人才培养全景图</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-121117.png" alt="image-20200318201117471"></p><p>暑期实习生招聘计划——技术岗</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-121416.png" alt="image-20200318201416223"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-123227.png" alt="image-20200318203226795"></p><p>面试官考察要点</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-123257.png" alt="image-20200318203256781"></p><p>如何准备面试</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-123533.png" alt="image-20200318203533347"></p><p>做很关键，更关键的是怎么做：黄金圈法则 Why How What</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-123912.png" alt="image-20200318203911654"></p><p>求职建议</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-18-123802.png" alt="image-20200318203802664"></p><h3 id="腾讯互娱"><a href="#腾讯互娱" class="headerlink" title="腾讯互娱"></a>腾讯互娱</h3><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-03-19-122447.png" alt="image-20200319202446867"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/zhang0peter/good-articles-by-sort/blob/master/%E9%9D%A2%E7%BB%8F.md">大神总结的比较好的面经</a><br><a href="https://zhang0peter.com/2019/10/25/get-job/">[经验]致2021届：2020届后台开发方向实习，秋招经验总结</a><br><a href="https://www.polarxiong.com/archives/%E6%88%91%E7%9A%842018%E5%B9%B4%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B%E7%BB%8F%E5%8E%86.html">我的2018年计算机实习和秋招经历（微软、阿里、腾讯、网易游戏、今日头条等)</a><br><a href="https://blog.csdn.net/fdssdfdsf/article/details/7983861">腾讯后台开发面试总结,原创,吐血推荐</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI5MzYzMDAwNw==&mid=2247485747&idx=3&sn=ced109bfcfa4003b2067791aa3333756&chksm=ec6e706bdb19f97d44926d1367d91ccd954096cccd153bec4d4421c52285eca761082cc26954&scene=0&subscene=131&clicktime=1551946030&ascene=7&devicetype=android-28&version=2700033b&nettype=cmnet&abtest_cookie=BAABAAoACwASABMABAAjlx4AVpkeAMiZHgDWmR4AAAA=&lang=zh_CN&pass_ticket=tnmL6mfSg1/H4KB0ub5d3A+Os04w/JeKYk9wTRIOdkfa6LaxiwI3gJiHJq9y1q2k&wx_header=1">（修订）斩获腾讯微信后台开发offer大神的近1.5W字的面试干货分享</a><br><a href="https://www.nowcoder.com/discuss/167046">2019春招面经大汇总！（岗位划分）</a><br><a href="https://blog.nowcoder.net/n/aa4b1cd948c84bb2b02afe2470a045e4">Linux C&#x2F;C++ 学习路线-已拿腾讯、百度 offer</a><br><a href="https://zhuanlan.zhihu.com/p/65986844">实习｜2019暑期实习面经（腾讯、快手、阿里云、微软、百度、字节跳动）</a><br><a href="https://www.jianshu.com/p/45bdafd83b28">2018后台开发(C++)暑期实习面试总结</a><br><a href="https://juejin.im/entry/58fee52f44d9040069f760f8">[已拿 offer] 2017 腾讯暑期实习生从笔试到面试总结（附带华为、阿里面试经历）</a><br><a href="https://blog.csdn.net/feng964497595/article/details/79828150?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task">2018腾讯暑假实习生后台开发岗线上笔试编程题题解</a><br><a href="https://www.nowcoder.com/discuss/262595">【盘点】面试中常常看见的智力题 </a></p>]]></content>
    
    
    <categories>
      
      <category>Career</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>求职数据分析岗位需要做哪些准备？</title>
    <link href="/2020/03/01/career-DataAnalysist/"/>
    <url>/2020/03/01/career-DataAnalysist/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h3><ol><li><p>简历</p></li><li><p>刷编程题</p></li><li><p>数据结构，算法</p></li></ol><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li><p>基础数据结构算法：二叉树、链表、动态规划等</p></li><li><p>编程语言：Python, C++(vector，map，set，queue，deque……)</p></li><li><p>数据库基本语句，相关编程题</p></li></ol><h3 id="机器学习主流算法-原理及细节"><a href="#机器学习主流算法-原理及细节" class="headerlink" title="机器学习主流算法 原理及细节"></a>机器学习主流算法 原理及细节</h3><ol><li><p>LR原理及公式推导，牛顿法与各种变种，L1L2范数区别和优缺点</p></li><li><p>GBDT、XGBOOST原理异同，如何并行化（XGBOOST官网查看原论文）</p></li><li><p>随机森林原理和细节</p></li><li><p>如何解决数据不均衡问题</p></li><li><p>SVM原理及细节，SVM和树模型的异同、优缺点和局限性</p></li><li><p>推荐系统，协同过滤原理，基于用户、物品</p></li><li><p>深度学习中一些小问题，比如relu，如何解决梯度消失</p></li></ol><h2 id="求职（软件开发）数据分析岗位需要做哪些准备"><a href="#求职（软件开发）数据分析岗位需要做哪些准备" class="headerlink" title="求职（软件开发）数据分析岗位需要做哪些准备"></a>求职（软件开发）数据分析岗位需要做哪些准备</h2><h3 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h3><ol><li>SQL：熟练语句。建议看看Hive-SQL</li></ol><p>面试例子：1、如何取连续7天登陆的用户？2、Having和where的区别？3、数据倾斜如何处理。</p><p>练习网站：<a href="https://sqlzoo.net/">https://sqlzoo.net</a></p><p><a href="https://zhuanlan.zhihu.com/p/53302593">互联网校招SQL笔试经典50题及答案解析</a></p><ol start="2"><li>统计学理论</li></ol><p>描述性统计：</p><ul><li>集中趋势：均值，中位数，分位数，众数</li><li>离中趋势：标准差，方差</li><li>数据分布：偏态与峰态，正态分布与三大分布</li><li>抽样理论：抽样误差，抽样精度</li></ul><p>面试例子：1、数据库和数据仓库的区别？2、外部表和内部表有什么不同？</p><p>推断性统计：</p><ul><li>中心极限定理、大数定律、置信区间、假设检验、t检验、f检验、卡方检验、ABtest<br>（参考<a href="https://mp.weixin.qq.com/s?__biz=MzU5NDgyMjc0OQ==&mid=2247484789&idx=1&sn=633220ade76cf9fa3cf5192553bb56b0&chksm=fe7a1647c90d9f51058a853e71ffc2ceefd5b061031713baa84700a53b3db391d740ca3753b8&scene=21#wechat_redirect">ABtest|数据分析师面试必知</a>）</li></ul><p>面试例子：1、解释下中心极限定理？2、参数统计和假设检验的区别。3、讲一下P值。</p><ol start="3"><li>机器学习理论</li></ol><ul><li>每个算法的应用背景，优缺点（很重要）</li><li>常见的公式推导：逻辑回归、SVM、决策树、随机森林、Adboost、XGboost等集成学习、神经网络。（DNN、CNN、inception、ResNet、RNN、LSTM等深度学习算法在数据分析很少问，不需要准备那么多）</li></ul><p>面试例子：1、RF和GBDT的区别？2、XGBOOST相比传统集成算法做了哪些改进？3、神经网络中激活函数作用是什么？</p><ol start="4"><li>业务分析<br>可从『人人都是产品经理』社区学习。<br>（Pv、Uv、DAU等指标，海盗模型，RFM模型，某个指标下降&#x2F;上升如何分析、用户行为分析）</li></ol><p>面试例子：1、销售额下降20%如何分析？2、如何评价渠道推广效果？3、用户行为路径分析中，用户走的路径杂乱如何解决？</p><h3 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h3><h4 id="1-在线编程"><a href="#1-在线编程" class="headerlink" title="1 在线编程"></a>1 在线编程</h4><ul><li><p>牛客网、Leetcode</p></li><li><p>《剑指offer》</p></li><li><p>数据结构：二叉树，红黑树，栈，队列，排序算法等</p></li></ul><h4 id="2-选择题"><a href="#2-选择题" class="headerlink" title="2 选择题"></a>2 选择题</h4><ol><li><p>概率统计类：摸球有多少种情况，求某个条件概率等 </p></li><li><p>数据结构类：排序算法的时间复杂度；二叉树的前序、中序、后序遍历；二叉树的叶子节点个数等 </p></li><li><p>算法知识类：防止过拟合的方法、判别式模型、生成式模型等</p></li><li><p>SQL类：语句一定要熟悉。建议点亮Hive SQL技能树。ETL开发、sql调优和hadoop相关技术。</p></li></ol><h4 id="3-简答题"><a href="#3-简答题" class="headerlink" title="3 简答题"></a>3 简答题</h4><p>条件概率公式、偏方差、假设检验……</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul><li><p>熟悉常用算法原理：逻辑回归、SVM、朴素贝叶斯、CNN、RNN、Dropout、决策树、梯度消失</p></li><li><p>提前准备好，要问面试官什么问题</p></li></ul><p>Case 1:</p><ol><li>字典是怎么实现的，key怎么查找，key冲突了怎么办</li><li>http的状态码</li><li>mysql主键插入有重复值怎么办</li><li>mysql分组查询所有组的最大值</li><li>mysql的join用法</li><li>4亿qq号找重复数量最多的10个</li><li>判断别人发来的qq号是否在数据库中，提示我用树结构</li><li>给你一个超级大的敏感词词典，判断用户发的语句中是否有敏感词，要考虑语义，用户体验</li><li>一个7升的桶和一个3升的桶，倒出2升的水</li><li>Linux下怎么查寻内存使用情况</li></ol><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p>突出项目亮点，突出个人贡献。如果有项目，可以把握主动权。</p><p>项目中出现的模型原理要有所理解，最好对于算法好坏有自己的理解</p><p>复盘已有项目经历，整理总结优点与不足。不熟悉的项目不要写在简历上。</p><p>可以练习Kaggle开源方案</p><p>可写：Ucar算法经历（回忆细节，抓住亮点）、Kaggle项目经历、IBM Data Science与结业项目、爬虫……</p><h2 id="相关知识汇总"><a href="#相关知识汇总" class="headerlink" title="相关知识汇总"></a>相关知识汇总</h2><p>参考链接：</p><p><a href="https://cloud.tencent.com/developer/article/1087550">干货|2017校招数据分析岗位笔试&#x2F;面试知识点</a></p><p><a href="http://shiloh.me/2019/04/07/%E8%85%BE%E8%AE%AF2019%E7%AC%94%E8%AF%95/">腾讯2019年数据分析暑期实习在线笔试题类型</a></p><p><a href="http://www.scutmath.com/tencent_2018_spring.html">腾讯2018数据分析岗实习笔试题</a></p><p><a href="https://blog.csdn.net/Ego_Bai/article/details/79866112">笔经-腾讯2018暑期实习生-数据分析岗笔试经历</a></p><p><a href="https://blog.csdn.net/u013382288/article/details/80470316">腾讯_数据分析岗_面试题整理</a></p><h2 id="个人学习历程"><a href="#个人学习历程" class="headerlink" title="个人学习历程"></a>个人学习历程</h2>]]></content>
    
    
    <categories>
      
      <category>Career</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>读书笔记-《睡眠革命》</title>
    <link href="/2020/02/19/Notes-%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD/"/>
    <url>/2020/02/19/Notes-%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="昼夜节律：智慧睡眠的7个要点"><a href="#昼夜节律：智慧睡眠的7个要点" class="headerlink" title="昼夜节律：智慧睡眠的7个要点"></a>昼夜节律：智慧睡眠的7个要点</h2><ol><li><p>走到户外，让日光调整生物钟</p></li><li><p>花时间了解昼夜节律以及它如何影响你的生活</p></li><li><p>了解自身各项高峰低谷数值，监控自然而然的变化</p></li><li><p>睡眠质量最高的时间在凌晨2-3点</p></li><li><p>早上放慢速度，不要陷入一团乱</p></li><li><p>晚上多用红光&#x2F;黄光，少蓝光</p></li><li><p>想象身处岛屿的作息，做出简单的改变</p></li></ol><h2 id="睡眠类型：智慧睡眠的7个要点"><a href="#睡眠类型：智慧睡眠的7个要点" class="headerlink" title="睡眠类型：智慧睡眠的7个要点"></a>睡眠类型：智慧睡眠的7个要点</h2><ol><li><p>了解自己(和亲友)的睡眠类型</p></li><li><p>规划一天的日程，在状态最佳时做最重要的工作</p></li><li><p>把咖啡因作为高效的表现增强剂，而非习惯</p></li><li><p>周末不要睡懒觉，以克服社交时差</p></li><li><p>办公场所配备日光灯以提高敏感度和工作效率，改善工作情绪</p></li><li><p>知道何时该做什么</p></li><li><p>和伴侣彼此协调和适应</p></li></ol><h2 id="睡眠周期：智慧睡眠的7个要点"><a href="#睡眠周期：智慧睡眠的7个要点" class="headerlink" title="睡眠周期：智慧睡眠的7个要点"></a>睡眠周期：智慧睡眠的7个要点</h2><ol><li><p>设置固定的起床时间</p></li><li><p>用90分钟的睡眠周期衡量睡眠，而非小时数</p></li><li><p>入睡时间取决于起床时间，自行推算</p></li><li><p>考虑一周的睡眠周期，而非一天</p></li><li><p>避免连续三晚睡眠不足</p></li><li><p>试着了解自己需要多少睡眠周期</p></li><li><p>争取每周4晚能够完成理想睡眠</p></li></ol><h2 id="睡眠前后的例行程序：智慧睡眠的7个要点"><a href="#睡眠前后的例行程序：智慧睡眠的7个要点" class="headerlink" title="睡眠前后的例行程序：智慧睡眠的7个要点"></a>睡眠前后的例行程序：智慧睡眠的7个要点</h2><ol><li><p>这很重要，影响睡眠的质量和清醒的一天</p></li><li><p>日间偶尔脱离电子设备，以此为犒劳</p></li><li><p>睡眠后例行程序很重要，不要放弃</p></li><li><p>不要在头脑不清醒的时候发消息，比如一大早</p></li><li><p>温水浴，凉爽的睡眠环境，无论冬夏</p></li><li><p>就寝之前放空大脑，下载自己这一天</p></li><li><p>睡眠前例行程序，用于结束一天：鼻子呼吸、放松心情、光线过渡；睡眠后例行程序，用于开启一天</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Reading&amp;Thinking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>摘一些诗</title>
    <link href="/2020/02/13/poems/"/>
    <url>/2020/02/13/poems/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="《一切》北岛"><a href="#《一切》北岛" class="headerlink" title="《一切》北岛"></a>《一切》北岛</h2><p>一切都是命运<br>一切都是烟云<br>一切都是没有结局的开始<br>一切都是稍纵即逝的追寻<br>一切欢乐都没有微笑<br>一切苦难都没有泪痕<br>一切语言都是重复<br>一切交往都是初逢<br>一切爱情都在心里<br>一切往事都在梦中<br>一切希望都带着注释<br>一切信仰都带着呻吟<br>一切爆发都有片刻的宁静<br>一切死亡都有冗长的回声</p><h2 id="《复活》王海洋（野外合作社）"><a href="#《复活》王海洋（野外合作社）" class="headerlink" title="《复活》王海洋（野外合作社）"></a>《复活》王海洋（野外合作社）</h2><p>我告诉自己 再熬一熬<br>枯坐比久睡要好<br>所有热切的脸都冷淡下来<br>他们开始为你绘制一张革命之路<br>此刻我感到浑身散发着光芒<br>我要去做一件疯狂的事情<br>这是2018年新年的早上<br>雪还在融化<br>从房顶上窸窸窣窣的掉下来<br>我告诉自己<br>不能被困在这片绝望的城市里<br>我要把卡里的钱全部取出来<br>抑制住因兴奋而带来的紧张<br>我知道热烈的火焰<br>来的凶猛 却难以维持<br>我告诉自己<br>只有死神才可以重生<br>你是一个解放者<br>你要有一颗勇敢的心<br>你要跨上战马 挂上榴弹<br>重新夺回儿时的沙丘</p><p>放心吧 爸爸<br>过不了多久<br>我就会把你的钱还上<br>连同你为我感到的羞耻 一起还上<br>放心吧 爸爸<br>我早就原谅了你<br>我只是为那迟迟没有到来的和平<br>感到惋惜<br>千万不要让他们看出你的心事<br>千万不要让他们知道你的意图<br>他们会为你戴上自由、理想的帽子<br>让你变成一个美好的人<br>他们会让一切反叛与斗争都有了光环<br>变成为自己开脱的故事<br>他们会说:法西斯终将会被消灭<br>他们会说:自由终将属于人民<br>然后他们会摘除自己的罪恶<br>掩埋好朋友的尸体<br>擦干身上的血迹<br>重新上路</p><p>自由的意志已经被弯曲成一座紫峰<br>形色的人们住进各自的堡垒<br>他们相互观望 相互敌视<br>意识当成武器 分歧变成仇恨<br>他们从来就没有想明白<br>到底要为何而战<br>是为了保持空中的那座楼阁<br>给人间提供更多的评价标准<br>还是为了守住精致的孤塔<br>抵抗不受风雨的打击<br>我想 他们想成为精英<br>他们早就想成为精英</p><p>放心吧 爸爸<br>我早就把他们看透了<br>如果一年都是闲暇的假期<br>那努力也就没有了意义 你说对吧<br>放心吧 爸爸<br>我要允许每个人都是上帝<br>要知道 欲望都是自上而下的<br>而我的胃要消化得起所有人的信念</p><p>再见吧 我的朋友<br>艰难的种子已经裂开<br>哀伤的挽留充满了道路<br>我的朋友<br>高兴时我会为你留下一串脚印<br>不高兴时我也不会阻挡你的春光<br>雪 很快就会化掉<br>放浪的云彩也会超过你们的期望<br>此刻的我<br>钟情于堕落 钟情于被遗忘<br>钟情于对上帝也要保持沉默<br>此刻的我<br>钟情于所有人都还在沉睡或是假睡<br>钟情于我是所有人的魔鬼</p><p>我当然不屑于一小块方糖放入咖啡的智慧<br>哪怕是跃入健身房那些轻盈的脚步<br>我也毫不羡慕<br>那是过客眼中的正义<br>过多的逗留只能让我成为帮凶</p><p>旧的城市已经塌进一块体制的肉骨头<br>而我的爪牙是我的时间<br>能吞下所有的苦药片<br>在新的山顶上<br>酒神还在等待着他的祭司<br>而我已在路上</p><p>而我已在路上了<br>我感到奇迹就要发生了<br>尽管我的身子还没有热起来<br>可我已经摸清了酒神的习性</p><h2 id="《回答》北岛"><a href="#《回答》北岛" class="headerlink" title="《回答》北岛"></a>《回答》北岛</h2><p>卑鄙是卑鄙者的通行证，<br>高尚是高尚者的墓志铭，<br>看吧，在那镀金的天空中，<br>飘满了死者弯曲的倒影。</p><p>冰川纪过去了，<br>为什么到处都是冰凌？<br>好望角发现了，<br>为什么死海里千帆相竞？</p><p>我来到这个世界上，<br>只带着纸、绳索和身影，<br>为了在审判之前，<br>宣读那些被判决的声音。</p><p>告诉你吧，世界<br>我–不–相–信！<br>纵使你脚下有一千名挑战者，<br>那就把我算作第一千零一名。</p><p>我不相信天是蓝的，<br>我不相信雷的回声，<br>我不相信梦是假的，<br>我不相信死无报应。</p><p>如果海洋注定要决堤，<br>就让所有的苦水都注入我心中，<br>如果陆地注定要上升，<br>就让人类重新选择生存的峰顶。</p><p>新的转机和闪闪星斗，<br>正在缀满没有遮拦的天空。<br>那是五千年的象形文字，<br>那是未来人们凝视的眼睛。</p><h2 id="《When-you-are-Old》William-Butler-Yeats"><a href="#《When-you-are-Old》William-Butler-Yeats" class="headerlink" title="《When you are Old》William Butler Yeats"></a>《When you are Old》William Butler Yeats</h2><p>When you are old and grey and full of sleep,<br>And nodding by the fire, take down this book,<br>And slowly read, and dream of the soft look<br>Your eyes had once, and of their shadows deep; 　　<br>How many loved your moments of glad grace, 　　<br>And loved your beauty with love false or true, 　　<br>But one man loved the pilgrim Soul in you, 　　<br>And loved the sorrows of your changing face; 　　<br>And bending down beside the glowing bars, 　　<br>Murmur, a little sadly, how Love fled 　　<br>And paced upon the mountains overhead 　　<br>And hid his face amid a crowd of stars.</p><h2 id="《野草》题辞-鲁迅"><a href="#《野草》题辞-鲁迅" class="headerlink" title="《野草》题辞 鲁迅"></a>《野草》题辞 鲁迅</h2><p>当我沉默着的时候，我觉得充实；<br>我将开口，同时感到空虚。<br>过去的生命已经死亡。我对于这死亡有大欢喜，因为我借此知道它曾经存活。<br>死亡的生命已经朽腐。我对于这朽腐有大欢喜，因为我借此知道它还非空虚。<br>生命的泥委弃在地面上，不生乔木，只生野草，这是我的罪过。<br>野草，根本不深，花叶不美，然而吸取露，吸取水，吸取陈死人的血和肉，各各夺取它的生存。<br>当生存时，还是将遭践踏，将遭删刈，直至于死亡而朽腐。<br>但我坦然，欣然。我将大笑，我将歌唱。<br>我自爱我的野草，但我憎恶这以野草作装饰的地面。<br>地火在地下运行，奔突；熔岩一旦喷出，将烧尽一切野草，以及乔木，于是并且无可朽腐。<br>但我坦然，欣然。我将大笑，我将歌唱。<br>天地有如此静穆，我不能大笑而且歌唱。天地即不如此静穆，我或者也将不能。<br>我以这一丛野草，在明与暗，生与死，过去与未来之际，献于友与仇，人与兽，爱者与不爱者之前作证。<br>为我自己，为友与仇，人与兽，爱者与不爱者，我希望这野草的朽腐，火速到来。<br>要不然，我先就未曾生存，这实在比死亡与朽腐更其不幸。<br>去罢，野草，连着我的题辞！</p>]]></content>
    
    
    <categories>
      
      <category>Literature&amp;Art</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Poems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2020/01/28/happybirthdayguan/"/>
    <url>/2020/01/28/happybirthdayguan/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>Happy Birthday, My Love</p><p><strong>让我们从兵兵的视角来简单回顾一下小官大人（和兵兵）的这一年吧</strong></p><ul><li>2019年1月28日，你的上一个生日。我弄完建模比赛飞去上海陪你，那时候时光匆匆，就像和时间赛跑一样，我没有太多犹豫。每接近你一点，我的心就更激动一些。</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-092856.jpg" alt="guan - 34"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-093041.png" alt="image-20200127173040755"></p><ul><li>2019年2月24日，你已经在欧洲待了快一个月了。好想你呀那会儿，你给我发的照片我一张张都存下来。</li></ul><p>我超喜欢这张：</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-093356.png" alt="image-20200127173356403"></p><p>当然之后的这几张我也好爱：（一大波美照）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-094010.jpg" alt="guan - 42"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-100237.jpg" alt="guan - 43"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-094225.jpg" alt="guan - 2"></p><p>完美的侧颜！(⁎⁍̴̛ᴗ⁍̴̛⁎)</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-094306.jpg" alt="guan - 58"></p><p>前一秒还在凹造型吧哈哈。我喜欢你的真(sha)实(diao)</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-095024.png" alt="image-20200127175023555"></p><ul><li><p>那时候咱们真是太南了，我难在有时候得起一大早和你视频（内心毫无怨言！），而你则是难在晚上很想我的时候，我却在地球的另一边睡大觉。</p></li><li><p>2019年6月2日，你给我太大的感动了。想起来2018年的生日，你瞒着我偷偷订了蛋糕，把我从自习室拉出来，和bong一起给我过了生日，那时候真的好感动。2019年，你再次做到了。那天真的好惊喜，我也是完全没有想到。谢谢你，你是世界上最棒的女朋友。</p></li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-095548.png"></p><ul><li>2019年6月21号，你终于终于回来了。我们去吃了海底捞。你回来的那天，天空出现了彩虹🌈哦。</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-100544.jpg" alt="guan - 5"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-100714.jpg" alt="guan - 25"></p><ul><li>哈哈还记得我们之前一直在恋爱记打卡吗。当代无产青年为了钱真的是绞尽脑汁，可是最后还是在对资本的骂声中怒弃这个软件。我去新加坡前几天，为了保持软件上的情侣认证，我们还得拍亲亲照。喏，就是下面这个，羞死了 o(<em>&#x2F;&#x2F;&#x2F;&#x2F;▽&#x2F;&#x2F;&#x2F;&#x2F;</em>)q</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-134123.png" alt="image-20200127214122735"></p><ul><li><p>我在新加坡身患重(gan)病(mao)的时候，某人地Outlook穿搭也还挺开心嘛（QAQ好美啊啊啊啊）（我就是馋你的身子）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-101804.png" alt="image-20200127181911758"></p></li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-102127.png"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-102313.png" alt="image-20200127182313384"></p><ul><li>2019年8月7日，这一天是七夕哦，第一次送你香水（在你的指导之下），爱马仕的蓝色橘彩星光。然后我们下午去吃了心心念念的烤鱼！</li></ul><p>一如既往不给拍的你</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-103013.png" alt="image-20200127183012371"></p><p>（附上我们第一次在厦大里面那家炉鱼吃烤鱼时候的你）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-103048.jpg" alt="guan - 53"></p><p>And当晚发扬了优秀男友品质，全力支持你追星（我好帅）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-121419.png" alt="image-20200127201419303"></p><ul><li>某日，奇怪的对话</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-121616.png" alt="image-20200127201616022"></p><ul><li>2019年8月27日，我去湾湾的前几天，你来宿舍喂多多。好像是你最后一次见多多？以后就得去泉州看多多了。多多不在身边的第N天，和你一起想它。（并图谋养柴犬）</li></ul><video src='https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/KpEb%258UmSN6zw4gEn1kx5g.MOV' type='video/mp4' controls='controls'  width='50%' height='50%'></video><ul><li>2019年10月28日，思念是一湾浅浅的海峡，我在这头，你在那头。虽然相隔千里，我也要在套路你的航道上扬帆起航。</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-123320.png" alt="image-20200127203320389"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-123342.png" alt="image-20200127203341557"></p><ul><li>之后的之后呢，2019年11月21日，我们的两周年纪念。小官大人得到了兵兵授权的猫猫兑换卡！现在兵兵口头以及字面宣布这个卡也能兑换狗狗！</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-124141.jpg" alt="guan - 4"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-124200.jpg" alt="guan - 3"></p><ul><li><p>2019年12月30日，小官大人费劲千辛万苦来到了兵兵的身边，然后开始了他们的毕业旅行1.0~</p></li><li><p>接下来请欣赏单人小品，《喂，2020》</p></li></ul><p><video src='https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/+eBSJ068SvKn1VpDKVptsw.MOV' type='video/mp4' controls='controls'  width='50%' height='50%'> </video></p><ul><li>2019年最后一个小时，在台北101下，我们又一次度过了难忘的跨年夜。101的烟花很美，就像你一样。</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130434.jpg" alt="guan - 32"></p><p><video src='https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/a63B4fg2T9C8r6kOJqMJMA.MOV' type='video/mp4' controls='controls'  width='50%' height='50%'> </video></p><ul><li><p>接下来就是吃吃吃玩玩玩，这一周过的好快好快。</p></li><li><p>台中 - 南投</p></li></ul><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130814.jpg" alt="guan - 64" style="zoom:50%;" /><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130913.jpg" alt="guan - 62"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-144619.jpg" alt="guan - 63"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130519.jpg" alt="guan - 39"></p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130557.jpg" alt="guan - 64" style="zoom:50%;" /><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130613.jpg" alt="guan - 64" style="zoom:50%;" /><p>（天使鸡排必须拥有姓名）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-131037.png"> </p><ul><li>高雄</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130323.jpg" alt="guan - 26"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130351.jpg" alt="guan - 27"></p><ul><li>当然，虽然每一天都是开心的，但是如果选出一天最特别的，那就是在垦丁的那一天啦。载着你到处逛真的好幸福啊~</li></ul><p>小(xiao)黄(guan)鸭(da)帽(ren)真可爱</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-130954.jpg" alt="guan - 6"></p><p>你说这么拍景色好看，我觉得这么拍出来你更好看</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132115.jpg" alt="guan - 8"></p><p>完美侧颜Again！</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132141.jpg" alt="guan - 7"></p><p>我们好配哦</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132451.jpg" alt="guan - 12"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132505.jpg" alt="guan - 13"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132300.jpg" alt="guan - 10"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132348.jpg" alt="guan - 15"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-132412.jpg" alt="guan - 16"></p><p>三流摄影师的一流直觉，我就说很普通的景物拍起来可以很有感觉。你不就拿这张当做朋友圈封面了么</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-27-133033.jpg" alt="guan - 17"></p><p><strong>生活很美好，希望你我精彩继续</strong></p><p><strong>生日快乐，亲爱的~</strong></p><p>你的兵兵</p><p>2020年1月28日</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GRE Notes</title>
    <link href="/2019/12/16/GRE-Notes/"/>
    <url>/2019/12/16/GRE-Notes/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Something-useful"><a href="#Something-useful" class="headerlink" title="Something useful:"></a>Something useful:</h2><h3 id="1-单词"><a href="#1-单词" class="headerlink" title="1. 单词"></a>1. 单词</h3><ul><li>首选：佛脚词；备选：再要你命3000</li><li>一星期飞速看1-2遍，或者用Excel做记录</li><li><strong>背单词的时候关注强词性</strong></li></ul><h4 id="1-1-词根"><a href="#1-1-词根" class="headerlink" title="1.1 词根"></a>1.1 词根</h4><p>具体详见<strong>《GRE核心词汇助记》（再要你命3000）</strong></p><h5 id="『说』"><a href="#『说』" class="headerlink" title="『说』"></a>『说』</h5><ul><li>dic&#x2F;dict 说 - abdicate addict indict interdict valediction vindicate contradict dictate </li><li>log 话 - eulogize monologue prologue grandiloquent loquacious obloquy soliloquy terminology circumlocution dialogue</li><li>rog 问 - abrogate arrogance interrogate prerogative surrogate</li><li>voc&#x2F;vok 呼唤 - advocate equivocate vociferous voice vocation convoke evoke invoke provoke revoke</li><li>n(o)unc 正式地说 - announce denounce renounce enunciate</li><li>verb 词 - verb verbatim verbose reverberate</li><li>or (恭敬地)说 - oral adore inexorable oration peroration </li><li>fa 说 - fame fable fabulous affable ineffable infamous</li><li>son&#x2F;ton&#x2F;phon 声音 - sound consonant dissonance resonant monotonous attune cacophony euphonious </li><li>vow&#x2F;claim 正式地说&#x2F;声称 - vow avowal disavow clamor acclaim proclaim disclaim declaim reclaim</li><li>mand&#x2F;ord 命令 - command order countermand mandatory demanding subordinate insubordinate primordial </li><li>cant 唱 - chant disenchant incantation recant accentuate incentive</li><li>doc(t)&#x2F;dox 教&#x2F;思想 - doctor paradox doctrine doctrinaire indoctrinate heterodox orthodox </li><li>vindictive复仇的 &#x2F;vindicate证明，平反 &#x2F;decry 强烈反对 &#x2F;prophetic 预言的 &#x2F;euphemism委婉的说法 &#x2F;sound牢固的，强壮的，严谨的 &#x2F;atone赎罪弥补 &#x2F;ordeal严峻的考验 &#x2F;decant轻轻倒出 &#x2F;voluble健谈的</li></ul><h5 id="『抓、拿』"><a href="#『抓、拿』" class="headerlink" title="『抓、拿』"></a>『抓、拿』</h5><ul><li>cap&#x2F;capt&#x2F;cept&#x2F;cip&#x2F;cup 抓拿 - captious captivate inception exceptional unexceptionable perceptible perceptive susceptibility disciple emancipate incipient principal preoccupation recuperate </li><li>emp(t)&#x2F;sum(pt) 拿 - exemplary exempt peremptory preempt presumptuous sumptuous </li><li>prehend&#x2F;prehens 抓 - comprehend apprehension apprehensive misapprehension reprehension apprise </li><li>rap(t) 抓 - rapt rapture rapacious ravenous surreptitious</li></ul><h5 id="『拉、伸、持』"><a href="#『拉、伸、持』" class="headerlink" title="『拉、伸、持』"></a>『拉、伸、持』</h5><ul><li>tract 拉 - tractable abstract contract detract distract distraught extract extraction protract retract </li><li>tend&#x2F;tens&#x2F;tent 伸展 - tendentious contend contentious distend intensify pretend pretense unpretentious ostensible ostentatious portentous tenuous attenuate extenuate </li><li>tain&#x2F;tin&#x2F;ten 包含&#x2F;获得 - abstain detain pertain pertinent retainer content malcontent countenance retentive tenable untenable tenacious retinue</li></ul><h5 id="『放』"><a href="#『放』" class="headerlink" title="『放』"></a>『放』</h5><ul><li>pos(t) 放 - apposite apropos compose depose deposit discompose imposing poseur posit superimpose suppose supposition repose impostor postulate posture </li><li>pon 放 - exponent proponent compound component</li><li>thes&#x2F;thet 放 - parenthesis synthesis antithetical epithet hypothetical </li><li>preposterous荒谬的 ponderable值得考虑的 ponderous沉重的 preponderant占优势的更重要的</li></ul><p>『走、跑、跳』</p><ul><li>ced&#x2F;cess 走 - accede accessory accessible intercessor precedent predecessor recessive secede； 停止 - cessation incessant</li><li>gress&#x2F;grad(e) 迈步 - aggressive digress regress transgress retrograde</li><li>amb&#x2F;err 漫步，迷失 - amble ramble perambulate aberrant errant  erratic erroneous </li><li>ven(t) 来 - contravene convene convention convenience adventitious circumvent inventory </li><li>cur 跑 - concur occur excursive incursion precursor cursory cursive discursive </li><li>sul(t) 跳 - insult result desultory exult resilience </li><li>vad&#x2F;vas 走 - invade invasion pervade evasive </li><li>vag - extravagant过度的挥霍的 vague表达不清的</li></ul><h5 id="『坐、站、躺』"><a href="#『坐、站、躺』" class="headerlink" title="『坐、站、躺』"></a>『坐、站、躺』</h5><ul><li>sid&#x2F;sed&#x2F;sess 坐 - assiduous residue subside subsidiary subsidy supersede sedate sedentary sedulous obsess</li><li>stit(ut)&#x2F;stat&#x2F;stas 站立 - constitute institute substitute reconstitute restitution ecstasy stasis apostasy static stature instate understate </li><li>cu(m)b 躺，位于 - incubate incumbent recumbent succumb cumbersome encumber</li></ul><h5 id="『倒、流』"><a href="#『倒、流』" class="headerlink" title="『倒、流』"></a>『倒、流』</h5><ul><li>fus 倒 - diffuse effusive infuse profuse suffuse </li><li>flu 流 - affluent confluence effluvium fluctuate fluent influx superfluous mellifluous flush</li></ul><h5 id="『切分、部分』"><a href="#『切分、部分』" class="headerlink" title="『切分、部分』"></a>『切分、部分』</h5><ul><li>cis&#x2F;tom&#x2F;sect&#x2F;seg 切 - concise incisive dichotomy epitomize dissect segment </li><li>fract 破裂 - fracture infraction fragile frail </li><li>part 部分 - counterpart partial particularize partisan partition jeopardy</li><li>scission切断 rescind废除取消 debris废墟 sunder分裂分离 asunder分离地 curtail缩短 retrench削减开支 trenchant锐利的一到见血的</li></ul><h5 id="『感觉、感情』"><a href="#『感觉、感情』" class="headerlink" title="『感觉、感情』"></a>『感觉、感情』</h5><ul><li>sens, sent 感觉 - commonsensical consensus dissension insensible insensitive sensation nonsense consent dissent insentient sentinel </li><li>path, pass 感情 - antipathy apathy dispassionate impassive compatible </li><li>pass 经过 - compass surpass trespass encompass</li></ul><h5 id="『弯、折、扭』"><a href="#『弯、折、扭』" class="headerlink" title="『弯、折、扭』"></a>『弯、折、扭』</h5><ul><li>pli&#x2F;plic 折叠 - diploma compliant compliment pliable pleat comply supple complicate duplicate duplicity explicate解释说明 explicit表达清晰的 replicate </li><li>tort 扭曲，弯曲 - torture contort distort extort勒索 retor回应 tortuous拐弯抹角的</li><li>crook使弯曲 crouch蹲伏 crumple弄皱&#x2F;垮塌 deflect使偏斜 reflect flexible sinuous蜿蜒的 sinew活力力量</li></ul><h5 id="『转』"><a href="#『转』" class="headerlink" title="『转』"></a>『转』</h5><ul><li>vers 转 - reverse adversary对手 adversity逆境 aversion厌恶之物 conversant熟悉的 diversity versatile多才多艺的 verse使精通熟悉 traverse横穿 </li><li>vert 转 - advert引起..注意&#x2F;提到 convert divert inadvertent偶然发生的&#x2F;疏忽的 incontrovertible subvert颠覆 vertigo眩晕</li><li>converge汇集 diverge分歧&#x2F;散开 convoluted复杂的 revolt使厌恶&#x2F;反叛 shiftless懒惰的 shifty狡诈的</li></ul><h5 id="『看』"><a href="#『看』" class="headerlink" title="『看』"></a>『看』</h5><ul><li>spec(t)&#x2F;spic - aspect auspicious conspicuous circumspect谨慎的 despicable令人鄙视的 despise极不喜欢的 prospect perspicacious有洞察力的 perspicuous清晰明了的 retrospective回顾的 specious似是而非的&#x2F;欺骗性的 speculate揣测&#x2F;投机倒卖 spectator观众目击者 spectrum所观察到的&#x2F;光谱</li><li>vis&#x2F;vid - improvise即兴而作 provisional临时的 provisory有附带条件的&#x2F;临时的 revise visionary不切实际的&#x2F;有远见的 invidious惹人反感的&#x2F;羡慕嫉妒恨的 provident有远见的 providential幸运的 wit unwitting未察觉的 </li><li>insight surveillance监视 panoramic全景的 scruple不安 scrupulous正直的 scrutable可以理解的 scrutinize仔细检查</li></ul><h5 id="『使做、引导』"><a href="#『使做、引导』" class="headerlink" title="『使做、引导』"></a>『使做、引导』</h5><ul><li><p>ag&#x2F;act - agility敏捷 agitate激起&#x2F;煽动 coagulate凝结&#x2F;变稠 cogent令人信服的 demagogue蛊惑民心的政客 pedagogue教育者 agog嫉妒感兴趣的 react reactionary保守的 </p></li><li><p>duc(t) 引导 - conductor导体 conducive有益的 inducement动机&#x2F;劝说 irreducible seduce诱导 counterproductive反效果的 ductile可塑的</p></li><li><p>fac(t)&#x2F;fect&#x2F;feit - factory facilitate促进 faction派系 affectation虚伪做作 disaffected不满的 disinfect消毒 feckless粗心不负责的&#x2F;无价值无成果的 counterfeit仿制的 surfeit过量(饮食) forfeit罚金</p></li><li><p>fic - efficient beneficent deficiency efficacious gasification气化 magnificent壮丽的 nullification officious多管闲事的 proficient熟练的 soporific催眠的 specific </p></li><li><p>compelling迫切的&#x2F;有说服力的 repel(repulse) 抵制&#x2F;使厌恶 dissuade劝阻</p></li></ul><h5 id="『发送、给予』"><a href="#『发送、给予』" class="headerlink" title="『发送、给予』"></a>『发送、给予』</h5><ul><li>mis(s)&#x2F;mit 发送 - manumit解放(奴隶) submissive服从的 surmise揣测 commitment致力&#x2F;投入&#x2F;承诺 committed忠实的 intermittent间歇的 remiss疏忽的 unremitting连续不断的 compromise妥协 </li><li>don&#x2F;dot 给 - donate donor condone宽恕</li></ul><h5 id="『写』"><a href="#『写』" class="headerlink" title="『写』"></a>『写』</h5><ul><li>scribe - circumscribe限制&#x2F;包围 nondescript平凡的 proscribe排斥 prescription规定 scribble乱写 </li><li>sign - consign转交&#x2F;将..置于 designate任命 resign辞职 signal</li></ul><h5 id="『身体部位』"><a href="#『身体部位』" class="headerlink" title="『身体部位』"></a>『身体部位』</h5><ul><li>cap&#x2F;cip &#x3D; head - madcap热爱冒险者&#x2F;大胆的 precipitate匆忙的&#x2F;促使 precipitation仓促&#x2F;降水 precipitous匆忙的&#x2F;陡峭的 precipice悬崖 headlong鲁莽的 levelhead wrongheaded</li><li>ped &#x3D; foot - expedite加快进程 impede阻碍 pedestrian footloose </li><li>man &#x3D; hand - maneuver&#x2F;manipulate巧妙操纵 mannered做作的 manuscript outmaneuver backhanded ham-handed笨手笨脚的 offhand即兴的 </li><li>cord &#x3D; heart - accord chord符合 concord discord cardinal主要的 hearten dishearten halfhearted heartrending stouthearted</li><li>barefaced厚颜无耻的 efface擦去 facetious轻浮的 facile superficial hearken supercilious高傲的(cil-brow眉毛)</li></ul><h5 id="『尖、刺、小』"><a href="#『尖、刺、小』" class="headerlink" title="『尖、刺、小』"></a>『尖、刺、小』</h5><ul><li>ac 尖锐的 - acid acerbic acme顶点 acrid acrimonious exacerbate使加剧 acumen敏锐洞察力 acute</li><li>min - diminish使变小 eminent杰出的 menace威胁 menial卑微的 minatory带来威胁的 mince切碎&#x2F;小步走 preeminent优秀的 </li><li>pin&#x2F;point&#x2F;punct 刺 - compunction焦虑 pinnacle顶峰 pinpoint pointer punctilious pungent辛辣讽刺的 </li><li>sti&#x2F;sti(n)g 刺 - distinctive extinguish终止 instigate煽动 prestige stickler stiff僵硬的 stifle扼杀 stigma污名 stingy小气的 stipple点刻 stipulate规定 stitch剧痛 </li><li>oxymoron矛盾修饰法 paroxysm动荡 peck小口咬 pique刺激 antagonize激怒 paragon模范</li></ul><h5 id="『高低、轻重、长短』"><a href="#『高低、轻重、长短』" class="headerlink" title="『高低、轻重、长短』"></a>『高低、轻重、长短』</h5><ul><li>lev 举起 - alleviate减轻 elevate提升 leaven使轻松活泼 levity轻浮 relevant aloft在空中 aloof孤高的 lofty高的 </li><li>grav 重 - aggravate加重 grieve使心情沉重 </li><li>brev &#x2F; long - brevity abbreviate abridge prolong linger磨蹭</li></ul><h5 id="『松开、拉紧』"><a href="#『松开、拉紧』" class="headerlink" title="『松开、拉紧』"></a>『松开、拉紧』</h5><ul><li>solv&#x2F;solut 解开 - absolute absolve解除责任 dissolute无节制的 dissolve解散&#x2F;溶解&#x2F;撤销 resolute坚定的 solvent溶剂 </li><li>strain&#x2F;string&#x2F;strict - constrain restrain constrict压缩 stricture责难 stringent紧绷的 constringe使紧缩 hamstring使无效</li></ul><h5 id="『同、不同』"><a href="#『同、不同』" class="headerlink" title="『同、不同』"></a>『同、不同』</h5><ul><li>equ - equable温和的 equilibrium平静平衡 equity iniquity </li><li>par - parity disparate迥然不同的</li><li>sim - simile明喻 simulate simpleton</li><li>ali 另外 - alienate疏远&#x2F;转移 inalienable alibi不在场证明&#x2F;借口 </li><li>neg 否定 - abnegate否认&#x2F;放弃 negation negligent疏忽的 renege放弃 renegade叛徒</li><li>altruism利他主义 adulterate掺杂</li></ul><h5 id="『触碰、边界』"><a href="#『触碰、边界』" class="headerlink" title="『触碰、边界』"></a>『触碰、边界』</h5><ul><li>ta(n)g 触摸 - intangible无法感知的  tangent离题的 contagious传染的 intergral完整的 contiguous接触的&#x2F;相邻的</li><li>fin 边界 - affinity倾向 confine限制 finale终场 infinite</li></ul><h5 id="『大自然』"><a href="#『大自然』" class="headerlink" title="『大自然』"></a>『大自然』</h5><ul><li>anim 生命 - animate有活力的 inanimate unanimous一致同意的 </li><li>umber 影子 - umbrella umbrage不悦 shadow overshadow超过 </li><li>und 流 - abundant redundant多余的 inundate淹没</li><li>luc&#x2F;lumin&#x2F;lustr 光 - elucidate阐明 lucid亮的&#x2F;清楚的 pellucid透明的 translucent透明的 illuminate照明 illuminati智者 luminary杰出人物 luminous illustrious杰出的 lackluster lustrous有光泽的 </li><li>anthrop 人类 - misanthropic反人类的 philanthropic博爱的 </li><li>chron 时间 - synchronous同步的 chromatic彩色的 monochromatic单调的 anachronistic时代错误的 chronic习惯性的&#x2F;常发生的 </li><li>effulgent&#x2F;refulgent 辉煌灿烂的</li><li>flamboyant炫目的 conflagration大火</li></ul><h5 id="『正能量』"><a href="#『正能量』" class="headerlink" title="『正能量』"></a>『正能量』</h5><ul><li>am 爱 - amity友好关系 amiable amicable enamored迷恋的 </li><li>bravado假装勇敢 bravura优秀演技&#x2F;的 </li><li>boon恩惠 bonhomie温和</li><li>can - candor坦率 incandescent明亮灿烂的 kindle</li><li>ferv 热 - fervor热情 effervesce冒泡&#x2F;兴奋 fervent充满感情的 fervid perfervid非常热情的 </li><li>lib 自由 - liberty libertine放荡不羁者 liberal前卫的&#x2F;大方的 ad-lib即兴的 </li><li>nov 新 - novel innovative novice新手 renovate</li><li>pi 忠诚 - expiate赎罪 impious不敬神的 pious </li><li>rect 直的 - rectitude正直 resurrect使重生 incorrigible不可救药的</li><li>cred 相信 - credence坚信 credible credit credulous轻信的 discredit</li><li>fid 相信 confident diffident不自信的 fidelity忠诚 perfidy不忠</li></ul><h5 id="『负能量』"><a href="#『负能量』" class="headerlink" title="『负能量』"></a>『负能量』</h5><ul><li>base 底部 - abase降低 debase贬低 self-abasement abysmal很深的极低的 </li><li>culp 罪行 - culpable有罪的 exculpate开脱 inculpate归罪 </li><li>tum肿 - tumor肿瘤 contumacious不服从的 tumult骚动 </li><li>noc&#x2F;nox&#x2F;nic 伤害 - innocent innocuous无害的 noxious有害的 pernicious有害的 </li><li>turb 搅乱 - disturb perturb使扰乱 imperturbable沉着的 turbid混浊的 turbulent湍急的动荡的 </li><li>tric&#x2F;treach 诡计 - extricate解脱出 treacherous背叛的</li><li>tim 害怕 - timid胆小的 timorous胆小的 intimidate威胁</li><li>dam&#x2F;dem 谴责 - damn condemn谴责 indemnity保险赔偿</li></ul><h5 id="『字母j』"><a href="#『字母j』" class="headerlink" title="『字母j』"></a>『字母j』</h5><ul><li>ject 扔 - reject abject(throw away spirit&#x2F;dignity&#x2F;by_society) conjecture猜测 deject使沮丧 project方案&#x2F;凸出&#x2F;预测 subject受支配的人n&#x2F;取决于的 subjective主观的 jettison丢弃</li><li>jo 快乐 - joy joke rejoice jocular jocund jovial jubilant 快乐愉悦的</li><li>jur 发誓 - abjure抵制 conjure请求&#x2F;想起</li><li>junct&#x2F;joint 联结 - adjunct附属物&#x2F;非必需 disjunctive分离的 disjointed不连贯的 </li><li>jud(ge) 判断 - judicious明智的 adjudicate判定</li><li>justify辩解 adjourn延期&#x2F;休会 jingoist军国主义者</li></ul><h5 id="『字母v』"><a href="#『字母v』" class="headerlink" title="『字母v』"></a>『字母v』</h5><ul><li>vac&#x2F;van 空 - evacuate撤退 vacuous茫然的 evanescent逐渐消失的 </li><li>val 有价值的 - ambivalent矛盾的 convalesce痊愈 equivalent等价的 prevail盛行&#x2F;战胜 unavailing无效的 valiant勇敢的 valid逻辑上正确的 </li><li>ver(i) 真实 - verify veracious诚实的 verisimilar貌似真实的 veritable真正的 </li><li>vol 自由意志 - volition意志 malevolent恶意的</li></ul><h5 id="『下或上的趋势』"><a href="#『下或上的趋势』" class="headerlink" title="『下或上的趋势』"></a>『下或上的趋势』</h5><ul><li>cid&#x2F;cad&#x2F;cas 下降 - accidental recidivate重新犯罪 cascade decadent堕落的 </li><li>laps 倒下 - lapse小过失&#x2F;结束 collapse relapse</li><li>fall - fallacious欺骗性的 fallible可能出错的 felony重罪</li><li>scend 爬 - ascendant descend condescending高姿态的 crescendo声音渐强&#x2F;顶峰 transcend超越</li><li>surg&#x2F;cit 升起 - insurgent叛乱者 resurgence复兴 incite煽动 resuscitate使复苏 solicitous迫切的</li></ul><h5 id="『动作』"><a href="#『动作』" class="headerlink" title="『动作』"></a>『动作』</h5><ul><li>mot 动 - commotion骚乱 demote降职 motile能动的 motivate automatic</li><li>lud&#x2F;lus 玩&#x2F;演奏 - prelude序曲 allude间接提到 collude串通 elude闪避 ludicrous荒唐的 delusion错觉 illusory幻觉的</li><li>fer 拿 - defer推延&#x2F;遵从 proffer献出 referee peripheral外围的&#x2F;辅助性的 fertilize euphoria感觉愉快 aphorism格言警句 belligerent好斗的 </li><li>port 运&#x2F;带来 - importune宏伟壮丽的 deportation放逐 opportune合适的 rapport和睦 </li><li>quir&#x2F;quis 寻求&#x2F;询问 - acquire exquisite精巧的&#x2F;强烈的 inquisitive过分好奇的 perquisite额外的好处 requisite 必需品 prerequisite前提 </li><li>gen 产生 - engender产生 indigenous本土的 ingenious聪明的 ingenuous天真的 homogenize统一化 regenerate genial友好的 genteel有教养的 benign好心的 malign恶意诽谤</li><li>pend&#x2F;pens 挂 - compendium摘要 dependable indispensable必不可少的 impending即将发生的 propensity倾向 suspend悬挂&#x2F;暂停 pensive沉思的 </li><li>ple 填充 - complementary互补的 deplete耗尽 implement replenish补充 plebeian平民的 plentitude大量</li><li>prob&#x2F;prov 证明 - approbation同意 disprove probe深入调查 probity正直 reprobate堕落&#x2F;拒绝 reprove警告&#x2F;不喜欢 proofread校对</li><li>secu&#x2F;sequ 跟随 - consequence obsequious谄媚的 prosecution执行 persecute迫害 </li><li>serv 保存 - conserve保存 conservatory温室 conservative保守的 observant警觉的 preservative防腐剂 reserved内向的 servile低下的 subservient奉承的</li><li>plac 使高兴 - complacent自满的 implacable固执的 placate平息抚慰 placid宁静的 </li><li>grat 高兴 - ingratiating讨人喜欢的 gratify使满足 gratuitous无根据的 </li><li>lect 选择 - eclectic多元的 predilection爱好偏袒</li><li>sci 知道 - omniscient无所不知的 prescience预知 conscientious有良心的 </li><li>cond 收藏 - abscond偷偷离开 ensconce安置 recondite藏在后面-&gt;深奥的</li></ul><h5 id="『其他』"><a href="#『其他』" class="headerlink" title="『其他』"></a>『其他』</h5><ul><li>quiet - acquiesce默许 quiescent平静的 tranquility宁静 </li><li>beat - abate减轻 browbeat恐吓 offbeat不平常的 upbeat上升的</li><li>use - abuse滥用&#x2F;辱骂 disabuse纠正 peruse细读</li><li>labor - belabor喋喋不休 collaborate合作 elaborate详细的 laborious勤奋的</li><li>test - attest证实 testimony声明 testy易怒的 </li><li>rod&#x2F;mord 咬 - erode侵蚀 corrosive腐蚀性的 mordant刻薄的 remorse懊悔 </li><li>her&#x2F;hers 粘 - adhere inherent内在的 cohesive有粘性的</li><li>lig绑 - obligatory强制性的 obliging乐于助人的 religion</li><li>imper 命令 - imperative强制性的 imperious专横的 imperial </li><li>dom&#x2F;domin &#x3D; home&#x2F;dominate 支配 - domicile住所 dominant domineer</li><li>termin 结束 - terminus终点站 interminable exterminate根除 </li><li>clus&#x2F;clud &#x3D; close 关闭 - preclude排斥 recluse隐士 seclude隔绝 </li><li>struct &#x3D; build - construct obstruct妨碍 misconstruct误解 </li><li>dol &#x3D; grieve 悲伤 - dolorous忧伤的 condole表达同情 indolent懒惰的 </li><li>sol &#x3D; comfort - solace console安慰</li><li>pall&#x2F;pale 苍白的 - appall使惊恐 pall失去兴趣 palliate平息 pallid苍白的 </li><li>pot &#x3D; power - impotent无力的 potentate有权势的人 potentiate加强 </li><li>sacr&#x2F;sanct &#x3D; holy&#x2F;scared 神圣的 - sacrifice sacrosanct神圣不可侵犯的 desecrate execrate谴责 sanction批准 sanctify将..视为神圣 sanctimonious假装虔诚的 sanctuary避难所 </li><li>patr &#x3D; father - patrician贵族 patronize赞助 patriot爱国者 repatriate遣返</li><li>dem &#x3D; people - democracy demotic大众化的 endemic地方性的 pandemic大范围流行的 </li><li>grand - aggrandize grandeur宏伟 grandiose宏大的&#x2F;浮夸的 </li><li>spir 呼吸 - spirit inspire aspirant有抱负者 conspire合谋 expire到期 respire呼吸</li></ul><h5 id="『一词多义、复合词、经典词缀』"><a href="#『一词多义、复合词、经典词缀』" class="headerlink" title="『一词多义、复合词、经典词缀』"></a>『一词多义、复合词、经典词缀』</h5><ul><li>一词多义 - balloon迅速增加 husband节俭 meet合适的 patent显而易见的 plastic可塑的&#x2F;虚假的 rider附加条款 want缺少的 </li><li>经典后缀 - noisome有害&#x2F;有毒&#x2F;恶臭的 winsome迷人的 wholesome有益身心的 fulsome过度的 willful固执的&#x2F;故意的 playful爱开玩笑的 falsehood谎言 exacting严格的 offish冷淡的 worldly世俗的 needy贫穷的 windy冗长的 </li><li>名词+名词 - windbag健谈者 stonewall阻挠 faultfinder吹毛求疵者 shipshape井然有序的 </li><li>形容词+名词 - deadlock deadpan无趣的 daredevil大胆的人 blueprint blackmail敲诈 airtight无瑕疵的 carefree无忧无虑的 foolproof十分简单的 threadbare破烂的 </li><li>…+分词 - outmoded shopworn陈旧的 timeworn陈腐的 careworn焦虑地 ill-bred没有教养的 ironclad坚不可摧的 tightfisted吝啬的 thick-skinned冷漠的 half-baked不明智的 hard-bitten顽强的 painstaking煞费苦心的 everlasting永恒的 </li><li>介词&#x2F;副词+… - downplay轻描淡写&#x2F;不予重视 downpour倾盆大雨 interlock连结&#x2F;连锁 forthright直率的 onset攻击 off-key不寻常的 outgrowth结果 override不顾 upbraid(braid辫子)谴责 undermine削弱 underscore强调 understate保守陈述 understudy替补演员 </li><li>名词&#x2F;形容词+动词 - safeguard保护 watershed分水岭 cloudburst暴雨 pitfall陷阱 waylay埋伏 windfall意外的收获 wiretap窃听 </li><li>其他 - eavesdrop(eaves屋檐)偷听 turncoat叛徒 steadfast坚定的 diehard保守顽固 hidebound死板的 dated过时的 antedate早于 forebode预示 fail-safe保险措施&#x2F;万无一失的</li></ul><h5 id="『动物相关』"><a href="#『动物相关』" class="headerlink" title="『动物相关』"></a>『动物相关』</h5><ul><li>elephantine巨大的 lionize追捧 bully霸凌&#x2F;最好的 ebullient热情的 cower畏缩 impecunious贫穷的 bellwether领头羊 buck反对&#x2F;转移 jaded疲倦的 coltish不守纪律的 restive急躁的 spur刺物 synic愤世嫉俗者 dogged固执的&#x2F;坚持的 hangdog伤心的 underdog abet帮助 bait引诱 </li><li>serpentine弯曲的 chameleon变色龙 gossamer轻薄的 gull欺骗 gullible易受骗的 parrot模仿 coquette调情 coop(鸡笼)监禁 crestfallen(crest鸡冠)垂头丧气的 callow不老练的 fledgling(fledge长羽毛)新生 preen整理&#x2F;打扮&#x2F;自满 molt脱羽毛 badger不断纠缠 toady马屁精 sloth(树懒)懒惰 sluggard懒人 moth-eaten过时的 gadfly刺激物 goad刺激 nitpick吹毛求疵</li></ul><h3 id="2-填空"><a href="#2-填空" class="headerlink" title="2. 填空"></a>2. 填空</h3><ul><li>不需要了解单词的具体背景，只需要判断词性（+ &#x2F; -）然后选对了即可</li><li>六选二一般原则是选同义词</li><li>只刷真题，一千多</li><li>(3M+WC)+have done结构 表猜测</li></ul><blockquote><p>如果你刷了七八百道真题后正确率还完全没有起色，那请扪心自问几个问题，</p><p>“知道错题为什么错吗？”</p><p>“遇到重复题时正确率能百分百吗？”</p><p>“做过的真题中所有单词都记住了吗？”</p></blockquote><h3 id="3-阅读"><a href="#3-阅读" class="headerlink" title="3. 阅读"></a>3. 阅读</h3><p>推荐：微臣GRE-张禄</p><ul><li>阅读真题、经典长阅读真题 —— 计时刷</li><li>不必执着真题，按薄弱点找专项训练</li><li>碰到完全看不懂的文章，进行拆句精读</li></ul><h4 id="3-1-GRE阅读考察什么："><a href="#3-1-GRE阅读考察什么：" class="headerlink" title="3.1 GRE阅读考察什么："></a>3.1 GRE阅读考察什么：</h4><ul><li>词汇\短语</li><li>长难句</li><li>抗遗忘能力</li><li>逻辑——关系：句内关系，<strong>句间关系</strong></li><li>做题能力</li></ul><h4 id="3-2-核心方法论"><a href="#3-2-核心方法论" class="headerlink" title="3.2 核心方法论"></a>3.2 核心方法论</h4><ul><li><p>三秒版本：每一句、每一段、每一篇 最核心最概括的版本（抗遗忘能力）</p><ul><li>主干原则<ul><li>简单句：SVO主谓宾</li><li>复合句：主句SVO</li><li>观点句：内容主干</li></ul></li></ul></li><li><p>句间关系：做预判</p><ul><li>取同</li><li>取反<ul><li>But, Yet, H&#x2F;however, Nevertheless — 出现这几个词就是取反</li><li>换对象</li><li>负态度词：criticize; oppose …</li></ul></li></ul></li><li><p>同义改写</p><ul><li><p>正确的选项 &#x3D; 正确的同义改写</p></li><li><p>选项中的虚词，要在原文中找指代</p><ul><li>a&#x2F;an&#x2F;certain</li><li>可数名词复数</li><li>不可数名词</li></ul></li></ul></li></ul><h4 id="3-3-题型分类"><a href="#3-3-题型分类" class="headerlink" title="3.3 题型分类"></a>3.3 题型分类</h4><ul><li>主旨题 primary purpose : 3s</li><li>细节题<ul><li>可定位细节题 ： according to the passage &#x2F; in order to</li><li>不可定位细节题：which of the following is mentioned in the passage?</li></ul></li></ul><h4 id="3-4-读文章步骤"><a href="#3-4-读文章步骤" class="headerlink" title="3.4 读文章步骤"></a>3.4 读文章步骤</h4><p>首句 — 翻译 — 3s — 预判 — 第二句 — 翻译 — 3s …</p><h4 id="3-5-核心短语"><a href="#3-5-核心短语" class="headerlink" title="3.5 核心短语"></a>3.5 核心短语</h4><ul><li>stop short of 不做某事</li><li>jockey for 不择手段地争取</li><li>per se 本身，本质上</li><li>silver lining 困境中的一线希望</li><li>in the grip of 受……的重大影响</li><li>bear out 证实</li><li>status quo 原状，现状</li><li>hinge on 取决于</li><li>be pitted against 在与……抗争</li><li>be punctuated by 被……打断</li><li>put another way 换句话说</li><li>to some extent 一定程度上</li><li>for one thing 首先</li><li>set apart 区别开</li><li>come into being 形成</li><li>in spite of 尽管</li><li>accommodate () to 使适应</li><li>prior to 在……之前</li><li>laundry list of 详细清单，一大串……</li><li>have a bearing of 与……有关</li><li>run against 与……竞争</li><li>take sides 选择立场</li><li>gain favor 获得青睐</li><li>gloss over 掩饰，搪塞</li><li>sign into (law) 签署</li><li>shed light on 阐明，帮助理解</li><li>draw support for 为……争取支持</li><li>ensue from 由……产生 &#x3D; spring from &#x3D; stem from </li><li>rebel against 反抗，抵抗</li><li>be attributable to 归因于，归结于 &#x3D; ascribe to </li><li>a salvo of 大量的</li><li>drop out 退出，半途而废</li><li>explain away 通过解释消除</li><li>back and forth 反复，来回</li><li>subject to 受制于，依赖于</li><li>at stake 处于危险中</li><li>leave out 省略，忽略</li><li>frame of reference 参考系</li><li>constitutional monarchy 君主立宪政体</li><li>in proximity to 在……附近</li><li>deduce from 推导，逻辑演绎</li><li>at large 整个的</li><li>touch on 简单提起</li><li>order of magnitude 数量级</li><li>speculate on 提出假设，猜想</li><li>pave the way for 为……铺平了道路</li><li>a streak of 有一点，有一丝</li><li>conform to 符合</li><li>in retrospect 回顾往事，事后看来</li><li>lay out 1. 提出，解释； 2. 部署，布置</li><li>draw from 从……中取得</li><li>make … distinct from 使脱颖而出</li><li>extrapolate from 由……推断；外推</li><li>shore up 加固</li><li>coincide with 同时发生</li><li>so far 1. 到目前为止； <strong>2. 有限地</strong></li><li>as a function of 随着……变化</li><li>set aside 1. 置…不顾； 2. 留出</li><li>figure as 扮演……角色</li><li>pass into oblivion 逐渐被遗忘</li><li>project into 投射，显示</li><li>all but 1. （接名词）除了(-)； 2. （接形容词）几乎(+)</li><li>get credit for 因……而受到好评</li><li>take up 承担，开始做</li><li>lay off 解雇</li><li>fall into disrepute 名声扫地</li><li>not so much A as B 与其说是A不如说是B</li><li>ward off 避开，避免</li><li>be committed to 致力于</li></ul><h3 id="4-数学"><a href="#4-数学" class="headerlink" title="4. 数学"></a>4. 数学</h3><ul><li>视频课，明确考纲范围 ——&gt; 刷真题</li><li>时间充裕者，『猴哥数学难题』</li><li>考察细心程度，看一看网上总结的『中国人容易出错的几个地方』，背一背概率论的几个经典公式</li><li>不要拿『GRE数学高分突破.pdf』or 『GRE数学考点大全.doc』这种生僻难题众多的来打击自信心</li></ul><h3 id="5-作文"><a href="#5-作文" class="headerlink" title="5. 作文"></a>5. 作文</h3><h4 id="Issue-Writing"><a href="#Issue-Writing" class="headerlink" title="Issue Writing"></a>Issue Writing</h4><ul><li>一定要写几篇自己感受。逻辑重要。</li></ul><p>Direction分类 6种</p><ol><li>敌方看法类<ol><li>敌方看法类 challenge - 考虑别人如何反驳自己，批判性思考并解释 - <strong>一定要解释敌方观点的理由和例子</strong></li><li>两种看法类 both - 讨论两种观点并选边 - 需要讨论地方观点，但是不需要解释其理由和例子</li></ol></li><li>分情况做讨论类<ol><li>是非判断 ways - 同意与否相关陈述，尽量批判性讨论，不一边倒</li><li>建议类1 circumstances</li><li>建议类2 consequence</li></ol></li><li>因果类 claim reason</li></ol><ul><li><p>不要生搬硬套例子来佐证观点，可能会不相关。实在没有例子可以适当编造。</p></li><li><p>Issue高频题表和Issue提纲大全，照着高频表把每篇文章的提纲和例子在脑子里飞快过一遍，然后就动笔写</p></li></ul><h4 id="Argument-Writing"><a href="#Argument-Writing" class="headerlink" title="Argument Writing"></a>Argument Writing</h4><ul><li>搜索『Argument中文提纲』，看个十几篇，明白套路</li><li>形成自己的模板</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《GRE核心词汇助记》（再要你命3000）</li></ul><blockquote><p>填空部分保证70%正确率。4道六选二全对，机经可能会中一两道，你自己再做对一两道，正确率不就70%了吗？然后阅读部分错一半，第一个section总共错8个，进入median模式。Median模式难度比第一个section简单，那第二个section少错一点，错6个。这样verbal就能156+了</p><p>对于大部分中国学生而言，Writing部分3.5分差不多够用了，所以也不必把Issue部分看得太重，复习重心还是以Verbal为主。Argument拿4分Issue拿3分就行了，3分多容易啊～随便写写嘛╮(‵▽′)╭～</p><p>最后附上我自己当时的备考schedule：</p><p>1-7天： 飞速刷佛脚单词，看看视频课。</p><p>8-22天： 每天100—150道填空、10—15篇短阅读、1—2篇长阅读。反复刷反复看直到对已有的真题滚瓜烂熟。</p><p>23-25天： 数学和作文。（别学我！作文多留点时间练！）</p><p>作者：皮皮卡链接：<a href="https://www.zhihu.com/question/19701271/answer/127153648">https://www.zhihu.com/question/19701271/answer/127153648</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GRE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data Visualization</title>
    <link href="/2019/11/30/data-visualization/"/>
    <url>/2019/11/30/data-visualization/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="0-Datasets-Used"><a href="#0-Datasets-Used" class="headerlink" title="0. Datasets Used"></a>0. Datasets Used</h2><p>Immigration to Canada from 1980 to 2013. </p><p>See: <a href="https://www.un.org/en/development/desa/population/migration/data/empirical2/migrationflows.asp">https://www.un.org/en/development/desa/population/migration/data/empirical2/migrationflows.asp</a></p><h2 id="1-Pandas-Basic"><a href="#1-Pandas-Basic" class="headerlink" title="1. Pandas Basic"></a>1. Pandas Basic</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  import two key data analysis modules</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># useful for many scientific computing in Python</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># primary data structure library</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">!conda install -c anaconda xlrd --yes</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">df_can = pd.read_excel(<span class="string">&#x27;https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx&#x27;</span>,</span><br><span class="line">                       sheet_name=<span class="string">&#x27;Canada by Citizenship&#x27;</span>,</span><br><span class="line">                       skiprows=<span class="built_in">range</span>(<span class="number">20</span>),</span><br><span class="line">                       skipfooter=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Data read into a pandas dataframe!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df_can.head() <span class="comment"># view the top 5 rows of the dataset</span></span><br><span class="line">df_can.head(<span class="number">10</span>) <span class="comment"># view the top 10 rows of the dataset</span></span><br><span class="line">df_can.tail() <span class="comment"># veiw the bottom 5 rows of the dataset </span></span><br><span class="line">df_can.info() <span class="comment"># get basic information </span></span><br><span class="line">df_can.columns.values <span class="comment"># get the list of column headers</span></span><br><span class="line">df_can.index.values <span class="comment"># get the list of indicies</span></span><br><span class="line">df_can.shape <span class="comment"># size of dataframe (rows, columns)</span></span><br><span class="line">df_can.drop([<span class="string">&#x27;AREA&#x27;</span>,<span class="string">&#x27;Coverage&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)<span class="comment"># axis=0-&gt;rows(default);=1-&gt;columns</span></span><br><span class="line">df_can.rename(columns=&#123;<span class="string">&#x27;OdName&#x27;</span>:<span class="string">&#x27;Country&#x27;</span>, <span class="string">&#x27;RegName&#x27;</span>:<span class="string">&#x27;Region&#x27;</span>&#125;, inplace=<span class="literal">True</span>) <span class="comment"># rename the columns </span></span><br><span class="line">df_can[<span class="string">&#x27;Total&#x27;</span>] = df_can.<span class="built_in">sum</span>(axis=<span class="number">1</span>) <span class="comment"># sums up the total immigrants by country</span></span><br><span class="line">df_can.isnull().<span class="built_in">sum</span>() <span class="comment"># see null objects</span></span><br><span class="line">df_can.describe() <span class="comment"># view a quick summary of each column</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default type of index and columns is NOT list.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df_can.columns)) <span class="comment"># :&lt;class &#x27;pandas.core.indexes.base.Index&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df_can.index)) <span class="comment"># :&lt;class &#x27;pandas.core.indexes.range.RangeIndex&#x27;&gt;</span></span><br><span class="line"><span class="comment"># To get the index and columns as lists</span></span><br><span class="line">df_can.columns.tolist()</span><br><span class="line">df_can.index.tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Indexing and Selection (slicing)</span></span><br><span class="line">df_can.Country <span class="comment"># returns a series</span></span><br><span class="line">df_can[[<span class="string">&#x27;Country&#x27;</span>, <span class="number">1980</span>, <span class="number">1981</span>, <span class="number">1982</span>, <span class="number">1983</span>, <span class="number">1984</span>, <span class="number">1985</span>]] <span class="comment"># returns a dataframe</span></span><br><span class="line">df_can.set_index(<span class="string">&#x27;Country&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1. the full row data (all columns)</span></span><br><span class="line"><span class="built_in">print</span>(df_can.loc[<span class="string">&#x27;Japan&#x27;</span>])</span><br><span class="line"><span class="comment">## 2. for year 2013</span></span><br><span class="line"><span class="built_in">print</span>(df_can.loc[<span class="string">&#x27;Japan&#x27;</span>, <span class="number">2013</span>])</span><br><span class="line"><span class="comment">## 3. for years 1980 to 1985</span></span><br><span class="line"><span class="built_in">print</span>(df_can.loc[<span class="string">&#x27;Japan&#x27;</span>, [<span class="number">1980</span>, <span class="number">1981</span>, <span class="number">1982</span>, <span class="number">1983</span>, <span class="number">1984</span>, <span class="number">1984</span>]])</span><br><span class="line"><span class="built_in">print</span>(df_can.iloc[<span class="number">87</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"><span class="comment"># convert the column names into strings</span></span><br><span class="line">df_can.columns = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, df_can.columns)) </span><br></pre></td></tr></table></figure><h2 id="2-Matplotlib"><a href="#2-Matplotlib" class="headerlink" title="2. Matplotlib"></a>2. Matplotlib</h2><blockquote><p>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># we are using the inline backend</span></span><br><span class="line">%matplotlib inline </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Matplotlib version: &#x27;</span>, mpl.__version__) <span class="comment"># &gt;= 2.0.0</span></span><br></pre></td></tr></table></figure><h3 id="2-1-Line-Plots"><a href="#2-1-Line-Plots" class="headerlink" title="2.1 Line Plots"></a>2.1 Line Plots</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">haiti = df_can.loc[<span class="string">&#x27;Haiti&#x27;</span>, years] <span class="comment"># passing in years 1980 - 2013 to exclude the &#x27;total&#x27; column</span></span><br><span class="line">haiti.plot() <span class="comment"># plot a line plot</span></span><br><span class="line"></span><br><span class="line">haiti.index = haiti.index.<span class="built_in">map</span>(<span class="built_in">int</span>) <span class="comment"># change the index values of Haiti to type integer for plotting</span></span><br><span class="line">haiti.plot(kind=<span class="string">&#x27;line&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;Immigration from Haiti&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of immigrants&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.text(2000, 6000, &#x27;2010 Earthquake&#x27;) # see note below</span></span><br><span class="line"></span><br><span class="line">plt.show() <span class="comment"># need this line to show the updates made to the figure</span></span><br></pre></td></tr></table></figure><p>Practice: Compare the trend of top 5 countries that contributed the most to immigration to Canada.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get the top 5 entries</span></span><br><span class="line">df_top5 = df_can.head(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># print(df_top5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># transpose the dataframe</span></span><br><span class="line">df_top5 = df_top5[years].transpose() </span><br><span class="line"><span class="built_in">print</span>(df_top5)</span><br><span class="line"></span><br><span class="line">df_top5.index = df_top5.index.<span class="built_in">map</span>(<span class="built_in">int</span>) <span class="comment"># let&#x27;s change the index values of df_top5 to type integer for plotting</span></span><br><span class="line">df_top5.plot(kind=<span class="string">&#x27;line&#x27;</span>, figsize=(<span class="number">14</span>, <span class="number">8</span>)) <span class="comment"># pass a tuple (x, y) size</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;Immigration Trend of Top 5 Countries&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">How come we didn&#x27;t need to transpose Haiti&#x27;s dataframe before plotting (like we did for df_CI)?</span></span><br><span class="line"><span class="string">That&#x27;s because haiti is a series as opposed to a dataframe, and has the years as its indices as shown below.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-30-142542.png" alt="image-20191130222541900"></p><h3 id="2-2-Area-Plots"><a href="#2-2-Area-Plots" class="headerlink" title="2.2 Area Plots"></a>2.2 Area Plots</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">df_top5.index = df_top5.index.<span class="built_in">map</span>(<span class="built_in">int</span>) <span class="comment"># let&#x27;s change the index values of df_top5 to type integer for plotting</span></span><br><span class="line">df_top5.plot(kind=<span class="string">&#x27;area&#x27;</span>, stacked=<span class="literal">False</span>, figsize=(<span class="number">20</span>, <span class="number">10</span>), ) <span class="comment"># Pass a tuple (x, y) size</span></span><br><span class="line"><span class="comment"># df_top5.plot(kind=&#x27;area&#x27;, alpha=0.25, stacked=False, figsize=(20, 10), )</span></span><br><span class="line"> <span class="comment"># alpha: 0-1, default value = 0.5</span></span><br><span class="line">  </span><br><span class="line">plt.title(<span class="string">&#x27;Immigration Trend of Top 5 Countries&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># option 2: preferred option with more flexibility</span></span><br><span class="line"><span class="string">ax = df_top5.plot(kind=&#x27;area&#x27;, alpha=0.35, figsize=(20, 10))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ax.set_title(&#x27;Immigration Trend of Top 5 Countries&#x27;)</span></span><br><span class="line"><span class="string">ax.set_ylabel(&#x27;Number of Immigrants&#x27;)</span></span><br><span class="line"><span class="string">ax.set_xlabel(&#x27;Years&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-063350.png" alt="image-20191204143349332"></p><h3 id="2-3-Histograms"><a href="#2-3-Histograms" class="headerlink" title="2.3 Histograms"></a>2.3 Histograms</h3><p>Display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013 using an overlapping plot with 15 bins and a transparency value of 0.35.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a dataframe of the countries of interest (cof)</span></span><br><span class="line">df_cof = df_can.loc[[<span class="string">&#x27;Greece&#x27;</span>, <span class="string">&#x27;Albania&#x27;</span>, <span class="string">&#x27;Bulgaria&#x27;</span>], years]</span><br><span class="line"><span class="comment"># transpose the dataframe</span></span><br><span class="line">df_cof = df_cof.transpose() </span><br><span class="line"><span class="comment"># let&#x27;s get the x-tick values</span></span><br><span class="line">count, bin_edges = np.histogram(df_cof, <span class="number">15</span>)</span><br><span class="line"><span class="comment"># Un-stacked Histogram</span></span><br><span class="line">df_cof.plot(kind =<span class="string">&#x27;hist&#x27;</span>,</span><br><span class="line">            figsize=(<span class="number">10</span>, <span class="number">6</span>),</span><br><span class="line">            bins=<span class="number">15</span>,</span><br><span class="line">            alpha=<span class="number">0.35</span>,</span><br><span class="line">            xticks=bin_edges,</span><br><span class="line">            color=[<span class="string">&#x27;coral&#x27;</span>, <span class="string">&#x27;darkslateblue&#x27;</span>, <span class="string">&#x27;mediumseagreen&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">plt.title(<span class="string">&#x27;Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of Years&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-063428.png" alt="image-20191204143427790"></p><h3 id="2-4-Dar-Charts"><a href="#2-4-Dar-Charts" class="headerlink" title="2.4 Dar Charts"></a>2.4 Dar Charts</h3><p>Using the scripting layter and the <code>df_can</code> dataset, create a <em>horizontal</em> bar plot showing the <em>total</em> number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort dataframe on &#x27;Total&#x27; column (descending)</span></span><br><span class="line">df_can.sort_values(by=<span class="string">&#x27;Total&#x27;</span>, ascending=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># get top 15 countries</span></span><br><span class="line">df_top15 = df_can[<span class="string">&#x27;Total&#x27;</span>].tail(<span class="number">15</span>)</span><br><span class="line">df_top15</span><br><span class="line"><span class="comment"># generate plot</span></span><br><span class="line">df_top15.plot(kind=<span class="string">&#x27;barh&#x27;</span>, figsize=(<span class="number">12</span>, <span class="number">12</span>), color=<span class="string">&#x27;steelblue&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Top 15 Conuntries Contributing to the Immigration to Canada between 1980 - 2013&#x27;</span>)</span><br><span class="line"><span class="comment"># annotate value labels to each country</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(df_top15): </span><br><span class="line">    label = <span class="built_in">format</span>(<span class="built_in">int</span>(value), <span class="string">&#x27;,&#x27;</span>) <span class="comment"># format int with commas</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)</span></span><br><span class="line">    plt.annotate(label, xy=(value - <span class="number">47000</span>, index - <span class="number">0.10</span>), color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-063525.png" alt="image-20191204143524730"></p><h3 id="2-5-Pie-Charts"><a href="#2-5-Pie-Charts" class="headerlink" title="2.5 Pie Charts"></a>2.5 Pie Charts</h3><p>Using a pie chart, explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">explode_list = [<span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.2</span>] <span class="comment"># ratio for each continent with which to offset each wedge.</span></span><br><span class="line">df_continents[<span class="string">&#x27;2013&#x27;</span>].plot(kind=<span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                            figsize=(<span class="number">15</span>, <span class="number">6</span>),</span><br><span class="line">                            autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>, </span><br><span class="line">                            startangle=<span class="number">90</span>,    </span><br><span class="line">                            shadow=<span class="literal">True</span>,       </span><br><span class="line">                            labels=<span class="literal">None</span>,                 <span class="comment"># turn off labels on pie chart</span></span><br><span class="line">                            pctdistance=<span class="number">1.12</span>,            <span class="comment"># the ratio between the pie center and start of text label</span></span><br><span class="line">                            explode=explode_list         <span class="comment"># &#x27;explode&#x27; lowest 3 continents</span></span><br><span class="line">                            )</span><br><span class="line"><span class="comment"># scale the title up by 12% to match pctdistance</span></span><br><span class="line">plt.title(<span class="string">&#x27;Immigration to Canada by Continent in 2013&#x27;</span>, y=<span class="number">1.12</span>) </span><br><span class="line">plt.axis(<span class="string">&#x27;equal&#x27;</span>) </span><br><span class="line"><span class="comment"># add legend</span></span><br><span class="line">plt.legend(labels=df_continents.index, loc=<span class="string">&#x27;upper left&#x27;</span>) </span><br><span class="line"><span class="comment"># show plot</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-6-Box-Plots"><a href="#2-6-Box-Plots" class="headerlink" title="2.6 Box Plots"></a>2.6 Box Plots</h3><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-065232.png" alt="image-20191204145232643"></p><p>Compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df_CI= df_can.loc[[<span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;India&#x27;</span>], years].transpose()</span><br><span class="line">df_CI.head()</span><br><span class="line"><span class="comment"># view the percentages associated with both countries</span></span><br><span class="line">df_CI.describe()</span><br><span class="line"><span class="comment"># Plot data</span></span><br><span class="line">df_CI.plot(kind=<span class="string">&#x27;box&#x27;</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>), color=<span class="string">&#x27;blue&#x27;</span>, vert=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Box plots of Immigrants from China and India (1980 - 2013)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-7-Scatter-Plots"><a href="#2-7-Scatter-Plots" class="headerlink" title="2.7 Scatter Plots"></a>2.7 Scatter Plots</h3><p>Create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create df_countries dataframe</span></span><br><span class="line">df_countries = df_can.loc[[<span class="string">&#x27;Denmark&#x27;</span>, <span class="string">&#x27;Norway&#x27;</span>, <span class="string">&#x27;Sweden&#x27;</span>], years].transpose()</span><br><span class="line"><span class="comment"># create df_total by summing across three countries for each year</span></span><br><span class="line">df_total = pd.DataFrame(df_countries.<span class="built_in">sum</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># reset index in place</span></span><br><span class="line">df_total.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># rename columns</span></span><br><span class="line">df_total.columns = [<span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;total&#x27;</span>]</span><br><span class="line"><span class="comment"># change column year from string to int to create scatter plot</span></span><br><span class="line">df_total[<span class="string">&#x27;year&#x27;</span>] = df_total[<span class="string">&#x27;year&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="comment"># show resulting dataframe</span></span><br><span class="line">df_total.head()</span><br><span class="line"><span class="comment"># generate scatter plot</span></span><br><span class="line">df_total.plot(kind=<span class="string">&#x27;scatter&#x27;</span>, x=<span class="string">&#x27;year&#x27;</span>, y=<span class="string">&#x27;total&#x27;</span>, figsize=(<span class="number">3</span>, <span class="number">2</span>), color=<span class="string">&#x27;darkblue&#x27;</span>)</span><br><span class="line"><span class="comment"># add title and label to axes</span></span><br><span class="line">plt.title(<span class="string">&#x27;Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line"><span class="comment"># show plot</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-071843.png" alt="image-20191204151843324"></p><h3 id="2-8-Bubble-Plots"><a href="#2-8-Bubble-Plots" class="headerlink" title="2.8 Bubble Plots"></a>2.8 Bubble Plots</h3><p>Create bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">df_can_t = df_can[years].transpose() <span class="comment"># transposed dataframe</span></span><br><span class="line"><span class="comment"># cast the Years (the index) to type int</span></span><br><span class="line">df_can_t.index = <span class="built_in">map</span>(<span class="built_in">int</span>, df_can_t.index)</span><br><span class="line"><span class="comment"># let&#x27;s label the index. This will automatically be the column name when we reset the index</span></span><br><span class="line">df_can_t.index.name = <span class="string">&#x27;Year&#x27;</span></span><br><span class="line"><span class="comment"># reset index to bring the Year in as a column</span></span><br><span class="line">df_can_t.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># view the changes</span></span><br><span class="line">df_can_t.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># normalize China data</span></span><br><span class="line">norm_china = (df_can_t[<span class="string">&#x27;China&#x27;</span>] - df_can_t[<span class="string">&#x27;China&#x27;</span>].<span class="built_in">min</span>()) / (df_can_t[<span class="string">&#x27;China&#x27;</span>].<span class="built_in">max</span>() - df_can_t[<span class="string">&#x27;China&#x27;</span>].<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># normalize India data</span></span><br><span class="line">norm_india = (df_can_t[<span class="string">&#x27;India&#x27;</span>] - df_can_t[<span class="string">&#x27;India&#x27;</span>].<span class="built_in">min</span>()) / (df_can_t[<span class="string">&#x27;India&#x27;</span>].<span class="built_in">max</span>() - df_can_t[<span class="string">&#x27;India&#x27;</span>].<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># China</span></span><br><span class="line">ax0 = df_can_t.plot(kind=<span class="string">&#x27;scatter&#x27;</span>,</span><br><span class="line">                    x=<span class="string">&#x27;Year&#x27;</span>,</span><br><span class="line">                    y=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">                    figsize=(<span class="number">14</span>, <span class="number">8</span>),</span><br><span class="line">                    alpha=<span class="number">0.5</span>,                  <span class="comment"># transparency</span></span><br><span class="line">                    color=<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">                    s=norm_china * <span class="number">2000</span> + <span class="number">10</span>,  <span class="comment"># pass in weights </span></span><br><span class="line">                    xlim=(<span class="number">1975</span>, <span class="number">2015</span>)</span><br><span class="line">                   )</span><br><span class="line"><span class="comment"># India</span></span><br><span class="line">ax1 = df_can_t.plot(kind=<span class="string">&#x27;scatter&#x27;</span>,</span><br><span class="line">                    x=<span class="string">&#x27;Year&#x27;</span>,</span><br><span class="line">                    y=<span class="string">&#x27;India&#x27;</span>,</span><br><span class="line">                    alpha=<span class="number">0.5</span>,</span><br><span class="line">                    color=<span class="string">&quot;blue&quot;</span>,</span><br><span class="line">                    s=norm_india * <span class="number">2000</span> + <span class="number">10</span>,</span><br><span class="line">                    ax = ax0</span><br><span class="line">                   )</span><br><span class="line"></span><br><span class="line">ax0.set_ylabel(<span class="string">&#x27;Number of Immigrants&#x27;</span>)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;Immigration from China and India from 1980 - 2013&#x27;</span>)</span><br><span class="line">ax0.legend([<span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;India&#x27;</span>], loc=<span class="string">&#x27;upper left&#x27;</span>, fontsize=<span class="string">&#x27;x-large&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-072236.png" alt="image-20191204152236399"></p><h3 id="2-9-Waffle-Charts"><a href="#2-9-Waffle-Charts" class="headerlink" title="2.9 Waffle Charts"></a>2.9 Waffle Charts</h3><p>A <code>waffle chart</code> is an interesting visualization that is normally created to display progress toward goals. It is commonly an effective option when you are trying to add interesting visualization features to a visual that consists mainly of cells, such as an Excel dashboard.</p><p>This <em>create_waffle_chart</em> function would take the following parameters as input:</p><blockquote><p><strong>categories</strong>: Unique categories or classes in dataframe.</p><p><strong>values</strong>: Values corresponding to categories or classes.</p><p><strong>height</strong>: Defined height of waffle chart.</p><p><strong>width</strong>: Defined width of waffle chart.</p><p><strong>colormap</strong>: Colormap class</p><p><strong>value_sign</strong>: In order to make our function more generalizable, we will add this parameter to address signs that could be associated with a value such as %, $, and so on. <strong>value_sign</strong> has a default value of empty string.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_waffle_chart</span>(<span class="params">categories, values, height, width, colormap, value_sign=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the proportion of each category with respect to the total</span></span><br><span class="line">    total_values = <span class="built_in">sum</span>(values)</span><br><span class="line">    category_proportions = [(<span class="built_in">float</span>(value) / total_values) <span class="keyword">for</span> value <span class="keyword">in</span> values]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the total number of tiles</span></span><br><span class="line">    total_num_tiles = width * height <span class="comment"># total number of tiles</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;Total number of tiles is&#x27;</span>, total_num_tiles)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># compute the number of tiles for each catagory</span></span><br><span class="line">    tiles_per_category = [<span class="built_in">round</span>(proportion * total_num_tiles) <span class="keyword">for</span> proportion <span class="keyword">in</span> category_proportions]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print out number of tiles per category</span></span><br><span class="line">    <span class="keyword">for</span> i, tiles <span class="keyword">in</span> <span class="built_in">enumerate</span>(tiles_per_category):</span><br><span class="line">        <span class="built_in">print</span> (df_dsn.index.values[i] + <span class="string">&#x27;: &#x27;</span> + <span class="built_in">str</span>(tiles))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize the waffle chart as an empty matrix</span></span><br><span class="line">    waffle_chart = np.zeros((height, width))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define indices to loop through waffle chart</span></span><br><span class="line">    category_index = <span class="number">0</span></span><br><span class="line">    tile_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># populate the waffle chart</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            tile_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if the number of tiles populated for the current category </span></span><br><span class="line">            <span class="comment"># is equal to its corresponding allocated tiles...</span></span><br><span class="line">            <span class="keyword">if</span> tile_index &gt; <span class="built_in">sum</span>(tiles_per_category[<span class="number">0</span>:category_index]):</span><br><span class="line">                <span class="comment"># ...proceed to the next category</span></span><br><span class="line">                category_index += <span class="number">1</span>       </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># set the class value to an integer, which increases with class</span></span><br><span class="line">            waffle_chart[row, col] = category_index</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># instantiate a new figure object</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use matshow to display the waffle chart</span></span><br><span class="line">    colormap = plt.cm.coolwarm</span><br><span class="line">    plt.matshow(waffle_chart, cmap=colormap)</span><br><span class="line">    plt.colorbar()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the axis</span></span><br><span class="line">    ax = plt.gca()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set minor ticks</span></span><br><span class="line">    ax.set_xticks(np.arange(-<span class="number">.5</span>, (width), <span class="number">1</span>), minor=<span class="literal">True</span>)</span><br><span class="line">    ax.set_yticks(np.arange(-<span class="number">.5</span>, (height), <span class="number">1</span>), minor=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add dridlines based on minor ticks</span></span><br><span class="line">    ax.grid(which=<span class="string">&#x27;minor&#x27;</span>, color=<span class="string">&#x27;w&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute cumulative sum of individual categories to match color schemes between chart and legend</span></span><br><span class="line">    values_cumsum = np.cumsum(values)</span><br><span class="line">    total_values = values_cumsum[<span class="built_in">len</span>(values_cumsum) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create legend</span></span><br><span class="line">    legend_handles = []</span><br><span class="line">    <span class="keyword">for</span> i, category <span class="keyword">in</span> <span class="built_in">enumerate</span>(categories):</span><br><span class="line">        <span class="keyword">if</span> value_sign == <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">            label_str = category + <span class="string">&#x27; (&#x27;</span> + <span class="built_in">str</span>(values[i]) + value_sign + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            label_str = category + <span class="string">&#x27; (&#x27;</span> + value_sign + <span class="built_in">str</span>(values[i]) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">            </span><br><span class="line">        color_val = colormap(<span class="built_in">float</span>(values_cumsum[i])/total_values)</span><br><span class="line">        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add legend to chart</span></span><br><span class="line">    plt.legend(</span><br><span class="line">        handles=legend_handles,</span><br><span class="line">        loc=<span class="string">&#x27;lower center&#x27;</span>, </span><br><span class="line">        ncol=<span class="built_in">len</span>(categories),</span><br><span class="line">        bbox_to_anchor=(<span class="number">0.</span>, -<span class="number">0.2</span>, <span class="number">0.95</span>, <span class="number">.1</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">width = <span class="number">40</span> <span class="comment"># width of chart</span></span><br><span class="line">height = <span class="number">10</span> <span class="comment"># height of chart</span></span><br><span class="line">categories = df_dsn.index.values <span class="comment"># categories</span></span><br><span class="line">values = df_dsn[<span class="string">&#x27;Total&#x27;</span>] <span class="comment"># correponding values of categories</span></span><br><span class="line">colormap = plt.cm.coolwarm <span class="comment"># color map class</span></span><br><span class="line"></span><br><span class="line">create_waffle_chart(categories, values, height, width, colormap)</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-073601.png" alt="image-20191204153600860"></p><h3 id="2-10-Word-Clouds"><a href="#2-10-Word-Clouds" class="headerlink" title="2.10 Word Clouds"></a>2.10 Word Clouds</h3><p><code>Word</code> clouds (also known as text clouds or tag clouds) work in a simple way: the more a specific word appears in a source of textual data (such as a speech, blog post, or database), the bigger and bolder it appears in the word cloud.</p><p>Generate a word cloud for a given text document</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install wordcloud</span></span><br><span class="line">!conda install -c conda-forge wordcloud==<span class="number">1.4</span><span class="number">.1</span> --yes</span><br><span class="line"><span class="comment"># import package and its set of stopwords</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS</span><br><span class="line"></span><br><span class="line"><span class="comment"># download file and save as alice_novel.txt</span></span><br><span class="line">!wget --quiet https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/alice_novel.txt</span><br><span class="line"><span class="comment"># open the file and read it into a variable alice_novel</span></span><br><span class="line">alice_novel = <span class="built_in">open</span>(<span class="string">&#x27;alice_novel.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;File downloaded and saved!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove any redundant stopwords</span></span><br><span class="line">stopwords = <span class="built_in">set</span>(STOPWORDS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># instantiate a word cloud object</span></span><br><span class="line">alice_wc = WordCloud(</span><br><span class="line">    background_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    max_words=<span class="number">2000</span>,</span><br><span class="line">    stopwords=stopwords</span><br><span class="line">)</span><br><span class="line"><span class="comment"># add the words said to stopwords</span></span><br><span class="line">stopwords.add(<span class="string">&#x27;said&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># generate the word cloud</span></span><br><span class="line">alice_wc.generate(alice_novel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># resize the cloud so that we can see the less frequent words a little better</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">fig.set_figwidth(<span class="number">14</span>) <span class="comment"># set width</span></span><br><span class="line">fig.set_figheight(<span class="number">18</span>) <span class="comment"># set height</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display the cloud</span></span><br><span class="line">plt.imshow(alice_wc, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Shaping the <code>word</code> cloud according to the mask is straightforward using <code>word_cloud</code> package. For simplicity, we will continue using the first 2000 words in the novel.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download image</span></span><br><span class="line">!wget --quiet https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Images/alice_mask.png</span><br><span class="line"><span class="comment"># save mask to alice_mask</span></span><br><span class="line">alice_mask = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;alice_mask.png&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Image downloaded and saved!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># take a look at how the mask looks like</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">fig.set_figwidth(<span class="number">14</span>) <span class="comment"># set width</span></span><br><span class="line">fig.set_figheight(<span class="number">18</span>) <span class="comment"># set height</span></span><br><span class="line"></span><br><span class="line">plt.imshow(alice_mask, cmap=plt.cm.gray, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># instantiate a word cloud object</span></span><br><span class="line">alice_wc = WordCloud(background_color=<span class="string">&#x27;white&#x27;</span>, max_words=<span class="number">2000</span>, mask=alice_mask, stopwords=stopwords)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate the word cloud</span></span><br><span class="line">alice_wc.generate(alice_novel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display the word cloud</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">fig.set_figwidth(<span class="number">14</span>) <span class="comment"># set width</span></span><br><span class="line">fig.set_figheight(<span class="number">18</span>) <span class="comment"># set height</span></span><br><span class="line"></span><br><span class="line">plt.imshow(alice_wc, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-075236.png" alt="image-20191204155236461"></p><h3 id="2-11-Regression-Plots"><a href="#2-11-Regression-Plots" class="headerlink" title="2.11 Regression Plots"></a>2.11 Regression Plots</h3><p>Use seaborn to create a scatter plot with a regression line to visualize the total immigration from Denmark, Sweden, and Norway to Canada from 1980 to 2013.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create df_countries dataframe</span></span><br><span class="line">df_countries = df_can.loc[[<span class="string">&#x27;Denmark&#x27;</span>, <span class="string">&#x27;Norway&#x27;</span>, <span class="string">&#x27;Sweden&#x27;</span>], years].transpose()</span><br><span class="line"><span class="comment"># create df_total by summing across three countries for each year</span></span><br><span class="line">df_total = pd.DataFrame(df_countries.<span class="built_in">sum</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># reset index in place</span></span><br><span class="line">df_total.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># rename columns</span></span><br><span class="line">df_total.columns = [<span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;total&#x27;</span>]</span><br><span class="line"><span class="comment"># change column year from string to int to create scatter plot</span></span><br><span class="line">df_total[<span class="string">&#x27;year&#x27;</span>] = df_total[<span class="string">&#x27;year&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="comment"># define figure size</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># define background style and font size</span></span><br><span class="line">sns.<span class="built_in">set</span>(font_scale=<span class="number">1.5</span>)</span><br><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>)</span><br><span class="line"><span class="comment"># generate plot and add title and axes labels</span></span><br><span class="line">ax = sns.regplot(x=<span class="string">&#x27;year&#x27;</span>, y=<span class="string">&#x27;total&#x27;</span>, data=df_total, color=<span class="string">&#x27;green&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span>, scatter_kws=&#123;<span class="string">&#x27;s&#x27;</span>: <span class="number">200</span>&#125;)</span><br><span class="line">ax.<span class="built_in">set</span>(xlabel=<span class="string">&#x27;Year&#x27;</span>, ylabel=<span class="string">&#x27;Total Immigration&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Total Immigrationn from Denmark, Sweden, and Norway to Canada from 1980 - 2013&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-080530.png" alt="image-20191204160529566"></p><h2 id="3-Generating-Maps"><a href="#3-Generating-Maps" class="headerlink" title="3. Generating Maps"></a>3. Generating Maps</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># useful for many scientific computing in Python</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># primary data structure library</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Folium is a powerful Python library that helps you create several types of Leaflet maps. </span></span><br><span class="line"><span class="comment"># The fact that the Folium results are interactive makes this library very useful for dashboard building.</span></span><br><span class="line">!conda install -c conda-forge folium=<span class="number">0.5</span><span class="number">.0</span> --yes</span><br><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Folium installed and imported!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define the world map</span></span><br><span class="line">world_map = folium.Map()</span><br><span class="line"><span class="comment"># define the world map centered around Canada with a low / high zoom level</span></span><br><span class="line"><span class="comment"># world_map = folium.Map(location=[56.130, -106.35], zoom_start=4)</span></span><br><span class="line">world_map = folium.Map(location=[<span class="number">56.130</span>, -<span class="number">106.35</span>], zoom_start=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a Stamen Toner / Stamen Terrain / Mapbox Bright map of the world centered around Canada</span></span><br><span class="line"><span class="comment"># world_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles=&#x27;Stamen Toner&#x27;)</span></span><br><span class="line"><span class="comment"># world_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles=&#x27;Stamen Terrain&#x27;)</span></span><br><span class="line">world_map = folium.Map(tiles=<span class="string">&#x27;Mapbox Bright&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display map</span></span><br><span class="line">world_map</span><br></pre></td></tr></table></figure><h3 id="Maps-with-Markers"><a href="#Maps-with-Markers" class="headerlink" title="Maps with Markers"></a>Maps with Markers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># useful for many scientific computing in Python</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># primary data structure library</span></span><br><span class="line"><span class="keyword">from</span> folium <span class="keyword">import</span> plugins</span><br><span class="line"></span><br><span class="line">df_incidents = pd.read_csv(<span class="string">&#x27;https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Police_Department_Incidents_-_Previous_Year__2016_.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Dataset downloaded and read into a pandas dataframe!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># let&#x27;s start again with a clean copy of the map of San Francisco</span></span><br><span class="line">sanfran_map = folium.Map(location = [latitude, longitude], zoom_start = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the first 100 crimes in the df_incidents dataframe</span></span><br><span class="line">limit = <span class="number">100</span></span><br><span class="line">df_incidents = df_incidents.iloc[<span class="number">0</span>:limit, :]</span><br><span class="line"><span class="comment"># San Francisco latitude and longitude values</span></span><br><span class="line">latitude = <span class="number">37.77</span></span><br><span class="line">longitude = -<span class="number">122.42</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># instantiate a mark cluster object for the incidents in the dataframe</span></span><br><span class="line">incidents = plugins.MarkerCluster().add_to(sanfran_map)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loop through the dataframe and add each data point to the mark cluster</span></span><br><span class="line"><span class="keyword">for</span> lat, lng, label, <span class="keyword">in</span> <span class="built_in">zip</span>(df_incidents.Y, df_incidents.X, df_incidents.Category):</span><br><span class="line">    folium.Marker(</span><br><span class="line">        location=[lat, lng],</span><br><span class="line">        icon=<span class="literal">None</span>,</span><br><span class="line">        popup=label,</span><br><span class="line">    ).add_to(incidents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display map</span></span><br><span class="line">sanfran_map</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-083404.png" alt="image-20191204163404399"></p><h3 id="Choropleth-Map"><a href="#Choropleth-Map" class="headerlink" title="Choropleth Map"></a>Choropleth Map</h3><p>A <code>Choropleth</code> map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income. The choropleth map provides an easy way to visualize how a measurement varies across a geographic area or it shows the level of variability within a region. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df_can = pd.read_excel(<span class="string">&#x27;https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx&#x27;</span>,</span><br><span class="line">                     sheet_name=<span class="string">&#x27;Canada by Citizenship&#x27;</span>,</span><br><span class="line">                     skiprows=<span class="built_in">range</span>(<span class="number">20</span>),</span><br><span class="line">                     skipfooter=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Data downloaded and read into a dataframe!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">!conda install -c anaconda xlrd --yes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clean up the dataset to remove unnecessary columns (eg. REG) </span></span><br><span class="line">df_can.drop([<span class="string">&#x27;AREA&#x27;</span>,<span class="string">&#x27;REG&#x27;</span>,<span class="string">&#x27;DEV&#x27;</span>,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;Coverage&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># let&#x27;s rename the columns so that they make sense</span></span><br><span class="line">df_can.rename(columns=&#123;<span class="string">&#x27;OdName&#x27;</span>:<span class="string">&#x27;Country&#x27;</span>, <span class="string">&#x27;AreaName&#x27;</span>:<span class="string">&#x27;Continent&#x27;</span>,<span class="string">&#x27;RegName&#x27;</span>:<span class="string">&#x27;Region&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># for sake of consistency, let&#x27;s also make all column labels of type string</span></span><br><span class="line">df_can.columns = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, df_can.columns))</span><br><span class="line"><span class="comment"># add total column</span></span><br><span class="line">df_can[<span class="string">&#x27;Total&#x27;</span>] = df_can.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># years that we will be using in this lesson - useful for plotting later on</span></span><br><span class="line">years = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1980</span>, <span class="number">2014</span>)))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;data dimensions:&#x27;</span>, df_can.shape)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download countries geojson file</span></span><br><span class="line">!wget --quiet https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/world_countries.json -O world_countries.json</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;GeoJSON file downloaded!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">world_geo = <span class="string">r&#x27;world_countries.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a numpy array of length 6 and has linear spacing from the minium total immigration to the maximum total immigration</span></span><br><span class="line">threshold_scale = np.linspace(df_can[<span class="string">&#x27;Total&#x27;</span>].<span class="built_in">min</span>(),</span><br><span class="line">                              df_can[<span class="string">&#x27;Total&#x27;</span>].<span class="built_in">max</span>(),</span><br><span class="line">                              <span class="number">6</span>, dtype=<span class="built_in">int</span>)</span><br><span class="line">threshold_scale = threshold_scale.tolist() <span class="comment"># change the numpy array to a list</span></span><br><span class="line">threshold_scale[-<span class="number">1</span>] = threshold_scale[-<span class="number">1</span>] + <span class="number">1</span> <span class="comment"># make sure that the last value of the list is greater than the maximum immigration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># let Folium determine the scale.</span></span><br><span class="line">world_map = folium.Map(location=[<span class="number">0</span>, <span class="number">0</span>], zoom_start=<span class="number">2</span>, tiles=<span class="string">&#x27;Mapbox Bright&#x27;</span>)</span><br><span class="line">world_map.choropleth(</span><br><span class="line">    geo_data=world_geo,</span><br><span class="line">    data=df_can,</span><br><span class="line">    columns=[<span class="string">&#x27;Country&#x27;</span>, <span class="string">&#x27;Total&#x27;</span>],</span><br><span class="line">    key_on=<span class="string">&#x27;feature.properties.name&#x27;</span>,</span><br><span class="line">    threshold_scale=threshold_scale,</span><br><span class="line">    fill_color=<span class="string">&#x27;YlOrRd&#x27;</span>, </span><br><span class="line">    fill_opacity=<span class="number">0.7</span>, </span><br><span class="line">    line_opacity=<span class="number">0.2</span>,</span><br><span class="line">    legend_name=<span class="string">&#x27;Immigration to Canada&#x27;</span>,</span><br><span class="line">    reset=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display map</span></span><br><span class="line">world_map</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-083904.png" alt="image-20191204163904061"></p><h2 id="4-Assignment"><a href="#4-Assignment" class="headerlink" title="4. Assignment"></a>4. Assignment</h2><p>A survey was conducted to gauge an audience interest in different data science topics, namely:</p><ol><li>Big Data (Spark &#x2F; Hadoop)</li><li>Data Analysis &#x2F; Statistics</li><li>Data Journalism</li><li>Data Visualization</li><li>Deep Learning</li><li>Machine Learning</li></ol><p>The participants had three options for each topic: <strong>Very</strong> <strong>Interested</strong>, <strong>Somewhat interested</strong>, and <strong>Not interested</strong>. <strong>2,233</strong>respondents completed the survey.</p><p>The survey results have been saved in a csv file and can be accessed through this link: <a href="https://cocl.us/datascience_survey_data">https://cocl.us/datascience_survey_data</a>.</p><ul><li>Q1</li></ul><p>Use the <em>pandas</em> <strong>read_csv</strong> method to read the csv file into a <em>pandas</em> dataframe. One way to do that is to use the <em>index_col</em> parameter in order to load the first column as the index of the dataframe. Here is the documentation on the <em>pandas</em> <strong>read_csv</strong> method: <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;https://cocl.us/datascience_survey_data&#x27;</span>,index_col = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Data read into a pandas dataframe!&#x27;</span>)</span><br><span class="line">df.head()</span><br><span class="line"><span class="comment"># df.shape</span></span><br><span class="line"><span class="comment"># df.info()</span></span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-085254.png" alt="image-20191204165253351"></p><ul><li>Q2</li></ul><p>Use the artist layer of Matplotlib to replicate the bar chart below to visualize the <strong>percentage</strong> of the respondents’ interest in the different data science topics surveyed.</p><blockquote><p>To create this bar chart, you can follow the following steps:</p><ol><li>Sort the dataframe in descending order of <strong>Very interested.</strong></li><li>Convert the numbers into percentages of the total number of respondents. Recall that <strong>2,233</strong> respondents completed the survey. Round percentages to 2 decimal places.</li><li>As for the chart:</li></ol><ul><li>use a figure size of (20, 8),</li><li>bar width of 0.8,</li><li>use color #5cb85c for the <strong>Very interested</strong> bars, color #5bc0de for the <strong>Somewhat interested</strong> bars, and color #d9534f for the <strong>Not interested</strong> bars,</li><li>use font size 14 for the bar labels, percentages, and legend,</li><li>use font size 16 for the title, and,</li><li>display the percentages above the bars as shown above, and remove the left, top, and right borders.</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use the inline backend to generate the plots within the browser</span></span><br><span class="line">%matplotlib inline </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mpl.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sorting the values</span></span><br><span class="line">df_sr.sort_values([<span class="string">&#x27;Very interested&#x27;</span>], ascending=<span class="literal">False</span>, axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Taking the percentage of the responses and rounding it to 2 decimal places </span></span><br><span class="line">df_sr = <span class="built_in">round</span>((df_sr/<span class="number">2233</span>)*<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># View top 5 rows of the data </span></span><br><span class="line">df_sr.head()</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-090828.png" alt="image-20191204170827475"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plotting</span></span><br><span class="line">ax = df_sr.plot(kind=<span class="string">&#x27;bar&#x27;</span>, </span><br><span class="line">                figsize=(<span class="number">20</span>, <span class="number">8</span>),</span><br><span class="line">                rot=<span class="number">90</span>,color = [<span class="string">&#x27;#5cb85c&#x27;</span>,<span class="string">&#x27;#5bc0de&#x27;</span>,<span class="string">&#x27;#d9534f&#x27;</span>],</span><br><span class="line">                width=<span class="number">.8</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting plot title</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;Percentage of Respondents Interest in Data Science Areas&#x27;</span>,fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting figure background color</span></span><br><span class="line">ax.set_facecolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># setting legend font size</span></span><br><span class="line">ax.legend(fontsize=<span class="number">14</span>,facecolor = <span class="string">&#x27;white&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Removing the Border </span></span><br><span class="line">ax.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating a function to display the percentage.</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ax.patches:</span><br><span class="line">    ax.annotate(np.<span class="built_in">round</span>(p.get_height(),decimals=<span class="number">2</span>), </span><br><span class="line">                (p.get_x()+p.get_width()/<span class="number">2.</span>, p.get_height()), </span><br><span class="line">                ha=<span class="string">&#x27;center&#x27;</span>, </span><br><span class="line">                va=<span class="string">&#x27;center&#x27;</span>, </span><br><span class="line">                xytext=(<span class="number">0</span>, <span class="number">10</span>), </span><br><span class="line">                textcoords=<span class="string">&#x27;offset points&#x27;</span>,</span><br><span class="line">                fontsize = <span class="number">14</span></span><br><span class="line">               )</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-091058.png" alt="image-20191204171057689"></p><ul><li>Q3</li></ul><p>Create a Choropleth map to visualize crime in San Francisco.</p><blockquote><p>Before you are ready to start building the map, let’s restructure the data so that it is in the right format for the Choropleth map. Essentially, you will need to create a dataframe that lists each neighborhood in San Francisco along with the corresponding total number of crimes.</p><p>Based on the San Francisco crime dataset, you will find that San Francisco consists of 10 main neighborhoods, namely:</p><ol><li>Central,</li><li>Southern,</li><li>Bayview,</li><li>Mission,</li><li>Park,</li><li>Richmond,</li><li>Ingleside,</li><li>Taraval,</li><li>Northern, and,</li><li>Tenderloin.</li></ol><p>Convert the San Francisco dataset, which you can also find here, <a href="https://cocl.us/sanfran_crime_dataset">https://cocl.us/sanfran_crime_dataset</a>, into a <em>pandas</em> dataframe that represents the total number of crimes in each neighborhood.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read in the data set</span></span><br><span class="line">df_sfc = pd.read_csv(<span class="string">&#x27;https://ibm.box.com/shared/static/nmcltjmocdi8sd5tk93uembzdec8zyaq.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Dataset downloaded and read into a pandas dataframe!&#x27;</span>)</span><br><span class="line">df_sfc.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assigning a variable with the total counts of each Neighborhood</span></span><br><span class="line">df_neig= df_sfc[<span class="string">&#x27;PdDistrict&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assigning the values of the variable to a Pandas Data frame</span></span><br><span class="line">df_neig1 = pd.DataFrame(data=df_neig.values, index = df_neig.index, columns=[<span class="string">&#x27;Count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reindexing the data frame to the requirement</span></span><br><span class="line">df_neig1 = df_neig1.reindex([<span class="string">&quot;CENTRAL&quot;</span>, <span class="string">&quot;NORTHERN&quot;</span>, <span class="string">&quot;PARK&quot;</span>, <span class="string">&quot;SOUTHERN&quot;</span>, <span class="string">&quot;MISSION&quot;</span>, <span class="string">&quot;TENDERLOIN&quot;</span>, <span class="string">&quot;RICHMOND&quot;</span>, <span class="string">&quot;TARAVAL&quot;</span>, <span class="string">&quot;INGLESIDE&quot;</span>, <span class="string">&quot;BAYVIEW&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resetting the index</span></span><br><span class="line">df_neig1 = df_neig1.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assignming the column names</span></span><br><span class="line">df_neig1.rename(&#123;<span class="string">&#x27;index&#x27;</span>: <span class="string">&#x27;Neighborhood&#x27;</span>&#125;, axis=<span class="string">&#x27;columns&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># View the data frame</span></span><br><span class="line">df_neig1</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-091507.png" alt="image-20191204171507096"></p><ul><li>Q4</li></ul><p>Proceed with creating the Choropleth map.</p><blockquote><p>As you learned in the Choropleth maps lab, you will need a GeoJSON file that marks the boundaries of the different neighborhoods in San Francisco. In order to save you the hassle of looking for the right file, I already downloaded it for you and I am making it available via this link: <a href="https://cocl.us/sanfran_geojson">https://cocl.us/sanfran_geojson</a>.</p><p>For the map, make sure that:</p><ul><li>it is centred around San Francisco,</li><li>you use a zoom level of 12,</li><li>you use fill_color &#x3D; ‘YlOrRd’,</li><li>you define fill_opacity &#x3D; 0.7,</li><li>you define line_opacity&#x3D;0.2, and,</li><li>you define a legend and use the <strong>default threshold scale</strong>.</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load the packages for creating the Choropleth map</span></span><br><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read in the GeoJSON file</span></span><br><span class="line">geojson = <span class="string">r&#x27;https://cocl.us/sanfran_geojson&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the map centering San Fransico</span></span><br><span class="line">sf_map = folium.Map(location = [<span class="number">37.77</span>, -<span class="number">122.42</span>], zoom_start = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display the map</span></span><br><span class="line">sf_map.choropleth(geo_data=geojson,</span><br><span class="line">                  data=df_neig1,</span><br><span class="line">                  columns=[<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;Count&#x27;</span>],</span><br><span class="line">                  key_on=<span class="string">&#x27;feature.properties.DISTRICT&#x27;</span>,</span><br><span class="line">                  fill_color=<span class="string">&#x27;YlOrRd&#x27;</span>, </span><br><span class="line">                  fill_opacity=<span class="number">0.7</span>, </span><br><span class="line">                  line_opacity=<span class="number">0.2</span>,</span><br><span class="line">                  legend_name=<span class="string">&#x27;Crime Rate in San Francisco&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sf_map</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-12-04-092007.png" alt="image-20191204172006969"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Science</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Date-time Transformation in CSV file</title>
    <link href="/2019/11/27/datetime-format-tran-py/"/>
    <url>/2019/11/27/datetime-format-tran-py/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Sometimes we may face the problem that when loading data into a cloud database like IBM DB2 on Cloud, the format of date time in our CSV file does not fit the build-in formats in the platform, which leads to that we cannot load data successfully. If we cannot change the build-in formats in the platform, we should change the date format in our file instead. Below is how I try to solve this problem in Python program. </p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;Chicago_Crime_Data-v2.csv&#x27;</span>,header=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">    a = data.iloc[i][<span class="string">&#x27;DATE&#x27;</span>]</span><br><span class="line">    t = datetime.strptime(a, <span class="string">&quot;%m/%d/%Y %H:%M:%S %p&quot;</span>)</span><br><span class="line">    target_time = t.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S %p&quot;</span>)</span><br><span class="line">    <span class="comment">#print(target_time)</span></span><br><span class="line">    <span class="comment"># use &#x27;loc&#x27; to locate and change the original data</span></span><br><span class="line">    data.loc[i,<span class="string">&#x27;DATE&#x27;</span>] = <span class="built_in">str</span>(target_time)[<span class="number">0</span>:-<span class="number">3</span>]  <span class="comment"># not rewrite PM/AM back</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">    b = data.iloc[j][<span class="string">&#x27;UPDATEDON&#x27;</span>]</span><br><span class="line">    t = datetime.strptime(b, <span class="string">&quot;%m/%d/%Y %H:%M:%S %p&quot;</span>)</span><br><span class="line">    target_time = t.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S %p&quot;</span>)</span><br><span class="line">    <span class="comment">#print(target_time)</span></span><br><span class="line">    <span class="comment"># use &#x27;loc&#x27; to locate and change the original data</span></span><br><span class="line">    data.loc[j,<span class="string">&#x27;UPDATEDON&#x27;</span>] = <span class="built_in">str</span>(target_time)[<span class="number">0</span>:-<span class="number">3</span>]  <span class="comment"># not rewrite PM/AM back</span></span><br><span class="line">    </span><br><span class="line">data.to_csv(<span class="string">&#x27;Chicago_Crime_Data-v2.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior">Document of strptime and strftime</a></p><h2 id="Error-to-be-noticed"><a href="#Error-to-be-noticed" class="headerlink" title="Error to be noticed"></a>Error to be noticed</h2><p>AttributeError: Module ‘datetime’ has no attribute ‘striptime’</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-28-021808.png" alt="image-20191128101808202"></p><p><strong>Reason:</strong> </p><p>We did this: <code>import datetime</code> at the top of  the code. This means that we have to do this: <code>datetime.datetime.strptime()</code> to access the strptime method. Because that the people who made the <code>datetime</code> module also named their class <code>datetime</code>: <code>datetime.datetime.strptime(date, &quot;%Y-%m-%d&quot;)</code>. </p><p><strong>Solution:</strong></p><p>We should change the import statement from <code>import datetime</code> to this: <code>from datetime import datetime</code>.</p><p><em>OR</em></p><p>We could do this: <code>datetime.datetime.strptime()</code> without changing the <code>import datetime</code> statement. </p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PointSeg Notes</title>
    <link href="/2019/11/11/pointclouds-pointseg/"/>
    <url>/2019/11/11/pointclouds-pointseg/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-11-064523.jpg" alt="3D Point Clouds -2"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-11-064533.jpg" alt="3D Point Clouds -3"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-11-064545.jpg" alt="3D Point Clouds -4"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-11-064554.jpg" alt="3D Point Clouds -5"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-11-064600.jpg" alt="3D Point Clouds -6"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-11-11-064606.jpg" alt="3D Point Clouds -7"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Application Details</title>
    <link href="/2019/11/02/application-details/"/>
    <url>/2019/11/02/application-details/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Education-Background"><a href="#Education-Background" class="headerlink" title="Education Background"></a>Education Background</h2><ul><li>XMU</li></ul><p>BSc in Computer Science and Technology</p><p>Computer Vision</p><p>78.81</p><p>Spring Term 2019</p><ul><li>NCTU</li></ul><p>Exchange Program in Computer Science</p><p>Big Data Technology</p><h2 id="Awards-and-Professional-Qualifications"><a href="#Awards-and-Professional-Qualifications" class="headerlink" title="Awards and Professional Qualifications"></a>Awards and Professional Qualifications</h2><ul><li>1st place in the China Undergraduate Mathematical Contest in Modeling of Fujian province</li></ul><p>Name of Awarding Body: The Education Department of Fujian Province </p><p>Date of Award: 2017.12</p><p>Details of the Award(&lt;500): </p><p>CUMCM (Contemporary Undergraduate Mathematical Contest in Modeling; for Chinese students, the first “C” means China) is an annual contest for undergraduates all over the world, organized by CSIAM (China Society for Industrial and Applied Mathematics). </p><p>The role of the contest is to improve students’ understanding of mathematics, especially mathematical modeling and mathematical software, and to enhance students’ motivation for studying mathematics and to cultivate students’ creativity and overall ability. </p><p>In 2017, there are 1047 teams from Fujian Province participated in the China Undergraduate Mathematical Contest in Modeling and 158 teams were awarded 1st place, including my team. </p><ul><li>2nd place in the China Undergraduate Mathematical Contest in Modeling of Fujian province</li></ul><p>Date of Award: 2018.12</p><ul><li>3rd place of Xiamen University Contest on Robotic Innovations</li></ul><p>Name of Awarding Body: Xiamen University Academic Affairs Office</p><p>Date of Award: 2018.04</p><p>Details of the Award(&lt;500): </p><p>The Xiamen University Contest on Robotic Innovations was hosted by the Xiamen University Academic Affairs Office. Participants should finish the integrated design of the robotic car based on the Arduino platform. </p><p>In the competition we completed over 1,000 lines of code in Arduino and used the data returned from the infrared sensor to adjust the track in real-time. We carried out 15 times field tests and over 10 times of code optimization which enhanced the tracking accuracy and speed. Finally we won a 3rd place, ranking 4 out of over 10 teams. </p><ul><li>Academic Innovation Scholarship from Xiamen University</li></ul><p>Name of Awarding Body: Xiamen University Student Affairs Office</p><p>Date of Award: 2018.12</p><p>Details of the Award(&lt;500): </p><p>Rewarding outstanding students in academic competitions, science and technology competitions, academic research and innovations. </p><p>In 2018, there are 5 students awarded in my department.(5&#x2F;88)</p><ul><li>Volunteering Service Scholarship from Xiamen University Name of Awarding Body: Xiamen University Student Affairs Office</li></ul><p>Date of Award: 2018.12</p><p>Details of the Award(&lt;500): </p><p>Reward volunteers who participate in service activities, and have outstanding performances in volunteering. </p><ul><li>Successful Participant of the Mathematical Contest in Modeling(MCM&#x2F;ICM)</li></ul><p>Name of Awarding Body: the Consortium for Mathematics and Its Application</p><p>Date of Award: 2019.04</p><p>Details of the Award(&lt;500): </p><p>The Mathematical Contest in Modeling (MCM) is a multi-day mathematical modeling competition held annually in USA, during the first or second weekend in February, since 1985 by COMAP and sponsored by SIAM, the NSA, and INFORMS. It is distinguished from other major mathematical competitions such as Putnam by its strong focus on research, originality, teamwork, communication and justification of results. It runs concurrently with the Interdisciplinary Contest in Modeling(ICM).</p><p>或者</p><p>MCM is a multi-day mathematical modeling competition held annually in USA, strongly focusing on research, originality, teamwork, communication and justification of results.</p><ul><li>IEEE Student Membership</li></ul><p>Name of Awarding Body: IEEE</p><p>Date of Award: 2020.1.1</p><p>Details of the Award(&lt;500): </p><p>Recognize me as a Student Member in good standing, denoting a personal and professional commitment to the advancement of technology.</p><ul><li>IBM Data Science Certificate</li></ul><p>Name of Awarding Body: Coursera &#x2F; IBM</p><p>Date of Award:  2019.12.21</p><p>Details of the Award(&lt;500): </p><h2 id="Internships"><a href="#Internships" class="headerlink" title="Internships"></a>Internships</h2><ul><li>Ucar Inc.</li><li>7.1-8.30</li><li>Unit 431, Floor 4, Building C, Xiangyu Road, Xiamen, Fujian Province 361000, China</li></ul><p>Position Held: Algorithm Engineer</p><p>Job Duties(&lt;1000):</p><p>Applied the Mask-RCNN framework to process 3,000 car damage pictures, including scratch, deformation and indenture.</p><p>Optimized and released the car damage detection model for 3 versions, marked out damaged areas with 95% accuracy rate, and determined the amount of compensation due to car renters.</p><ul><li>Agriculture Bank of China</li><li>3.21-6.20</li><li>ABC Building,98–100 Jiahe Road, Siming District,  Xiamen, Fujian Province 361009, P.R. China</li></ul><p>Position Held: Information Technology Engineer</p><p>Job Duties(&lt;1000):</p><p>Graded selected corporate clients by utilizing Machine Learning technology, based on the cash flow and loan history of these clients, and adjusted credit limit by the grade of clients, saving the labor cost of 1.5 full-time employees.</p><h2 id="Additional-Information"><a href="#Additional-Information" class="headerlink" title="Additional Information"></a>Additional Information</h2><p>The experience of studying in the Asian world and the interactions with people from all over the world enabled me to more rationally look at the differences in ideas brought about by the different environments in which people grow up. I have experienced many changes in the learning environment such as changing my major, exchanging in Taiwan and having summer courses in Singapore. I can always adapt to the environment quickly and keep in touch with people around me. </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Su Songzhi</li></ul><p>Job Title and Position: Associate Professor</p><p>Institution and Department: Department of Artificial Intelligence</p><p>Referee’s Relationship with you: Supervisor</p><p>86+15980939316</p><p>Email Address: <a href="mailto:&#115;&#x73;&#x7a;&#x40;&#x78;&#109;&#117;&#46;&#x65;&#x64;&#117;&#x2e;&#x63;&#x6e;">&#115;&#x73;&#x7a;&#x40;&#x78;&#109;&#117;&#46;&#x65;&#x64;&#117;&#x2e;&#x63;&#x6e;</a></p><ul><li>Questions</li></ul><p><strong>(1)    How long and in what capacity have you known the applicant?</strong></p><p>I came to know Hu Bing in January 2019, when he and his teammates participated in the Mathematical Contest in Modeling under my guidance.</p><p><strong>(2)    What is your assessment of the applicant’s intellectual ability?</strong></p><p>Hu Bing was very intelligent. Take the contest as example, He was responsible for solving the problem of the allocation of materials in the drone container. It is a difficult three-dimensional problem, but Mr.Hu never hesitated to read a lot of related essays as well as modestly sought advice from me. In the end he flexibly applies the knowledge he gained when solving a 2D material allocation problem to deal with this 3D problem, which made the result surprisingly good.</p><p><strong>(3)What is your opinion of the applicant’s motivation towards and suitability for a career in the chosen field of study?</strong></p><p>We had several talks and Hu Bing shared with me his recent thoughts and his future planning. I could see his full preparatory work, his enthusiasm for knowledge and his urge for improvement. I think he is a person with innovative ideas and clearly plans for himself. In view of his extraordinary achievements in the university and his strong potential for future growth, I am firmly convinced that Hu Bing will make a successful graduate student.</p><p><strong>(4)What do you consider the most outstanding talents or characteristics of the applicant?</strong></p><p>He is a person with responsibility. When teamwork he always undertakes most of the hardest tasks. He is a good  team leader who can get every teammate’s trust.</p><p><strong>(5)What are the major areas for improvement of the applicant?</strong></p><p><strong>(6)Any additional statements you may wish to make about the applicant’s capacity for pursuing the program indicated above.</strong></p><ul><li>Defu Zhang</li></ul><p>Job Title and Position: Professor</p><p>Institution and Department: Department of Computer Science</p><p>Referee’s Relationship with you: Instructor</p><p>86+18959217108</p><p>Email Address: <a href="mailto:&#x64;&#x66;&#122;&#104;&#97;&#x6e;&#103;&#64;&#120;&#x6d;&#117;&#x2e;&#x65;&#x64;&#117;&#x2e;&#99;&#x6e;">&#x64;&#x66;&#122;&#104;&#97;&#x6e;&#103;&#64;&#120;&#x6d;&#117;&#x2e;&#x65;&#x64;&#117;&#x2e;&#99;&#x6e;</a></p><ul><li>Questions</li></ul><p>HKUST- Outstanding: 1 3 6 9 11 12</p><p><strong>(1)    How long and in what capacity have you known the applicant?</strong></p><p>I have known Hu Bing for about two years. He was a student of mine in my Algorithm course.</p><p><strong>(2)    What is your assessment of the applicant’s intellectual ability?</strong></p><p>He is very smart, and can always come up with an excellent ideas. He has strong potential for future growth.</p><p><strong>(3)What is your opinion of the applicant’s motivation towards and suitability for a career in the chosen field of study?</strong></p><p>His curiosity to information technology and his commitment to solving problems, make him a qualified candidate for your program.</p><p><strong>(4)What do you consider the most outstanding talents or characteristics of the applicant?</strong></p><p>He always keeps thirsty to knowledge, and never stop studying hard to achieve his goal. </p><p><strong>(5)What are the major areas for improvement of the applicant?</strong></p><p><strong>(6)Any additional statements you may wish to make about the applicant’s capacity for pursuing the program indicated above.</strong></p><h2 id="Reasons-for"><a href="#Reasons-for" class="headerlink" title="Reasons for"></a>Reasons for</h2><p>- </p><p>In my first year at Xiamen University majoring in Oceanography, I would never have thought that my fortuitous participation in the Contest of Robotic Innovations could greatly change my academic path. I witnessed the magical power of programming and data processing, turning my ideas into reality, which motivated me to go further study. With strong determination, I passed an exam that allowed me to change my major to computer science and technology. After two work experiences, I became extremely comfortable working with the companies’ various operations, processes, and data flows. More importantly, I learned how data science changes the way the enterprises’ functions operate, and how it is changing the way engineering is conducted. By attending programs in Singapore and Taiwan. I connected with the world and explored data science trends in the global market. This inspired me to greater efforts. My intentions are to stay in tune with the constant evolution of data science and to use it for the betterment of society. With so many rich learning experiences behind me, I am now keener to study in a city that is characterised by innovation and openness. As one of the fastest-growing cities in the world and a leading global technology hub, Shenzhen is my number one choice. The Chinese University of Hong Kong University, Shenzhen is a vibrant university with a soaring reputation in data science. The unique collegiate system, which enables students from various academic and cultural backgrounds to form a closer relationship with each other, is so attractive to me. Equipping students with methodologies and models for developing solutions to Big Data analysis in various areas, and focusing on both the study of professional knowledge and the cultivation of practical ability, the MSc in Data Science Programme (Big Data Analysis concentration) is definitely the best choice for me.</p><h2 id="Applying-for-NUS"><a href="#Applying-for-NUS" class="headerlink" title="Applying for NUS"></a>Applying for NUS</h2><h3 id="Questionaire"><a href="#Questionaire" class="headerlink" title="Questionaire"></a>Questionaire</h3><p><strong>1.Are you applying for any other graduate programme in NUS or any other Universities? If yes, please state: Programme(s) applying for and University.</strong></p><p>Yes, I also apply for the MSc in Industry 4.0 programme of NUS. </p><p><strong>2.Are you currently, or have you ever been, charged with or subject to disciplinary action for any type of misconduct, scholastic or otherwise, at any educational institution? If yes, please provide a full statement of relevant information and send us the relevant documents.</strong> </p><p>No, I haven’t.</p><p><strong>3.Have you previously applied for admission or been admitted to any graduate programme(s) at NUS or other institutions? If yes, please state: (a) Name of institution and programme applied for (b) Year of application (c) Outcome of application (Successful&#x2F;Unsuccessful) If your application was successful, please state: (d) Date of enrolment (e) Current status (Graduated&#x2F;Withdrawn&#x2F;Dismissed&#x2F;Current student) and (f) Source of funding</strong></p><p>No, I haven’t.</p><p><strong>4.If you are sponsored by a government, foundation or private agency, please identify the source of funding, provisions of funding and indicate whether the funding is confirmed. (Please submit a letter from the sponsor with details&#x2F;documentary proof of the sponsorship)</strong>* </p><p>I am not sponsored by a government, foundation or private agency. </p><p><strong>5.Are you a self-financed student? (If Yes, international applicants must submit documentary proof of their ability to support their study (e.g. a bank statement) indicating minimum amount (living expenses of S$40,000 per year, tuition and miscellaneous student fees) to sustain them for the normal duration of their programme.)</strong>* </p><p>My parents provide the financial support. </p><p> <strong>6.WORK EXPERIENCE: Please (a) state the total years of work experience in your current position and (b) describe your current position and major responsibilities</strong> </p><p>I am still a student, but I have interned in two companies for half a year totally. During the internship at Agricultural Bank of China as an information technology engineer, my responsibilities included extracting the cash flow and loan history of clients, and building a model that could generate their credit rating based on large amounts of data. During the internship at UCAR as an algorithm engineer, I processed the pictures of thousands of cars that were damaged in collisions and build a model to identify the various impacts and determine the amount of compensation due.</p><p><strong>7.Are you concurrently pursuing another graduate programme in NUS or other institution? If yes, please elaborate.</strong> </p><p>No, I am currently an undergraduate. </p><p>8.Are you a recipient of any of the following undergraduate scholarships from NUS? </p><p>No, I am not. </p><p><strong>9.MOTIVATION FOR APPLICATION AND CAREER GOALS</strong> </p><p><strong>9.1 Data Science and Machine Learning</strong></p><p>Data science is the most sexiest thing in the world. I have been studying data science by myself for more than one year. Since I major in computer science and technology, I do a lot of programming and data processing. I love to analyze problems with the help of data using methods like machine learning, neural network or any other ways. It is so charming to better know the world by processing data. I want to be a data scientist in the future. I want to make good use of data and make the world a better place. The curriculum of this programme is so attractive to me. I believe I can learn a lot from it and get closer to my dream job. </p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-01-22-132346.png" alt="image-20200122212345938"></p><p><strong>9.2 Industry 4.0</strong></p><p><strong>9.3 NTU - KM</strong></p><p>Work Assignment </p><p>2019-3 - 2019.6<br>I started my first internship as an information technology engineer at the Agricultural Bank of China in March 2019. My responsibilities included using the bank’s Taihang management system to extract the cash flow and loan history of clients, and building a model that could generate their credit rating based on large amounts of data. </p><p>2019.7 - 2019.8<br>I later interned as an algorithm engineer at UCAR, China’s largest online car rental platform. There, I applied the Mask R-CNN framework to process the pictures of thousands of cars that were damaged in collisions. After many model optimisations, we were able to identify the various impacts and determine the amount of compensation due. </p><p><strong>9.4 NUS ISS</strong></p><p><strong>project undertook in the last 5 years</strong></p><p>2017.07 Contest of Robotic Innovations at Xiamen University<br>My teammates and I completed the design of an intelligent car which processes the data returned by the sensor as well as realizes automatic tracking and obstacle counting. We won the third prize. </p><p>2017.09 China Undergraduate Mathematical Contest in Modelling<br>The problems we encountered was determining the optimal material-processing order. I took the lead and subdivided the problem into three sub-systems, including a time-management system, a scoring system and a decision-making system. We independently encoded each possible material-processing scheme, took the total processing time as the objective function, and used the idea of a genetic algorithm to quickly screen out the scheme with the fastest processing speed. We won first prize in the Fujian province section. I was awarded an Academic Innovation Scholarship for my endeavours.</p><p>2019.02-2019.06 Agriculture Bank of China – I.T. Engineer Intern<br>Graded selected corporate clients by utilizing Machine Learning technology, based on the cash flow and loan history of these clients, and adjusted credit limit by the grade of clients, saving the labour cost of 1.5 full-time employees.</p><p>2019.07- Exploring New Space Technologies and Applications<br>NUS - Innovation Design Programme. Designed the satellite model (including the hardware logic operations of the Inter-computer) used for automatically detecting shale gas leakages in the ground by processing data returned from the infrared sensor. Calculated the parameters interval in the normal operation of the satellite model to simulate satellite operations with an STK simulating system. </p><p>2019.07-2019.08 Ucar Inc. - Algorithm Engineer Intern<br>UCAR, Internet company, China’s largest online car rental platform. I applied the Mask R-CNN framework to process 3,000 car damage pictures, including scratch, deformation and indenture. Optimized and released the car damage detection model for 3 versions, marked out damaged areas with 95% accuracy rate, and determined the amount of compensation due to car renters. </p><p>2019.11-2019.12 Theater siting based on machine learning method<br>IBM Data Science Course Project. I used Google Maps API to query the detailed information of theatres in major cities in Taiwan. Then with the FourSquare plug-in, I obtained information about public facilities around each theatre and used it as features which could have influenced the popularity of each theatre. The popularity of each theatre, which could be represented by the number of comments to this theatre, was seen as the target of our model. After dataset splitting, feature engineering, machine learning model selecting, model fitting and a few times of model optimization, I got the model with the least mean square error on testing data. Then use this to predict the popularity of candidate locations and determine the final theatre siting.</p><p><strong>professional objectives</strong><br>Pursuing your programme helps me to sharpen my skills in pattern recognition and vision system design. I will learn more about how to build a high-quality intelligent system using state-of-the-art technologies. I could also be together with many of the most excellent partners and get guidance from the best intelligent systems experts in the world. After completing this programme, I will find a job in a company focusing on intelligent system designing like a self-driving car, and apply what I have learned into it. I would devote myself to the field of intelligent systems, become an expert and try my best to provide intelligent solutions for the transformation of traditional industries.</p><p><strong>Questionaire</strong></p><ol><li></li></ol><p>2.<br>78.8&#x2F;100</p><p>3.<br>Yes, I have applied for the MSc in Industry 4.0 programme as well.</p><p>4.<br>No, I have not.</p><p>5.<br>I am still an undergraduate and my current monthly gross salary is 0. My parents provide my living expenses.</p><p>6.<br>I have 5 months internship in IT industry. </p>]]></content>
    
    
    <categories>
      
      <category>Applying</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Life in Taiwan (2)</title>
    <link href="/2019/10/30/20191030/"/>
    <url>/2019/10/30/20191030/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Taipei"><a href="#Taipei" class="headerlink" title="Taipei"></a>Taipei</h2><ul><li>臺灣大學</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164226.jpg" alt="tNGsSf4URNithma3gpnKeg_thumb_2eb0"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164238.jpg" alt="UNADJUSTEDNONRAW_thumb_2ec2"></p><ul><li>臺北 101</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164434.jpg" alt="pzyjJKYgQOqwS4jjqO%xGg_thumb_2ea6"></p><ul><li>誠品書店</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164517.jpg" alt="UNADJUSTEDNONRAW_thumb_2ef4"></p><ul><li>饒河夜市</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164640.jpg" alt="UNADJUSTEDNONRAW_thumb_2eb8"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164631.jpg" alt="UNADJUSTEDNONRAW_thumb_2ec4"></p><ul><li>中正紀念堂&amp;自由廣場</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164835.jpg" alt="G1+OORTjT56VJ2HtNyUKDQ_thumb_2e7b"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164939.jpg" alt="UNADJUSTEDNONRAW_thumb_2e66"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165156.jpg" alt="7Dc95Nn7TbOus1sTmO0oKw_thumb_2e68"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-164952.jpg" alt="UNADJUSTEDNONRAW_thumb_2e73"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165023.jpg" alt="UNADJUSTEDNONRAW_thumb_2e7a"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165028.jpg" alt="UNADJUSTEDNONRAW_thumb_2e8f"></p><ul><li>西門町</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165116.jpg" alt="UNADJUSTEDNONRAW_thumb_2e62"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165131.jpg" alt="UNADJUSTEDNONRAW_thumb_2e8c"></p><ul><li>臺灣博物館</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165413.jpg" alt="UNADJUSTEDNONRAW_thumb_3633"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165501.jpg" alt="hkBEyGxFRUiZbuK0qwhI6g_thumb_3623"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165532.jpg" alt="hkBEyGxFRUiZbuK0qwhI6g_thumb_3623"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024007.jpg" alt="UNADJUSTEDNONRAW_thumb_3613"></p><h2 id="Taichung"><a href="#Taichung" class="headerlink" title="Taichung"></a>Taichung</h2><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165646.jpg" alt="kML2mt90RI6FiIli2OqY2A_thumb_30f8"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165716.jpg" alt="S6LA3kXGRuiVDahhupqg0g_thumb_30cb"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023242.jpg" alt="H2XKvIcWRKKbbu21Ybfw7w_thumb_30bc"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023301.jpg" alt="4BNIlWMqQ6OCx5r4SljfMQ_thumb_30da"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023322.jpg" alt="yaK4kr1oRlmiA2Qsy3sPXw_thumb_3097"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023618.jpg" alt="l4qvEXYgRtO7GMSPEOt5%Q_thumb_303b"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023627.jpg" alt="+%MuRENeQka%EmxmeZzCgA_thumb_2fd3"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023633.jpg" alt="EHbuufXyRem5vwzyUVLw6A_thumb_2fe5"></p><h2 id="Hsinchu"><a href="#Hsinchu" class="headerlink" title="Hsinchu"></a>Hsinchu</h2><ul><li>新竹轉運站</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-29-165310.jpg" alt="c3fOX+K5S9ypkFCwFy6v3Q_thumb_3105"></p><ul><li>內灣老街</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023738.jpg" alt="vgKqFat6SACbPYPYi1uOKQ_thumb_3191"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-023932.jpg" alt="AZMdmj6CRpmaFZVlr6AZnw_thumb_319f"></p><ul><li>城隍廟</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-030421.jpg" alt="UNADJUSTEDNONRAW_thumb_3676"></p><h2 id="Hualien"><a href="#Hualien" class="headerlink" title="Hualien"></a>Hualien</h2><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024142.jpg" alt="SnfgN16cSfGjdJCWjkG+Ow_thumb_31d1"></p><ul><li>原住民一條街</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024153.jpg" alt="A+%CBVIUS4ayXNYwy8UTWQ_thumb_31c2"></p><ul><li>七星潭</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024212.jpg" alt="5PxnjdGLQQeplVISd48KxQ_thumb_35c9"></p><ul><li>清水斷崖</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024354.jpg" alt="MOIjErNYSgSTKG3Vs2A4PA_thumb_3503"></p><ul><li>太平洋賞鯨&#x2F;海豚</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024441.jpg" alt="D36TJz6QROKleXEiLppHNQ_thumb_34a9"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-024554.jpg" alt="0mVenKLAR8SBp06EB7q3Qw_thumb_31b6"></p><h2 id="Green-Island"><a href="#Green-Island" class="headerlink" title="Green Island"></a>Green Island</h2><ul><li>Way to Green Island</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-025926.jpg" alt="UNADJUSTEDNONRAW_thumb_342b"></p><ul><li>綠島燈塔</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-030003.jpg" alt="1qUe2xeBQkmzHOxs9jzBxA_thumb_3396"></p><ul><li>牛頭山</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-030228.jpg" alt="gzFc51CJTbuXPBJHy%VH3g_thumb_3368"> </p><ul><li>朝日溫泉</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-30-030320.jpg" alt="seuIiyMKTjaqyIAl+ZL4%Q_thumb_3266"></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Travel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启·示</title>
    <link href="/2019/10/28/sayings/"/>
    <url>/2019/10/28/sayings/</url>
    
    <content type="html"><![CDATA[<h2 id="2021-01-26"><a href="#2021-01-26" class="headerlink" title="2021-01-26"></a>2021-01-26</h2><ul><li>当面临要么改变想法，要么证明无需这么做的选择时，绝大多数人都会忙于寻找证据。 – 约翰·肯尼斯·加尔布雷思</li></ul><h2 id="2020-05-17"><a href="#2020-05-17" class="headerlink" title="2020-05-17"></a>2020-05-17</h2><ul><li>冷静观察，稳住阵脚，沉着应付，韬光养晦，善于守拙，决不当头。 – 邓小平 “24字指示”</li></ul><h2 id="2020-05-02"><a href="#2020-05-02" class="headerlink" title="2020-05-02"></a>2020-05-02</h2><ul><li>中国人讲求实际，这一点突出体现在对待征服者的态度上。当异族君主赢得战争时，中国的官僚阶层会随之归顺，同时又游说征服者，他们刚刚征服的中国疆土幅员辽阔，文化独特，只能以中国人的方式、中国的语言和现有的中国官僚机构来统治。征服者一代代逐渐被同化到他们当初试图控制的秩序中。最终，他们的老家，即发动侵略的起始点，成了中国的一部分。征服者自己开始追求传统的中国国家利益——征服者反被征服。– 《论中国》基辛格</li></ul><span id="more"></span><h2 id="2020-02-15"><a href="#2020-02-15" class="headerlink" title="2020-02-15"></a>2020-02-15</h2><ul><li>War is peace. Freedom is slavery. Ignorance is strength. – George Orwell</li></ul><h2 id="2020-02-07"><a href="#2020-02-07" class="headerlink" title="2020-02-07"></a>2020-02-07</h2><ul><li><p>We are punished by our sins, not for them  –  Elbert Hubbard</p></li><li><p>水可载舟，亦可覆舟。 – 《荀子·王制》</p></li></ul><h2 id="2020-01-29-肺炎疫情有感"><a href="#2020-01-29-肺炎疫情有感" class="headerlink" title="2020-01-29 肺炎疫情有感"></a>2020-01-29 肺炎疫情有感</h2><ul><li><p>We learn from history that we do not learn from history. – Hegel</p></li><li><p>无知者无畏。</p></li></ul><h2 id="2020-01-06"><a href="#2020-01-06" class="headerlink" title="2020-01-06"></a>2020-01-06</h2><ul><li>Who controls the past controls the future. Who controls the present controls the past. – George Orwell</li></ul><h2 id="2019-10-30"><a href="#2019-10-30" class="headerlink" title="2019-10-30"></a>2019-10-30</h2><ul><li>实践是检验真理的唯一标准。</li></ul><h2 id="2019-10-29"><a href="#2019-10-29" class="headerlink" title="2019-10-29"></a>2019-10-29</h2><ul><li>We are all capable of believing things which we know to be untrue, and then, when we are finally proved wrong, impudently twisting the facts so as to show that we were right. – George Orwell</li></ul><h2 id="2019-10-28"><a href="#2019-10-28" class="headerlink" title="2019-10-28"></a>2019-10-28</h2><ul><li>如果你要人们认同和重视你的言论，你就必须在大家面对危机，水深火热的时候挺身而出。—- 李光耀</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reading&amp;Thinking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sayings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IELTS Writing Topics</title>
    <link href="/2019/10/21/ielts-writing-material/"/>
    <url>/2019/10/21/ielts-writing-material/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Advertising"><a href="#1-Advertising" class="headerlink" title="1. Advertising"></a>1. Advertising</h2><h3 id="Positives"><a href="#Positives" class="headerlink" title="Positives"></a>Positives</h3><ul><li>现代：Advertising is a key part of modern business. &#x2F; Advertising is a form of modern art. </li><li>消费者：Companies need to tell customs their products. &#x2F; People enjoy adverts. </li><li>多种选择：Advertisements inform us about the choices we have. &#x2F; Without advertising we would have less choice.</li><li>就业：Advertising is a creative industry that employs many people. &#x2F; Without advertising there would be higher unemployment.</li></ul><h3 id="Negatives"><a href="#Negatives" class="headerlink" title="Negatives"></a>Negatives</h3><ul><li>操纵：Advertising <strong>manipulates</strong> people. &#x2F; It aims to persuade people that buying a products will make them happier. &#x2F; We are persuade to follow the latest trends. </li><li>卖品牌：Advertisers focus on selling a brand image. &#x2F; They use glamorous, successful people. &#x2F; We are encouraged to associate certain brands with a higher status. </li><li>消费文化：We now lives in a consumer culture. </li><li>面向孩童：Advertisers often aim their marketing at children. &#x2F; Children can easily be influenced by advertisements. &#x2F; Children put pressure on parents to buy them things.</li></ul><h3 id="Opinions"><a href="#Opinions" class="headerlink" title="Opinions"></a>Opinions</h3><ul><li>规范：Advertising should be regulated.</li><li>关于孩子：Advertising aimed at children should be controlled or even banned. &#x2F; Unhealthy foods should not be marketed in a way that attracts children. </li><li>警告：Products that can be a risk to health should display warnings. &#x2F; Warnings must be displayed on cigarette packets. </li><li>不许电视出现：In some countries it is illegal to advertise cigarettes on television. </li><li>出现的必要性：However, advertising is necessary in free market economies.  &#x2F; It create demand for products. </li><li>政府：Government should only  censor false information or products that are harmful.</li></ul><h2 id="2-Animal-Rights"><a href="#2-Animal-Rights" class="headerlink" title="2. Animal Rights"></a>2. Animal Rights</h2><h3 id="For-Animal-Testing"><a href="#For-Animal-Testing" class="headerlink" title="For Animal Testing"></a>For Animal Testing</h3><ul><li>科学研究：Animals are used in important scientific research.</li><li>药物测试：It is necessary to do medical tests on new drugs.</li><li>Animal testing helps to advance medical and scientific knowledge. </li><li>Many important medical discoveries involved experimentation on animals. </li><li>致力减轻痛苦：Researchers aim to minimize the suffering that animals experience. </li><li>化妆品工业的禁止：Testing for the <strong>cosmetics</strong> industry is now banned in many countries.</li></ul><h3 id="Against-Animal-Testing"><a href="#Against-Animal-Testing" class="headerlink" title="Against Animal Testing"></a>Against Animal Testing</h3><ul><li>利润小于伤害：The benefits of research using animals do not justify the suffering caused. </li><li>可替代：There are alternative methods of research. </li><li>尊重动物：The lives of animals should be respected. </li><li>没有权利：Humans have no moral right to do experiments on animals.</li></ul><h3 id="For-Vegetarianism"><a href="#For-Vegetarianism" class="headerlink" title="For Vegetarianism"></a>For Vegetarianism</h3><ul><li>Vegetarians do not eat foods that are produced by killing animals. </li><li>道德或者健康原因：Many people choose a vegetarian diet for moral or health  reasons. &#x2F; Many people question the treatment of animals in factory farms.</li><li>健康饮食无需肉食：A healthy diet is possible without eating meat. &#x2F; It is unnecessary to kill animals for food.</li><li>降低患病风险：A vegetarian diet may reduce the risk of diseases like cancer.</li></ul><h3 id="Against-Vegetarianism"><a href="#Against-Vegetarianism" class="headerlink" title="Against Vegetarianism"></a>Against Vegetarianism</h3><ul><li>饮食不均衡：Vegetarians do not eat a balanced diet.</li><li>饮食传统：In many cultures, meat is the main ingredient in traditional meals. </li><li>食物链：Meat-eaters argue that animals are below humans in the food chain. &#x2F; It it completely natural for us to kill them for food.</li><li>改善耕作：Our aim should be to improve farming methods. &#x2F; Farms should produce organic food.</li></ul><h3 id="Positives-of-Zoos"><a href="#Positives-of-Zoos" class="headerlink" title="Positives of Zoos"></a>Positives of Zoos</h3><ul><li>动物保护：Zoos play an important role in wildlife conservation. &#x2F; They can help to protect endangered species. </li><li>科研者学习：Zoos allow scientists to study animals and their behavior.</li><li>教育、有趣：Zoos are educational, interesting and fun. &#x2F; Children, in particular, enjoy learning about animals.</li><li>就业：Zoos provide job opportunities.</li></ul><h3 id="Negatives-of-Zoos"><a href="#Negatives-of-Zoos" class="headerlink" title="Negatives of Zoos"></a>Negatives of Zoos</h3><ul><li>饲养环境：Zoo animals are kept in artificial environments. &#x2F; They are kept in cages or have limited space.</li><li>依赖人类失去自由：Zoo animals rely on humans. &#x2F; They lose the freedom to hunt for food.</li><li>应该保护栖息地：The best way to save endangered species is by protecting natural <strong>habitats</strong>. </li><li>不道德的、利用赚钱：Some people believe that zoos are <strong>unethical</strong>. &#x2F; Zoos exhibit animal with the aim of making money. &#x2F; We have no rights to use animals for entertainment and profit.</li></ul><h2 id="3-Cities"><a href="#3-Cities" class="headerlink" title="3. Cities"></a>3. Cities</h2><h3 id="Reasons-for-Urbanization"><a href="#Reasons-for-Urbanization" class="headerlink" title="Reasons for Urbanization"></a>Reasons for Urbanization</h3><ul><li>就业、生活条件高：People move to cities in search of job opportunities. &#x2F; Cities offer greater employment possibilities and a higher standard of living. </li><li>People migrate to cities from the countryside. </li><li>传统行业用人需求减少：Traditional activities like farming need fewer workers nowadays.</li></ul><h3 id="Negatives-of-City-Life"><a href="#Negatives-of-City-Life" class="headerlink" title="Negatives of City Life"></a>Negatives of City Life</h3><ul><li>Life in cities has its drawbacks.</li><li>生活成本：The cost of living is higher than in rural areas. </li><li>就业：Some people do not manage to find work.</li><li>住房：Housing is usually much more expensive. &#x2F; Homelessness and poverty are common in cities.</li><li>贫富差距：There is a gap between the rich and poor.</li><li>压力：Life in cities can be extremely stressful.</li><li>堵车、犯罪：There are problems like traffic congestion and crime.</li><li>社区感缺失：Cities lack a sense of community. &#x2F; People do not even know their neighbors. </li><li>『水泥丛林』：Cities are sometimes described as “concrete jungles”</li></ul><h3 id="Pedestrian-Areas"><a href="#Pedestrian-Areas" class="headerlink" title="Pedestrian Areas"></a>Pedestrian Areas</h3><ul><li>改善环境：Pedestrian zones in city center can improve the local environment. </li><li>鼓励低碳：Banning cars encourages people to walk or cycle. </li><li>自行车道：Many European cities have built bicycle lanes.</li><li>健康问题：Dependence on cars is linked to health problems like obesity. &#x2F; People who walk or cycle regularly are generally healthier. </li><li>安全受欢迎：Pedestrian areas are safer and more attractive for both residents and tourists.</li></ul><h2 id="4-Crime"><a href="#4-Crime" class="headerlink" title="4. Crime"></a>4. Crime</h2><h3 id="Police-and-Crime-Prevention"><a href="#Police-and-Crime-Prevention" class="headerlink" title="Police and Crime Prevention"></a>Police and Crime Prevention</h3><ul><li>抓捕罪犯、保障安全：The job of the police is to catch criminals. &#x2F; They must also prevent crime and make communities safer. </li><li>警员增加：There should be an increase in the number of police officers on the streets. </li><li>社区一部分：Police officers should be seen as part of the community. </li><li>参与教育和预防：They should be involved with education and prevention. &#x2F; The police should be in close contact with schools. &#x2F; They should focus on young people who have dropped out of school. These teenagers may become involved with gangs.</li></ul><h3 id="Punishments-x2F-Prisons"><a href="#Punishments-x2F-Prisons" class="headerlink" title="Punishments &#x2F; Prisons"></a>Punishments &#x2F; Prisons</h3><ul><li>Fines are used as punishment for minor crimes. If the crime is more serious, prison is the most common punishment.</li><li>Some criminals pose a threat to society. They are put into prison to ensure the safety of other citizens.</li></ul><h3 id="Negatives-of-Prisons"><a href="#Negatives-of-Prisons" class="headerlink" title="Negatives of Prisons"></a>Negatives of Prisons</h3><ul><li>罪犯聚集：Criminals are put together. They make friends with other offenders. </li><li>重犯罪：Many prisoners re-offend when they are released.</li><li>犯罪记录污点：A criminal record makes finding a job more difficult.</li></ul><h3 id="Rehabilitation"><a href="#Rehabilitation" class="headerlink" title="Rehabilitation"></a>Rehabilitation</h3><ul><li>改过自新：Another aim of prison is <strong>rehabilitation</strong>.</li><li>职业的训练：Prisoners receive education or <strong>vocational</strong> training. &#x2F; Prisoners should learn personal skills and specific job skills. </li><li>对比：Punishment could make prisoners’ behavior worse. Rehabilitation aims to make better citizens. Rehabilitated prisoners are less likely to re-offend.</li></ul><h3 id="Against-Capital-Punishment"><a href="#Against-Capital-Punishment" class="headerlink" title="Against Capital Punishment"></a>Against Capital Punishment</h3><ul><li>无辜者执刑：Innocent people could be wrongly convicted and executed. </li><li>犯罪率不一定降低：Crime rates are not necessarily reduced. &#x2F; Capital punishment is not a good deterrent. </li><li>Many criminals do not think they will be caught. </li><li>暴力文化：Executing prisoners creates a violent culture and encourages revenge. </li><li>We have no right to take another human life.</li></ul><h3 id="Community-Service"><a href="#Community-Service" class="headerlink" title="Community Service"></a>Community Service</h3><ul><li>改造罪犯：Community service is a way to reform offenders. &#x2F; It makes offenders useful in their local communities. &#x2F; They are required to clean streets or talk to school groups. &#x2F; Offenders repay their community. &#x2F; They avoid the negative influence that prison can have.</li><li>解决监狱问题：It could be a solution to prison overcrowding. &#x2F; It avoids the cost of imprisonment.</li></ul><h3 id="Against-Community-Service"><a href="#Against-Community-Service" class="headerlink" title="Against Community Service"></a>Against Community Service</h3><ul><li>并不足够：Community service is not a sufficient punishment. Criminals should be locked up, away from their victims.</li></ul><h3 id="Crime-in-the-Media"><a href="#Crime-in-the-Media" class="headerlink" title="Crime in the Media"></a>Crime in the Media</h3><ul><li>主要栏目：Crime is one of the main subjects of most programs.</li><li>媒体报道轰动的犯罪：The mass media focus on violent and sensational crimes. This leads to fear of crime among the public. &#x2F; Sensational stories attract more viewers or readers. The media report crime stories in order to increase their audience.</li></ul><h2 id="5-Education"><a href="#5-Education" class="headerlink" title="5. Education"></a>5. Education</h2><h3 id="Benefits-of-Education"><a href="#Benefits-of-Education" class="headerlink" title="Benefits of Education"></a>Benefits of Education</h3><ul><li>知识技能：Education gives people knowledge and skills.</li><li>工作：People with qualifications are more likely to find work. &#x2F; They can earn a higher salary. </li><li>社会：They can contribute positively to society.</li><li>学校培养：Schools aims to teach young people moral values such as tolerance and sharing. &#x2F; Schools prepare children to be members of a society.</li></ul><h3 id="Benefits-of-Studying-Abroad"><a href="#Benefits-of-Studying-Abroad" class="headerlink" title="Benefits of Studying Abroad"></a>Benefits of Studying Abroad</h3><ul><li>更好的课程：Foreign institutions may offer better courses.</li><li>Many students want to attend a prestigious university. </li><li>好的教师：The best universities employ teachers who are experts in their fields. </li><li>视野：Living abroad can broaden students’ horizons. &#x2F; Overseas students are exposed to different cultures and customs.</li><li>就业机会：Qualifications gained abroad can open the door to better job opportunities.</li></ul>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191017</title>
    <link href="/2019/10/17/20191017/"/>
    <url>/2019/10/17/20191017/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>香港問題以及其導致的一系列社會性、國際性問題，一直牽動著自己的神經。如果說曾經自己還能夠稍為理解返修例運動初期的民眾訴求，那麽現在那些大喊著要光復香港並向無辜大陸籍上班人士揮拳的人們，那些自己近幾年在牆外看到的顛倒黑白的報道，已經讓『自由』的字眼在我心中變了樣。</p><p>連續多年，香港都是世界上經濟自由度最高的地區。這一點吸引了足夠多的外資來港，讓香港成為『World City』，成為世界金融中心。北京政府在一國兩制的問題上，對香港給足了極大的自由度，『港人治港』一直都沒有改過。但是如果說還有什麼做的不夠好的地方，我覺得可能存在於香港的基礎教育問題上。現如今的香港課本上出現的將內地稱為『中國』，並且在描述的內容上往往是貶多於褒。我們需要思考，成長在這樣一片割讓給英國一百多年、二十二年前才迴歸祖國而且基礎教育仍然停留在英治時期的土地上的青年，究竟是否可能發展出對祖國、對中華民族的基本認同？在他們的心中，是否對『國家』的概念有過清楚的認識抑或是體會？除此之外，近些年來香港對於內地經濟的重要程度的相對降低、香港政府在住房等問題上的解決無力、经济绝对自由带来的贫富差距分化，這些情況都是香港問題的隱形炸彈，再加上英國撤出香港時或多或少留下的勢力、美國方面藉由香港限制中國的一系列手段等，返修例運動之後的大規模民眾暴亂其實是將來遲早會發生的事情，只是很不幸是在現在發生了，給香港造成了重創，給香港的未來蒙上了一層暗紗。</p><p>或許我們都或多或少地看到，世界上仍然有不少地方正在發出支持香港的聲音。我嘗試著去理解他們對言論自由的堅守，但我並不贊同他們屁股決定腦袋的無腦批判。言論絕對自由的結果是不受控制的造謠和污衊，如果不從焦點問題所在地區實際情況的角度去客觀分析，不去積極地瞭解問題的根源和發展，而只是站邊意識形態相近的一方並一味批判，所有的問題都扣上所謂『暴政』的帽子加以反對，那麽這樣不需要成本的批判都只是穿著民主自由外殼的低級情緒宣洩。</p><p>來台灣一個多月，我聽到了不少如上所說的聲音，當然也看到了一些確是在客觀分析問題的文章。試著和身邊的台灣同學溝通政治問題，給我感觸較深的在於在不同的環境下成長起來的兩岸青年，思考問題的方式確實存在微妙的不同。儘管持有並不相同的看法，對兩岸問題的認識存在些許的差異，但雙方都不會去刻意糾正對方。因為一個人的自我認同是僅僅伴隨著對家園故土的認同的，就好比無論走到世界上的什麼角落，無論自己會經歷什麼樣的變化，『我是中國人』是自己不會改變的認同，而這樣的觀念是建立在自己所受的家國教育的基礎之上的。所接受的家國教育的內容和程度上的差異，必然導致個人身份認同上的差異。根植在大腦深處的身份認同是難以被改變的，而強行去糾正不同於自己的聲音的後果很有可能是激烈的衝突或者是淡漠的疏遠。『求同存異』是難能可貴的，之所以這麽說是因為很多人以為的『求同存異』僅僅是站在了自己的角度上維護著自己的利益，卻沒能夠理解對方為什麼會產生不一樣的想法，沒能夠理解對方的需求、擔憂。</p><p>『連農牆』的興起讓人們有了表達意見的公共平台，我身邊的諸多連農牆都貼滿了學生的看法，其中多是對香港的聲援。我看遍那些言論，卻沒有任何能夠好好分析香港問題的，基本全都是將香港與台灣做類比強調其必須獨立自由、反大陸、呼喊著五大訴求的。我無法確認發表這些看法的人們到底是否真正瞭解香港問題的根源、是否真的有瞭解過政府對這個事件的處理、是否看到了一些失去理性的破壞行為，還是說他們只是選擇性忽略了示威者的過激行為，選擇性關注了他們抗爭的『合理性』。人只會相信自己願意相信的事情，只注意對自己有利的證據，甚至為了維護自己所堅持的立場而不容許對自己不利的聲音的出現。假若在支持『言論自由』、包容不同意見的牆上卻無法容許一句支持大陸的聲音的出現，那到底是誰的問題呢？很不幸的是，在這片我原本以為不同的聲音能夠得到極大的包容的土地上，我仍然看到了一些不理性的、因為連農牆上的不同的意見而選擇了激烈地發生衝突的個例。我希望這樣的事件僅僅是個別激進的青年的個人行為，因為單單是這樣的行為就足以給兩岸交流的整體大局造成不必要的創傷。</p><blockquote><p>‘’We are all capable of believing things which we know to be untrue, and then, when we are finally proved wrong, impudently twisting the facts so as to show that we were right…..’’</p><p>—— George Orwell (1946)</p></blockquote><p>身處時代的大潮中，我們正在經歷著波浪不斷的2019年，大大小小的事件牽動著我們緊張的神經。但是長久之後回首，或許我們現在所面對的這些問題，都只是歷史長河中不起眼的小浪花。香港問題以及兩岸關係，在眼下都是亟待改善的問題，但是要解決它們是需要極大的耐心和信心的。我們或許無法在政治的前線直接參與到決策之中，但求同存異，增進理解，已經是我們能夠做到的很難能可貴的事情了。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Software Development Models</title>
    <link href="/2019/10/05/software-development-models/"/>
    <url>/2019/10/05/software-development-models/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-10-05-080649.jpg" alt="model"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Life in Taiwan (1)</title>
    <link href="/2019/09/03/20190903/"/>
    <url>/2019/09/03/20190903/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-03-153808.jpg" alt="An1m88AiTyaUfiB0u3+EJA_thumb_2cd1"></p><p>来台首日，并不奔波的行程。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-03-153651.jpg" alt="rHiBaqcXQSC301KkGq4jUw_thumb_2cd2"></p><center>离开大陆</center>下了飞机之后并无陌生之感，湾湾人民的口音和闽南地区相似，给人亲切的感觉，若不是随处可见的繁体字，真的会觉得还在大陆。拿行李的时候竟然发现自己的行李被错拿，另一个人的行李箱和我的一模一样，联系了服务台，他们很热情地为我处理。这是我第一次近距离和湾湾人进行有效沟通，感觉他们的态度真的很棒，虽说我还没有拿到行李，但是和他们的聊天过程也让自己忘记了这事的烦恼。好在拿错行李的人（后来才知道是同来交换的福大同学）并没有出机场，于是顺利拿到行李箱，并在外面找到了等候的接机同学。（交大的接机旗子还真的挺醒目的，陆联会和两岸会同学们也穿着黄马甲方便我们辨认，点赞）<p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-03-153826.jpg" alt="UNADJUSTEDNONRAW_thumb_2cce"></p><center>交大的接机同学</center>接机的大巴一路来到学校，从桃园机场到交大半小时以内的车程，路上的景象有些许的『新农村』之感，并没有多少高楼大厦，更像是农业小镇。来了学校之后，这两天也都没有出过校园（有穿过交清小径去到清华大学的校园，不得不感慨两校的关系真的是太微妙了）。<p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-03-153851.jpg" alt="UNADJUSTEDNONRAW_thumb_2d01"></p><center>只是一条10米不到的小桥</center><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-02-27-023503.png" alt="image-20200227103502575"></p><center>清大校内的书店</center>湾湾人民给人的第一感觉是很礼貌，饭堂的店家、7-11的店员、宿舍管理员，大家会热情地和你交谈，7-11的店员还会和我开开玩笑，挺有意思的。特别要点名表扬的当然是负责交换生事项安排的薛乃绮老师了，薛小姐真的是好负责任，对学生很用心，而且聊天的时候和我们完全没有距离的感觉。<p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-02-13-005534.png" alt="image-20190910214330014"></p><center>交大十二舍，旧旧的</center>交大是湾湾的工科强校，台湾三大之一（台大，交大，清华）。大陆的工科强校几乎有一个共同点，那就是学校比较旧……没错，交大的建筑整体都偏旧，没有很新的楼。宿舍虽然也旧，但其实设施都很齐全，饮水机、自助打印机、自助售卖机、洗衣房，虽说不是独立卫浴，但是公共卫浴间是分开的，感觉也比较干净有秩序，很赞的一点在于厕所和洗浴间都有无障碍的独间，人性关怀值得表扬。入住之前就听说，交大的宿舍网速是全台湾最快（因为全台网络资源节点在新竹科技园，而交大用的就是新竹科技园的网路），自己用上了之后，不禁感叹名副其实：网页秒开、下载飞速、视频无需缓冲时间……体验极佳，虽说应该比不上5G的惊为天人，但是已经让我感到了满满的诚意。<p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-02-13-005644.png" alt="image-20190910214720083"></p><center>马云爸爸真给力</center><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-02-27-023543.png" alt="image-20200227103542771"></p><center>湾湾的车牌</center><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2020-02-27-023605.png" alt="image-20200227103605380"></p><center>篮球校队在训练，同行的学长已经成功打入内部</center>交大的生态环境虽说比不上厦大，但是从无处不在的松鼠/鸽子，在饭堂附近或者草地上睡觉的慵懒温顺的狗子们，就不难看出这里人和自然的和谐。这两天已经撸了两条狗子了，希望我能撸到更多。<p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-03-154724.jpg" alt="UNADJUSTEDNONRAW_thumb_2d10"></p><p>两天好快，明天就要参加新生培训咯，和大的大家正式认识，有些激动和紧张。祝自己好运吧！</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-03-155319.jpg" alt="20190903新竹夕阳"></p><center>今晚的夕阳</center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Travel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IELTS Speaking Notes</title>
    <link href="/2019/08/09/ielts-speaking/"/>
    <url>/2019/08/09/ielts-speaking/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h2><h5 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h5><ul><li><p>流利度、连贯性</p></li><li><p>词汇资源</p></li><li><p>语法广度与准度</p></li><li><p>发音</p></li></ul><h5 id="Tips"><a href="#Tips" class="headerlink" title="- Tips"></a>- Tips</h5><ol><li>很多问题的答案，考官不Care，内容不重要，说下去就是了，不要没话可讲</li><li>语调的高低起伏很重要</li><li>Part 2 每一个小点尽可能多说，最后一点说不到没有关系</li><li>能扩展就扩展，不能就自信停下</li></ol><p>回答参考格式：</p><ul><li>观点：回答之前先出声(Ummmm)</li><li>原因：原因不要太长、没有原因就直接具体（表述、现象、陈述事实、举例）——I don’t know(why), but… &#x2F; I have no idea(why), but… &#x2F; I don’t have a clue, but…</li><li>具体：时间 &#x2F; 地点 &#x2F; 人物 &#x2F; 事件 &#x2F; 感受 <ul><li>数字：把描述性的形容词比如热、远，用数字具象出来<ul><li>40 degrees， 300 meters away …… ;</li></ul></li><li>降级：<ul><li>Music -&gt; Hip Hop -&gt; Kris Wu; Fruit -&gt; Apple -&gt; Red Apple; </li><li>hand out -&gt; chat -&gt; talk about …</li><li>you can see ads everywhere -&gt;  on TV, Internet, subway station -&gt; in the office building where I work, every time I go to the bathroom, I can see an ad in my left.</li></ul></li><li>列举：列举了几个东西之后就可以挑出其中一个继续讲，最好不要有太多痕迹;</li></ul></li><li>总结</li></ul>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IELTS Writing Notes</title>
    <link href="/2019/08/09/ielts-writting/"/>
    <url>/2019/08/09/ielts-writting/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="Tips"><a href="#Tips" class="headerlink" title="-Tips"></a>-Tips</h3><ol><li><p>将题目中抽象性的概念细化</p><p>In many  countries schools have severe problems with student behavior.</p><ul><li>Severe problems? —— school bullying, violence, cheeting, absence…</li></ul></li><li><p>对于two-question问题，如果只有一个原因，不要试图去编</p></li></ol><h3 id="一、论文核心段的扩展"><a href="#一、论文核心段的扩展" class="headerlink" title="一、论文核心段的扩展"></a>一、论文核心段的扩展</h3><h4 id="Topic-Sentence的基本原则"><a href="#Topic-Sentence的基本原则" class="headerlink" title="Topic Sentence的基本原则"></a>Topic Sentence的基本原则</h4><ul><li>与题目紧密相关，一般来自原题观点改写或者稍微向下细化</li><li>TS的扩展必须要自己有把握，否则凉凉</li><li>大部分情况下TS只会引出一个具体的idea，然后针对这个idea进行扩展，但有时候方向给得宽，能引出2个以上的分论点，主要是为了字数或者回应题目的要求。</li><li>方案1：     <u><em><strong>TS(一般是一个影响或者结果) + 原因解释&#x2F;降层解释&#x2F;进一步的结果&#x2F;对比解释&#x2F;举例 + 如果需要可以重复TS。可以只用其中一种扩展方法，也可以2-3种组合使用。—— 由自己来决定组合</strong></em></u></li><li>（TS）吸烟最大的问题就是导致健康威胁 —— （原因解释）因为烟里里面含有很多有害物质比如尼古丁和焦油 —— （进一步的结果）因此那些长期吸烟的人比起那些不吸烟的人有着更高的几率患上肺癌<ul><li>My translation: The biggest problem of smoking is that it does harm to our health. Because there are varieties of poisonous substances in cigarette such as Nicotine, so people who smoke for a long time are more likely to suffer lung cancer than those who do not smoke.</li></ul></li><li>（TS&#96;网络购物的好处）Another significant advantage is that the buyer can have more control over the process.  —— （降层解释：价格，时间，压力）Price comparison websites make it easier to find bargains, shopping can be done at any time of the day or night, and shopper can browse for as long as they like without pressure from sales assistants. —— （进一步的结果）This means that the shoppers can become more astute(精明的) and knowledgeable about the products they are buying. （对应压力）Because of the greater competition involved in trading within a large market, sellers may have to improve the quality of their products. （对应价格）</li><li>成年以后享受到的最大的好处就是自由：（降层）因为成年人从父母家中搬出来，所以他们可以自己生活；开始挣钱，经济变得更加的独立；这意味着他们可以攒几个月的钱买一双鞋子balabala……（对比）这样的乐趣就是小孩子所不能得到的</li><li>方案2：   TS是一个笼统的方向，引出2-3个分论点</li></ul><h5 id="一個典型的overweight問題"><a href="#一個典型的overweight問題" class="headerlink" title="一個典型的overweight問題"></a>一個典型的overweight問題</h5><p>很多政府鼓励商业和企业从市中心搬到周围的小地方，你认为这么做带来的好处多于坏处吗？——典型的overweight的题目，只需要这么做的 <strong>坏处:好处为1:2</strong> 就可以了</p><ul><li>如果是从企业方向进入的话，会很难写，因为一些专业的名词自己不熟悉</li></ul><p>好处：1. 减少市中心压力； 2. 促进小地方的发展</p><p>坏处：给人们的通勤带来不便</p><h5 id="连接词：顺势连接词、逻辑连接词"><a href="#连接词：顺势连接词、逻辑连接词" class="headerlink" title="连接词：顺势连接词、逻辑连接词"></a>连接词：顺势连接词、逻辑连接词</h5><p>顺势连接词对行文帮助非常小：for instance, because, such as</p><h5 id="替换同义词最好的方法就是细化！"><a href="#替换同义词最好的方法就是细化！" class="headerlink" title="替换同义词最好的方法就是细化！"></a><u>替换同义词最好的方法就是细化！</u></h5><p>如果你不知道如何去替换privacy，为什么不换成语境当中相关的细化词汇呢？Your email, your phone number, your ……</p><h5 id="自我练习"><a href="#自我练习" class="headerlink" title="- - - - - 自我练习 - - - - -"></a>- - - - - 自我练习 - - - - -</h5><h6 id="互聯網的使用導致隱私威脅-——-原因解釋-舉例解釋"><a href="#互聯網的使用導致隱私威脅-——-原因解釋-舉例解釋" class="headerlink" title="互聯網的使用導致隱私威脅 —— 原因解釋+舉例解釋"></a><u>互聯網的使用導致隱私威脅</u> —— 原因解釋+舉例解釋</h6><p>On the other hand, these benefits do have a potential cost with regard to loss of privacy. This is because that when using the software or surfing on the website, we usually have to give our phone numbers or birth dates in order to obtain the complete service. But once we give out our personal information there’s not much we can do to prevent the software owners from using our privacy in some unknown ways. For example, users of Facebook seem happy to reveal the identities of their friends and families, as well as their daily activities, even though this private information is stored without protection. If it fell into the wrong hands, it could be a real threat to people’s privacy. </p><h6 id="鼓勵學生給老師評分-——-原因解釋-舉例解釋"><a href="#鼓勵學生給老師評分-——-原因解釋-舉例解釋" class="headerlink" title="鼓勵學生給老師評分 —— 原因解釋+舉例解釋"></a>鼓勵學生給老師評分 —— 原因解釋+舉例解釋</h6><p>Encouraging students to criticize or grade their teachers contributes to improving teaching quality. This is partly because complaints from the former help the latter to become aware of the <strong>defects</strong> in their teaching methods. For example, if <strong>a large proportion of</strong>  students complain about the difficulty of math classes, the math teacher should <strong>improve the situation</strong> by making more necessary explanation or <strong>slowing down the pace of learning</strong>. Apart from that, <strong>as important decisions including merit(有價值的) reviews, pay raises, and promotions are based on these evaluations</strong>, teachers must treat <strong>feedback</strong> carefully and do everything possible to make improvements in their teaching, such as spending more time helping students with their homework.</p><h6 id="早上學對孩子的好處-——-原因解釋-對比"><a href="#早上學對孩子的好處-——-原因解釋-對比" class="headerlink" title="早上學對孩子的好處 —— 原因解釋+對比"></a>早上學對孩子的好處 —— 原因解釋+對比</h6><p>Another advantages of going to school at an early age is that children develop faster socially. They make friends and learn how to get on with other children of a familiar age. This is often not possible for children who stay at home because they are the only child, or their brothers of sisters are older or younger.</p><h6 id="翻譯1-不同年齡有不同的消費習慣"><a href="#翻譯1-不同年齡有不同的消費習慣" class="headerlink" title="翻譯1 - 不同年齡有不同的消費習慣"></a>翻譯1 - 不同年齡有不同的消費習慣</h6><p>It is hard to deny that people in different ages have different shopping habits. (This is often because that) as growing up, people’s need and interest changes which leads to their money flowing to totally different goods or services. For example, children pay all their pocket money for snacks and toys, while teenagers start to seek fashion, buy fashionable shoes and clothes. Money of middle-aged is mainly used to improve the quality of life such as buying bigger houses and better cars, while older people are only willing to pay for health-related products. </p><h6 id="翻譯2-在家工作效率低"><a href="#翻譯2-在家工作效率低" class="headerlink" title="翻譯2 - 在家工作效率低"></a>翻譯2 - 在家工作效率低</h6><p>Working at home is usually regarded ineffective. This is because that there exists too much distraction and interference which makes it an impossible thing to focus on what you are doing. For example, if you have pets or kids in your house, you will definitely have to spend some precious time to be in company with them, otherwise the kids would feel lonely and the pets would be unhappy, which makes things worse. </p><h6 id="穩定的心態對體育比賽的作用-——-降層解釋-舉例"><a href="#穩定的心態對體育比賽的作用-——-降層解釋-舉例" class="headerlink" title="穩定的心態對體育比賽的作用 —— 降層解釋+舉例"></a>穩定的心態對體育比賽的作用 —— 降層解釋+舉例</h6><p>On the other hand, it is believed that a good mentality, to a great extent(在很大程度上), determines the results of sport competitions. <strong>More specifically</strong>, athletes aiming at winning medals must be able to stay calm throughout a game or not easily give it up even in an uphill battle. <strong>One of the most obvious examples of this is</strong> the shooting competition where the ability to focus on the target without being affected by the crowds is far more important than the physical strength.</p><h6 id="網絡購物的好處-——-降層解釋-進一步的結果"><a href="#網絡購物的好處-——-降層解釋-進一步的結果" class="headerlink" title="網絡購物的好處 —— 降層解釋+進一步的結果"></a><u>網絡購物的好處</u> —— 降層解釋+進一步的結果</h6><p>Another significant advantage is that the buyer can have more control over the process. Price <strong>comparisons</strong> websites make it easier to find bargains, shopping can be done at any time of the day or night, and shoppers can browse for as long as they like without <del>the</del> pressure from the sales assistants. (進一步的結果)This means that the shoppers can become more astute and knowledgable about the products they are buying. Because of the greater competition involved in trading within a large market, sellers may have to improve the quality of their products, which is also beneficial to the shoppers. </p><h6 id="翻譯3-家長對孩子的影響"><a href="#翻譯3-家長對孩子的影響" class="headerlink" title="翻譯3 - 家長對孩子的影響"></a>翻譯3 - 家長對孩子的影響</h6><ul><li>如何翻譯『不得不承認』？</li></ul><p>We have to admit that, parents greatly influent their children. More specifically, parents <del>build up</del>  <strong>shape</strong> 塑造 their children’s <del>character</del> <strong>personality</strong> 性格, <del>living habits</del> lifestyle 生活習慣, and values 價值觀. For example, if parents spend their spare time on reading rather than playing computer games or browsing social networks, their kids will also <del>grow</del> develop the habit of reading instead of being addicted to <strong>the</strong> virtual world. </p><h6 id="為什額越來越少的人選擇騎車出行？——-年代對比"><a href="#為什額越來越少的人選擇騎車出行？——-年代對比" class="headerlink" title="為什額越來越少的人選擇騎車出行？—— 年代對比"></a>為什額越來越少的人選擇騎車出行？—— 年代對比</h6><p>Another cause is that a greater variety of means of transport are available to daily  commuters(通勤者) today. <strong>In the past</strong>, riding a bicycle was the main choice for people to go to work or for fun. <strong>Nowadays</strong>, however, people living in cities and towns can have a wider range of choices, <strong>including</strong> (more bus lines, underground railways, taxies and even the Uber service). Any of these is more efficient and comfortable than cycling so this traditional way of transport <strong>has been losing popularity</strong>. </p><h6 id="互聯網的最大好處-——-只有舉例"><a href="#互聯網的最大好處-——-只有舉例" class="headerlink" title="互聯網的最大好處 —— 只有舉例"></a>互聯網的最大好處 —— 只有舉例</h6><ul><li>留學生思鄉問題，患病者相互支持</li></ul><p>The greatest advantage of internet is that it makes communication much easier between people. For example, when study abroad, international students could be less <strong>bothered by</strong> the problem of homesickness, as they are enabled by instant communication softwares, such as FaceTime, to talk with their families on a daily basis. In addition, people suffering from the same disease would be able to establish an online community where they can share inspiring stories of fighting against the disease as well as useful information for recovery.</p><h6 id="簡單的生活方式有利於解決環境問題-——-只有舉例"><a href="#簡單的生活方式有利於解決環境問題-——-只有舉例" class="headerlink" title="簡單的生活方式有利於解決環境問題 —— 只有舉例"></a>簡單的生活方式有利於解決環境問題 —— 只有舉例</h6><ul><li>減少廢氣排放；節省衣服材料，減少回收成本</li></ul><p>It is evident that living a simple life makes great contribution to solving environmental problems (or combating environmental challenges). For example, if people choose to spend holidays at home reading books rather than having a trip abroad, they will help reduce the greenhouse gases <strong>emitted</strong> by the flights and vehicles used during their journeys. <strong>Similarly</strong>, instead of <strong>pursuing the latest fashion trend</strong>, people who purchase clothes and shoes <em><strong>moderately 適度地</strong></em> contribute to saving the resources  used for production and reducing the amount of rubbish. </p><h6 id="科技有助於保留傳統生活方式-——-只有舉例"><a href="#科技有助於保留傳統生活方式-——-只有舉例" class="headerlink" title="科技有助於保留傳統生活方式 —— 只有舉例"></a>科技有助於保留傳統生活方式 —— 只有舉例</h6><ul><li>遠程教學使得島民無需離開便可接受教育；食材製作技術的流通保證存活</li></ul><p>Technology can positively contribute to the keeping of traditional skills and ways of life. For example, the populations of some islands are too small to have normal schools. Rather than breaking up families by sending children to the mainland, <strong>education authorities</strong> have been able to use the Internet to <strong>deliver schooling online</strong>. In addition, the Internet, and modern refrigeration techniques, are being used to keep alive the traditional skills of producing salmon, because it can now be ordered fro, and delivered to, anywhere in the world. </p><h6 id="媒體帶來的文化訊息-——-只有舉例"><a href="#媒體帶來的文化訊息-——-只有舉例" class="headerlink" title="媒體帶來的文化訊息 —— 只有舉例"></a>媒體帶來的文化訊息 —— 只有舉例</h6><ul><li>書籍雜誌瞭解千里之外的人們生活飲食習慣；</li></ul><p>On the one hand, I admit that <strong>getting acquainted with</strong> the culture of different places across the world has become incredibly easy with the help of media. For example, there are thousands of books and magazines, such as <em>Lonely Planet</em>, vividly picturing how people live their daily lives in a city thousands of miles away from the reader. Information about their food traditions and festival celebrations can be accessed at almost no cost of time and money. <strong>In a similar way</strong>, watching movies brings viewers close to a lifestyle totally different from their own. Indian movies, for example, let people know how important singing and dancing is to the Indian.</p><h3 id="二、議論文題型分類大全"><a href="#二、議論文題型分類大全" class="headerlink" title="二、議論文題型分類大全"></a>二、議論文題型分類大全</h3><p>一篇議論文一般有2-3個核心段，具體有幾個是由題型決定。題目一定要多看，然後根據題目來寫出 Topic Sentence。</p><p><u>TR：Task Response —— 迴應兩個東西：題型迴應、限定詞迴應</u></p><h4 id="題型1：Discuss-both-views-and-give-your-opinion"><a href="#題型1：Discuss-both-views-and-give-your-opinion" class="headerlink" title="題型1：Discuss both views and give your opinion"></a>題型1：<u>Discuss both views</u> and <u>give your opinion</u></h4><p>（題外話：這題看起來就像是培養領導力）</p><h5 id="1-介紹段"><a href="#1-介紹段" class="headerlink" title="1. 介紹段"></a>1. 介紹段</h5><p>两句话：首句改写题目 + 观点句（观点句写法详见下文）</p><p>介紹段首句的模板：</p><blockquote><ul><li><strong>Opinions are divided</strong> on whether the internet has made life easier, or may threaten our privacy.</li><li><strong>The argument over</strong> whether learning at home or at school is better for children <strong>has not been settled yet</strong>. </li><li>Modern cities <strong>are faced with the dilemma of</strong> using their limited land resources to build high-rise low-rise buildings. </li><li>People <strong>have different views with regard to the question of</strong> how to make our roads safer. </li><li>People have different opinions about whether paying taxes is the only civic duty they should take. </li><li>上句還有一種寫法就是寫出來自題目的事實或者觀點A&#x2F;B之間共通的事實</li><li>In almost every country, citizens are required by law to pay their fair share of taxes.</li><li>類似的還有：</li><li>Teachers are expected to be skillful at teaching and guiding students not only academically but also morally. </li><li>Many young people have to face a dilemma of whether to start to work as early as possible or continue their education in a university after graduate from high school.</li></ul></blockquote><h5 id="2-兩個核心段：寫的是別人的看法！"><a href="#2-兩個核心段：寫的是別人的看法！" class="headerlink" title="2. 兩個核心段：寫的是別人的看法！"></a>2. 兩個核心段：<u>寫的是別人的看法！</u></h5><p>A為什麼這麽想，B為什麼那麽想</p><ul><li>注意，在寫核心段的TS的時候，要<u>籠統</u>一點。比如：支持通宵給電的同學們認為這能夠有助於他們的學習和生活。然後接下來再去細化到底是如何對他們的學習和生活h有促進作用的。（從生活的角度來說，這會讓他們更加舒適balabala；從學習的角度來說，有的同學深夜的學習效率更高balabala）</li></ul><h5 id="3-結尾段：寫自己的看法。"><a href="#3-結尾段：寫自己的看法。" class="headerlink" title="3. 結尾段：寫自己的看法。"></a>3. 結尾段：<u>寫自己的看法</u>。</h5><p>可以偏向一方。可以結合兩者，提出新的觀點和建議。一定要有詳細和清晰的個人觀點，不要支支吾吾或者觀點模糊不清。即便說『取決於』都是可以的，但是千萬不要表現出毫無主見的樣子。</p><h5 id="清晰的個人觀點是考察的重點！！！"><a href="#清晰的個人觀點是考察的重點！！！" class="headerlink" title="清晰的個人觀點是考察的重點！！！"></a><u><strong>清晰的個人觀點是考察的重點！！！</strong></u></h5><p>個人觀點裏面必須體現A和B之間的關係，這也決定了核心段的展開順序。</p><p>個人觀點的三種情況： </p><ul><li>兩個觀點一強一弱：雖然……但是……<ul><li>比如：有人認為應該主動聯繫外星人，有人認為不應該。我自己持有的觀點是主動聯繫外星人很危險……</li><li>Firstly……Also……Finally……</li><li>核心的兩段先寫弱的，再寫強的</li><li><u><em>結尾段首先強化自己偏向的觀點，重複原因；然後再用『雖然……但是……』或者別的方法來弱化自己不偏向的觀點。</em></u></li></ul></li></ul><blockquote><p>Q: </p><p>Some people believe that teaching children at home is best for a child’s development while others think that it is important for children to go to school. Discuss the advantages of both methods and give your own opinion. </p><p>A:</p><p>The argument over whether learning at home or at school is better for children has not been settled yet. Whereas home education offers better protection with individual learning and opportunities for families to bond, schools have a superior range of material and human resources. Ultimately (最終), I think the school experience is best for children.</p><p>( - - -1 spend more time with parents; 2 individualized learning environment; 3 protect children from bad influence - - - ) </p><p>There are several advantages for children who learn at home. Firstly, they can spend more time with their parents. Many social problems are associated with (同……聯系起來) families not spending enough quality time together. Teaching children at home also provides them with an <strong>individualized</strong> learning environment. Instruction (教導) is custom designed and moves at the child’s own pace and <strong>in accordance with(按照)</strong> his or her individual learning style. Finally, home schooling protects children from bullies and others who might be a bad influence.</p><p>( - - - 1 learn how to cope with socialized things; 2 better tuition; 3 better access to physical resources - - - )</p><p>On the other hand, the school environment also offers advantages for children. Schools encourage children to socialize with their peers and learn how to cope with gossip, bullying and peer pressure. In addition, children will <strong>receive better tuition</strong> across a range of <strong>disciplines</strong>, as schools have teachers who are trained in special subjects. What is more, schools provides <strong>better access to physical resources</strong> such as sports equipment, musical instruments and library books. </p><p>I believe that children are better off (處境更好) in a school environment, because of the range of <strong>expertise</strong> and resources that schools offer <strong>cannot be matched</strong> in the home. Although family time and  individual learning are important, children taught at home may encounter severe problems.</p></blockquote><ul><li><p>兩個觀點共存，缺一不可</p><ul><li><u><em>介紹段的觀點句：</em></u></li></ul><blockquote><ul><li><p>I believe that rules and freedom <strong>play equally important roles</strong>, so they should <strong>co-exist</strong> in the growth of every child.</p></li><li><p>I believe that <strong>the joint effort of</strong> the government and individuals is the key to <strong>eradicating</strong>(杜絕) environmental problems. </p></li><li><p>I believe that <strong>a combination of</strong> skyscrapers and houses <strong>is an ideal strategy of</strong> city planning. </p></li><li><p>I believe that <strong>both</strong> punishments and other measures <strong>should be used together to</strong> make roads safer.</p></li></ul></blockquote><ul><li>結尾段先重複個人觀點，然後強調兩者各自的重要性<ul><li>In my opinion, balabala…… In short, only by combining … and … can ……</li></ul></li></ul></li><li><p>『取決於』—— 要寫這個的話需要有明確的劃分標準</p><ul><li>比如：有人認為成年人應該跟著老師在班級裏學一些生存技能，有的人認為他們應該自己學。我認為這取決於他們學習的是什麼技能：簡單的自學就可以，複雜的甚至危險的需要跟著學習來保證安全和高效，比如學開車。</li></ul></li></ul><h4 id="題型2：Two-Questions"><a href="#題型2：Two-Questions" class="headerlink" title="題型2：Two Questions"></a>題型2：<u>Two Questions</u></h4><ul><li>原因 + 解决方案<ul><li>一般两个原因两个解决方案</li></ul></li><li>原因 + 有何影响<ul><li>练：全世界的城市越来越相似（分析原因之前首先将相似这个词细化具体化：生活习惯全球化，商品全球化，高楼大厦的建筑需求全球化）（我认为这是不好的发展趋势。1 传统手工艺没有被选择bala；2 旅游业受到冲击， culture identity 文化辨识度下降）</li></ul></li><li>原因 + 会不会有改变</li><li><strong>带来什么问题 + 如何解决问题</strong></li></ul><h5 id="分析原因的原则"><a href="#分析原因的原则" class="headerlink" title="分析原因的原则"></a>分析原因的原则</h5><ul><li>不能只局限在中国</li><li>客观的出发点，要有证据别乱感慨</li><li>如果有比较级，要通过<strong>年代对比</strong>来找到原因</li></ul><h5 id="用来写原因的Topic-Sentence"><a href="#用来写原因的Topic-Sentence" class="headerlink" title="用来写原因的Topic Sentence"></a>用来写原因的Topic Sentence</h5><ul><li>The first reason for the shortage of young teachers is that a teaching job pays poorly. </li><li>The first reason why bicycle riding is no longer popular is that people today have much more choices for transportation.</li><li>In addition, the increase in the amount of rubbish <strong>is also a result of</strong> people using more disposable(一次性的) products.</li><li>It is true that poor health of the general population is associated with people’s bad eating habits.</li></ul><h5 id="Report类型的介绍段（从原文找新的主语）"><a href="#Report类型的介绍段（从原文找新的主语）" class="headerlink" title="Report类型的介绍段（从原文找新的主语）"></a>Report类型的介绍段（从原文找新的主语）</h5><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-133115.png" alt="image-20190910213115226"></p><p><strong>Poor student behavior</strong> seems to be an increasingly widespread problem in many countries. I think that modern lifestyles are probably responsible for this. Parents and schools should be responsible for solving this problem. —— 提前总结型过渡：预告了原因和解决。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-133413.png" alt="image-20190910213413410"></p><p>The number of crimes committed by children and teenagers has been increasing. I think that there could be several reasons why this is happening and that the younger criminals should be punished depending on what they have done. —— 空话型过渡</p><p>There has been an increase in the number of crimes committed by children and teenagers. I think that the cause of this are poor parenting and media influence.  —— 提前总结型过渡</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-133905.png" alt="image-20190910213904591"></p><p>Formal educational qualifications are believed to be more important than life experiences and personality traits when a company is <strong>recruiting</strong> new staffs. This criterion of choosing employees can be explained by the following reasons and from my point of view, it is a positive development for both job seekers and companies. —— 空话型过渡</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-134238.png" alt="image-20190910214237519"></p><p>Many countries across the world are faced with the problem of obesity. I think that unhealthy lifestyles of today’s people are responsible for this problem. —— 提前总结型过渡</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-135207.png" alt="image-20190910215206990"></p><p>Sometimes, people who travel  internationally have prejudice against the country they visit. I think that tourist’s prejudice is mainly caused by cultural differences. —— 提前总结型过渡</p><p>​    </p><h5 id="Report类型的核心段-原因-解决方案版本"><a href="#Report类型的核心段-原因-解决方案版本" class="headerlink" title="Report类型的核心段(原因+解决方案版本)"></a>Report类型的核心段(原因+解决方案版本)</h5><h6 id="行文结构"><a href="#行文结构" class="headerlink" title="行文结构"></a>行文结构</h6><ol><li><strong>首段直接改写原题，不需要背景引出</strong>（考察改写能力）+ 承上启下（可以只预告第一个问题也可以两个问题都预告）</li><li>第一个原因分析（idea + support）</li><li>第二个原因分析（idea + support）Another cause is that…</li><li>（因为…很严重&#x2F;因为做某事很重要）…… <u><em>so measures should be taken to</em></u> ……解决方案1 +(so that)结果，解决方案2 + (In this way)结果</li><li>总结重复原因&#x2F;解决方案</li></ol><ul><li>例题1</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-09-125925.png" alt="image-20190909205925614"></p><p>限定词：fewer and fewer —— <u><em>说明接下来描述的两个原因都必须体现出年代上、时间上的变化</em></u> —— 因此『骑车很慢』并不能成为一个合理的解释 —— 而『空气污染越来也严重所以骑车等于慢性自杀』这一个理由也不太好，因为这相对比较中国化，没有世界普适性</p><p>Owning a bicycle snd using it frequently seems to be much less popular today. I believe that the growth in the size of cities and the advanced modern transport system are the main <u>reasons</u> for this. </p><p>The first reason why riding bicycles is no longer popular is that cities have been growing bigger. This means that the distance between home and destinations has become much <u>farther</u>. If people keep the habit of cycling, then they will find it really time-consuming and energy-consuming. When they finally get to the school or office, they will probably feel exhausted and can hardly concentrate on their work or study. </p><p>Another reason is that a greater variety of means of transport are available to daily <u>commuters</u> today. In the past, riding a bicycle was the main choice for many people to go to work or for fun. Today, however, people living in cities and towns can have a <u>wider</u> range of choices, including bus lines, underground railways, taxis and even the Uber service. Any of these is more efficient and comfortable than cycling and therefore this traditional way of transport has been losing popularity. </p><p>It is important to remember that riding a bike is <strong>beneficial</strong>(用来引出后面的measures) for both the individual and society, so measures should be taken to encourage people to be more active in this choice. Firstly, the government could build <strong>special lanes</strong> for cyclists, so that they can ride safely and quickly. In addition, subsidies(补贴) should be provided to people who pay close attention to the price of bicycles. In this way, more people would be able to afford a bike that they like. </p><p>In conclusion, although the development of modern cities has led to a decreasing number of people traveling by bicycle, I believe that measures mentioned above could effectively <u>reverse this situation.</u></p><p>回顾上文：介绍并承上启下+原因1+原因2+解决方法1和2+结尾段</p><ul><li>例题2</li></ul><p>（来自英国考官Liz。文章应该要教会我们：不要浪费题目信息！！！）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-09-141525.png" alt="image-20190909221525044"></p><p>没有比较级，不用写年代变化</p><p>关键信息：when graduating from high school。高中毕业之前去做什么了使得没有管理金钱的能力？高中毕业之前只在：家和学校，这两个地方待着。在家：父母没有让孩子接触到很多关于财务的知识；在学校：学校缺乏相关教育。</p><h5 id="Report类型的核心段-原因-有何影响版本"><a href="#Report类型的核心段-原因-有何影响版本" class="headerlink" title="Report类型的核心段(原因+有何影响版本)"></a>Report类型的核心段(原因+有何影响版本)</h5><h6 id="行文结构-1"><a href="#行文结构-1" class="headerlink" title="行文结构"></a>行文结构</h6><ol><li><strong>首段直接改写原题，不需要背景引出</strong>（考察改写能力）+ 承上启下（<u><em>最好两个问题都预告</em></u>）</li><li>第一个原因分析（idea + support）</li><li>第二个原因分析（idea + support）Another cause is that…</li><li>过渡句——To my knowledge, there are 完全取决于你自己（好坏&#x2F;虽然…但是…）</li><li>总结（重复原因&#x2F;影响）</li></ol><ul><li>例题</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-015200.png" alt="image-20190910095159807"></p><h5 id="Report类型的核心段-问题-解决方案版本"><a href="#Report类型的核心段-问题-解决方案版本" class="headerlink" title="Report类型的核心段(问题+解决方案版本)"></a>Report类型的核心段(问题+解决方案版本)</h5><h6 id="行文结构-2"><a href="#行文结构-2" class="headerlink" title="行文结构"></a>行文结构</h6><ol><li><strong>首段直接改写原题，不需要背景引出</strong>（扩充或者缩减原题）+ 承上启下（<u><em>我认为这会导致……的问题，他们能够被解决</em></u>）</li><li>第一个问题扩展（idea + support）</li><li>第二个问题扩展（idea + support）Another cause is that…</li><li>针对这两个问题提出解决方案</li><li>总结（问题+解决）</li></ol><ul><li>例题</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-020841.png" alt="image-20190910100840984"></p><p>There has been a significant rise in living standards of people in many countries, such as better education quality and smaller income disparity(差异). However, it seems that such improvements are mostly enjoyed by urban dwellers rather than those living in the countryside, which, in my opinion will result in many undesirable outcomes for both cities and rural areas. </p><p>As urban lives keep becoming <strong>increasingly appealing</strong>, an overwhelmingly(压倒性地) large number of people will be drawn to cities either in search of <strong>more employment opportunities</strong> or seeking <strong>superior level of medical care services.</strong> This will definitely <u>pose(构成) tremendous(极大的) pressure on both locals and new comers of big cities</u>, <em>such as</em> <u>rising in living costs, frustrating(烦人的) traffic congestion(拥堵), and intense(强烈的) competition for jobs.</u>  —— 对城市地区的影响</p><p>As for rural areas, the problems caused are also significant. To be specific, there will be a severe shortage of labour force working in agricultural industry, with too many people migrating from villages to towns and cities. As a result, farming land would be left uncultivated(未耕作的) and crop yields would significantly decline, possibly followed by a rise in food prices nationwide. —— 对农村地区的影响</p><p>I think that, therefore, <strong>measures should be taken to narrow the gap of</strong> life quality between urban and rural areas. Firstly, <strong>tax reduction and exemption</strong> could be a possible solution to the problem of <u>labour drain</u>(劳动力流失). <em>In other words</em>, both individuals and business would choose to stay if there is such a favorable (preferential) policy. Secondly, the government could also make people willing to stay where they were born and grew up by <strong>improving local living conditions</strong>, such as <strong>budgeting more money towards education and health services</strong>. </p><p>In conclusion, the problems caused by the disparity between cities and villages are concerning people of both places. They can only be solved if the government takes more responsibilities to closing the gap. </p><h5 id="Report类型的结尾段"><a href="#Report类型的结尾段" class="headerlink" title="Report类型的结尾段"></a>Report类型的结尾段</h5><p>类型1：直接重复总结前面的内容</p><p>In conclusion, unhealthy eating habits and sedentary lifestyles have caused the rise in obesity. Solutions to this problem lie with the government which could take measures above to improve the level of health among the general population.</p><p>类型2：升华……</p><p>In conclusion, measures proposed above should be taken to minimize  the adverse effects of increasing juvenile delinquency. <strong>This is no longer a problem for individual families, but the society as a whole.</strong></p><p>​    </p><h4 id="題型3：To-what-extent-do-you-agree-or-disagree"><a href="#題型3：To-what-extent-do-you-agree-or-disagree" class="headerlink" title="題型3：To what extent do you agree or disagree?"></a>題型3：<u>To what extent do you agree or disagree?</u></h4><p>——真正的议论文争辩所在</p><p>核心段只能 <u><em>讲解<strong>自己的</strong>观点或者陈述事实</em></u> ，<u><em><strong>绝对不要</strong></em></u>花大量笔墨去讨论别人的看法！！！！！！！</p><ul><li><p>1 - 改写题目，提出自己的观点——不赞同居多</p></li><li><p>2 - 为什么有人会赞同？分析原因。——往往是出题者的用意所在</p></li><li><p>3 - 直接陈述自己的深层看法</p></li><li><p>4 - 简单重述自己的观点</p></li></ul><p><strong><em><u>三种可能的个人观点：</em></u></strong></p><h6 id="1-Completely-agree"><a href="#1-Completely-agree" class="headerlink" title="1. Completely agree"></a>1. Completely agree</h6><p> —— 出现概率低，因为题目中常有极端限定词</p><ul><li>改写观点，然后表达完全赞同</li><li>赞同理由1</li><li>赞同理由2</li><li>（赞同理由3）</li><li>In conclusion, 重复自己的观点</li></ul><h6 id="2-Completely-disagree"><a href="#2-Completely-disagree" class="headerlink" title="2. Completely disagree"></a>2. Completely disagree</h6><ul><li>改写观点，然后表达完全不赞同</li><li>不赞同理由1</li><li>不赞同理由2</li><li>（不赞同理由3）</li><li>In conclusion, 重复自己的观点</li></ul><h6 id="3-一分为二-partly-agree"><a href="#3-一分为二-partly-agree" class="headerlink" title="3. 一分为二, partly agree"></a>3. <strong><u>一分为二, partly agree</u></strong></h6><p>—— 最常见。尽可能是一个明确的个人观点，要求比较高的掌控力。</p><p><strong>两种一分为二的情况：</strong></p><ul><li><p>（虽然我承认……但是我认为……）—— 必须确认题目能不能被<strong>分出清晰的两部分</strong>，一部分对一部分错</p></li><li><p>（我认为是否应该……取决于……）—— 不要乱用，要确保有<u><strong>明确的划分标准</strong></u></p></li></ul><p><strong><u>段落结构：</u></strong></p><ul><li>介绍段：改写陈述题目观点。I believe that 一句话写出清晰的观点，用前面提到的两种一分为二情况</li><li>核心段1： It is true that … &#x2F; I accept that … &#x2F; I admit that … </li><li>核心段2： However &#x2F; Nevertheless , I would argue that 开始做出补充或者选择</li><li>结尾段： In conclusion, 重复自己的观点和看法</li></ul><h6 id="Eg"><a href="#Eg" class="headerlink" title="Eg"></a>Eg</h6><p>1</p><p>有人认为找工作时候工资最重要，你多大程度上认同或者不认同？</p><p>答：我认为这**<u>取决于</u>**个人对于金钱的敏感程度&#x2F;经济上的金钱需求。balabala</p><p>—— 不推荐的写法：我认为工资很重要，但是其他的几种也很重要。不推荐的原因是因为题目中只讲到了工资，没有提到其他的什么因素，所以就只需要绕着工资重要不重要去讨论就可以了。</p><p>2</p><p>互联网是人类历史上**<u>最</u>**伟大的发明，你多大程度上认同或者不认同？</p><p>答：我不赞同这个观点。（然后举出两个比互联网更重要的发明来进行对比论证说明）（不推荐写自己不擅长的东西比如电、火）（可以写：疫苗vaccine——生命比娱乐更重要；骑车火车飞机——现代的交通方式更加刚需； ）</p><p>—— 不推荐的写法：承认互联网的伟大，但不是最伟大的。这样子去承认他的伟大，实际上会让我们的反驳显得很没有力气。</p><p>—— 同样推荐的<strong>取决于</strong>写法：我认为这取决于互联网对不同的人的重要性。对于依靠互联网求生的人来说，他们一分一秒也不能离开；而对于那些老年人，互联网无足轻重，比如娱乐，他们看电视更多，比如获取信息，他们倾向于看报纸。</p><p>3</p><p>要求学生参加团队体育活动是最好的方法来教会他们与人合作</p><p>答：我认为这<strong>取决于</strong>对体育活动的热爱程度。…… 因此我认为体育活动只对一部分孩子来说是最好的方法来培养团队意识。 </p><p><u>总结：题目中如果出现了带『最』字的描述，推荐『反驳型』或者『取决于型』写法</u></p><p>​    </p><h6 id="介绍段的可能性"><a href="#介绍段的可能性" class="headerlink" title="介绍段的可能性"></a>介绍段的可能性</h6><ol><li>改写原题观点+自己的观点 —— 最常用</li><li>事实背景+改写原题观点+自己的观点 —— 容易重复词汇</li><li>事实背景+自己的观点 —— 难度最大</li></ol><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-152147.png" alt="image-20190910232129611"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-152149.png" alt="image-20190910232147338"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-152307.png" alt="image-20190910232252491"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-152309.png" alt="image-20190910232306880"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-09-10-152338.png" alt="image-20190910232337742"></p><h4 id="重要的7个核心段"><a href="#重要的7个核心段" class="headerlink" title="重要的7个核心段"></a>重要的7个核心段</h4><h5 id="1-互联网的最大好处"><a href="#1-互联网的最大好处" class="headerlink" title="1. 互联网的最大好处"></a>1. 互联网的最大好处</h5><p>The greatest advantages of the internet is that it makes communication much easier between people. For example, when studying abroad, international students would not be bothered by the problem of homesickness, as they are enabled by instant communication tools, such as FaceTime, to talk with their families on a daily basis. In addition, people suffering from the same disease are able to establish an online community where they can share inspiring stories of fighting disease as well as useful information for recovery.</p><h5 id="2-简单的生活有助于环保"><a href="#2-简单的生活有助于环保" class="headerlink" title="2. 简单的生活有助于环保"></a>2. 简单的生活有助于环保</h5><p>It is evidence that living a simple life makes great contributions to combating environmental challenges. For example, if people choose to spend their holidays at home reading a classic novel rather than having a trip abroad, they will help reduce the greenhouse gases emitted by the flights and vehicles used during their journeys. Similarly, instead of pursuing the latest fashion trend, people who merely purchase the moderate number of clothes and shoes positively contributes to saving the resources used for production and reducing the amount of rubbish. </p><h5 id="3-文化商业化带来的坏处"><a href="#3-文化商业化带来的坏处" class="headerlink" title="3. 文化商业化带来的坏处"></a>3. 文化商业化带来的坏处</h5><p>Using traditional cultures as money-making tourist attractions may destroy them. This is because the way they are originally performed needs to be altered to meet the needs of tourists. For example, in order to help audiences easily understand the meaning of a traditional dance, the moves have to be simplified, which as a result leads to the loss of authenticity真实性 of traditional art. </p><h5 id="4-稳定心态对体育比赛的作用"><a href="#4-稳定心态对体育比赛的作用" class="headerlink" title="4. 稳定心态对体育比赛的作用"></a>4. 稳定心态对体育比赛的作用</h5><p>On the other hand, many people believe that a stable and positive mentality, to a great extent, determines the result of sports competitions. More specifically, athletes aiming at winning medals must be able to stay calm throughout the game or not easily give up even in an uphill battle. One of the most obvious examples of this is the shooting competition where the ability to focus on the target and not to be affected by the crowds is far more important than physical strength.</p><h5 id="5-私人公司对科研的参与应该被限制"><a href="#5-私人公司对科研的参与应该被限制" class="headerlink" title="5. 私人公司对科研的参与应该被限制"></a>5. 私人公司对科研的参与应该被限制</h5><p>Private companies’ involvement in the research of some technologies must be restricted. <strong>If profit-driven organizations were allowed to freely conduct经营 any experiment they are interested in, there would be devastating毁灭性的 outcomes.</strong>  For example, rather than being researched and developed by private companies, nuclear technology is strictly controlled by the government in almost every country. This is due to the fear that the technology of purifying radioactive materials which can be used to produce powerful weapons of massive destruction, such as an atomic bomb, may fall into wrong hands.</p><h5 id="6-支持校服的理由"><a href="#6-支持校服的理由" class="headerlink" title="6. 支持校服的理由"></a>6. 支持校服的理由</h5><p>People in favor of students wearing school uniforms believe that it has a number of benefits. Firstly, requiring students to wear uniforms helps reduce peer pressure. When everyone in the class is dressed in the same way, they are not likely to talk about the price and taste of clothes. As a result, no one would feel a sense of superiority or being prejudiced. In addition, the rule of wearing school uniforms keeps the campus safe. This is because whose who are not members of the school can be easily recognized and kept outside. There are consequently less possibilities of some incidents, such as theft or gang bullying on campus.</p><h5 id="7-举办奥运会的好处"><a href="#7-举办奥运会的好处" class="headerlink" title="7. 举办奥运会的好处"></a>7. 举办奥运会的好处</h5><p>Holding the Olympic Games allows the host country to reap获得 benefits in terms of economic growth and public health. With regard to the former, millions of people are attracted to the host country either to watch world-class sports games or to experience local culture, both of which bring in billions of dollars in cash and create a large number of job opportunities. The other contribution made by hosting this international event is that an interest in sports can be developed for most citizens and they would become more physically active. As a result, the level to health in the general population can be improved. </p><h4 id="图表作文得分的关键能力"><a href="#图表作文得分的关键能力" class="headerlink" title="图表作文得分的关键能力"></a>图表作文得分的关键能力</h4><h5 id="1-精确的句子表达和词汇选择"><a href="#1-精确的句子表达和词汇选择" class="headerlink" title="1. 精确的句子表达和词汇选择"></a>1. 精确的句子表达和词汇选择</h5><h6 id="介词短语来扩展句子"><a href="#介词短语来扩展句子" class="headerlink" title="- 介词短语来扩展句子"></a>- 介词短语来扩展句子</h6><p><strong>Despite</strong> some initial fluctuation, from 1995 there was a steady increase.</p><p>The population of Singapore is about 4 million, <strong>with</strong> Chinese accounting for 3 quarters.</p><p>There is a substantial difference between the UK and the US <strong>in terms of</strong> their consumption of beef.</p><h6 id="用让步状语从句来增加对比能力"><a href="#用让步状语从句来增加对比能力" class="headerlink" title="- 用让步状语从句来增加对比能力"></a>- 用让步状语从句来增加对比能力</h6><p><strong>Although</strong> the proportion of people buying classical music was 17%, it was just half of the figures for the other two types of music.</p><p>National and international fixed line calls grew steadily from 37 to 62, <strong>though</strong> the growth slowed over the last two years.</p><h6 id="基础句型里的名词被充分修饰"><a href="#基础句型里的名词被充分修饰" class="headerlink" title="- 基础句型里的名词被充分修饰"></a>- 基础句型里的名词被充分修饰</h6><p>There was a significant <strong>increase in the amount of money spent on books and furniture.</strong></p><p><strong>Those families consisting of one parent or a single adult</strong> were most likely to live in poverty.</p><h6 id="句尾用分词短语来进一步描述"><a href="#句尾用分词短语来进一步描述" class="headerlink" title="- 句尾用分词短语来进一步描述"></a>- 句尾用分词短语来进一步描述</h6><p>The proportion of population aged over 60 saw a dramatic increase, <strong>rising from</strong> 11% in 1990 to 30% in 2005.</p><p>Chinese tourists spent the largest amount of money on shopping, <strong>taking up</strong> 74% of their total spending.</p><h6 id="需要牢记的句子"><a href="#需要牢记的句子" class="headerlink" title="需要牢记的句子"></a><strong><u>需要牢记的句子</u></strong></h6><ol><li>The percentage of population aged over 60 <strong>is considerably higher than</strong> that of people under 20, <strong>with</strong> 45% and 15% <strong>respectively.</strong></li><li>We can see that there were <strong><u>substantial differences</u></strong> in the consumption of these foods.</li><li>France spent more money than Italy on toys, <strong>while</strong> the spending of Italy was higher than that of France on food.</li><li>The largest proportion of money was spent on shopping at 74%, <strong>compared with</strong> only 10% on food.</li><li><strong>When it comes to</strong> the proportions of men who were not able to read and write, <strong>it is clear that</strong>Africa, Arab States and South Asia had extremely similar data at 30%.</li><li>The proportion of music buyers aged 25-34 is the highest (32%), <strong>followed by</strong> that of people between 16 and 24 (30%) and that of buyers aged 35-44 (26%).</li><li>While other workers’ salaries <strong>saw a fall</strong> from 28% in 1981 to only 15% of spending in 2001, teachers’ pay remained the biggest cost.</li><li><strong>There was a dramatic increase</strong> in the use of mobile phones, <strong>rising from</strong> 45 million to 87 million.</li><li><strong>A steady but significant rise can be seen</strong> in the percentage of the population that owned a computer over the period.</li><li>This rise was <strong>particularly noticeable</strong> between 1997 and 2002, <strong>during which time</strong> the use of mobile phones tripled.</li><li>This is <strong>particularly evident</strong> at higher level of education, <strong>where</strong> the percentage of males is as high as 75%, <strong>compared with</strong> only 25% of females.</li></ol><h5 id="2-宏观看表能力，而非流水账式描述"><a href="#2-宏观看表能力，而非流水账式描述" class="headerlink" title="2. 宏观看表能力，而非流水账式描述"></a>2. 宏观看表能力，而非流水账式描述</h5><p><u><strong>总结特征，对比数据，描述趋势</strong></u></p><p><u>无论任何图表，在overall段写出2-3个宏观特征</u></p><ul><li>不要对图表进行图形式分类，因为图形之间可以变化。而是根据是否体现时间变化来分类。</li></ul><p><strong><u>拿到图表作文的时候用2分钟的时间完成4件事情：</u></strong></p><ol><li>对比图表 —— 判断图表的类型：对比 or 变化</li><li>一般过去 </li><li>国家&#x2F;The percentage of&#x2F;The spending on —— 至少2个不同主语</li><li>Overall, …… —— 用中文想好</li></ol><h6 id="简单对比图"><a href="#简单对比图" class="headerlink" title="简单对比图"></a><u><strong>简单对比图</strong></u></h6><p>一般出现在混合图表题中，两个表之间一般是分开描述，如果有什么内在联系，只需要在结尾段的时候点出来就可以了。</p><h6 id="复杂对比图"><a href="#复杂对比图" class="headerlink" title="复杂对比图"></a><u><strong>复杂对比图</strong></u></h6><p>考试的重点。在这种图表题中，<strong>你没有机会使用任何一个变化相关的句子或者词汇</strong>。不论对比图中出现了多少个特征，你的任务就是从中提炼出2-3个宏观特征，这些特征包括：哪一组最高，哪一组最低，两组之间是相似还是相差的关系。</p><p>比如在讲中国哪个地方的房价最高，不要只说北京上海，应该当做一组来回答，回答『一线城市』。</p><h6 id="变化趋势图"><a href="#变化趋势图" class="headerlink" title="变化趋势图"></a><u>变化趋势图</u></h6><p>相对简单，整个过程的核心一定是变化的内容。每个元素单独描述或者按照相似&#x2F;相反的方式分组。<strong>变化趋势图一定要按照时间描述，不要跳跃或者从后往前写。</strong></p><p><u>变化图表的overall段落里一般20%的对比特征和80%的变化特征。</u></p><h6 id="混合图表"><a href="#混合图表" class="headerlink" title="混合图表"></a>混合图表</h6><p>会用到的官方词汇</p><p>Marginally 稍微地 (slightly)</p><p>Particularly noticeable 特别明显 (especially obvious)</p><h2 id="Plus-words-appearded-on-the-ielts-test"><a href="#Plus-words-appearded-on-the-ielts-test" class="headerlink" title="Plus: words appearded on the ielts test"></a>Plus: words appearded on the ielts test</h2><ul><li>vaccinate 给……接种疫苗</li><li>vulnerability 易受伤害的，脆弱的</li><li>volatility  n.易变，不可确定性</li><li>subsidy 津贴</li><li>excessively 过分地</li><li>transparency 透明度</li><li>alarm - warning</li><li>enroll 注册</li><li>alter your view point - change your way of thinking</li><li>proportion - 部分</li><li>endorse - 支持</li><li>be confirmed by - be endorsed by 得到认可&#x2F;证实</li><li>Look at the norm not the exception –  representative</li><li>Along side …, we were studing a lot of books …  –  do extension readings on …</li><li>Proliferate - 激增</li><li>predator 捕食者</li><li>An extensive range of – a variety of 许多种类的</li></ul>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAN 生成对抗网络入门</title>
    <link href="/2019/08/02/GAN-Learning/"/>
    <url>/2019/08/02/GAN-Learning/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>神经网络分很多种，有普通的前向传播网络，有分析图片的CNN卷积神经网络，有分析序列化数据的RNN循环神经网络，这些都是根据数据去预测结果。而对于生成网络而言，则是”捏造结果”了。GAN(Generative Adversarial Networks，生成对抗网络)就是其中一种生成网络，是根据随机数来生成结果，提供了一种不需要大量的标注训练数据就能学习深度表征的方式。</p><p>相比于其他的生成模型，GAN有两大特点：</p><ul><li>不依赖任何的先验假设：传统的许多方法会假设数据服从某一分布，然后使用极大似然去估计数据分布。 </li><li>生成 real-like 样本的方式非常简单：通过生成器（Generator）的前向传播。</li></ul><h3 id="1-1-生成模型"><a href="#1-1-生成模型" class="headerlink" title="1.1 生成模型"></a>1.1 生成模型</h3><p><strong>生成模型</strong>是指能够随机生成观测数据的模型，尤其是在给定某些隐含参数的条件下。</p><h3 id="1-2-形象描述"><a href="#1-2-形象描述" class="headerlink" title="1.2 形象描述"></a>1.2 形象描述</h3><p>生成对抗网络的过程可以用一个新手画家和一个新手鉴赏家的例子来说明。新手画家要画一幅达芬奇的画，但是他刚开始学，不知道达芬奇的画风格要怎么呈现，于是他用新手的灵感画画，画得一团糟。这时候有一个新手鉴赏家，他接受到了一些画作，但是他不知道哪些是新手画家画的，哪些是达芬奇画的。新手鉴赏家说出了自己的判断，你来纠正他的判断。于是新手鉴赏家就一边判断，一边告诉新手画家要怎么作画才能更加接近达芬奇的画作。新手画家也就一步步学会怎么画的更像达芬奇的风格了。如下，包含一个生成网络和一个判别网络。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-04-145741.png" alt="image-20190804225740236"></p><center>图片来自 莫烦Python 的B站频道 [1]</center><h3 id="1-3-原理"><a href="#1-3-原理" class="headerlink" title="1.3 原理"></a>1.3 原理</h3><p>有两个网络，G(Generator)和D(Descriminator)。G是生成图片的网络，接收一个隐变量z（通常为服从高斯分布的随机噪声），并生成图片G(z)；D是判别网络，判定一张图片是不是真实的，输入x为一张图片，输出的D(x)代表x为真实图片的概率，输出为1表示百分百是真实图片，输出为0表示不可能为真实的图片。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-05-085445.png" alt="image-20190805165445205"></p><p>训练的过程，就是G生成尽量真实的图片去欺骗D，而D则是尽量把G生成的图片和真实的图片区分开，二者就形成了一个博弈的过程。而在最理想的情况下，博弈的最终结果，就是D完全无法区分开G的作品和真实的图片，也就是D(G(z)) &#x3D; 0.5。</p><ul><li>寻找生成模型和判别模型之间的一个纳什均衡！</li></ul><p>数学语言描述：（优化的目标函数）</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-05-031738.png" alt="image-20190805111737882"></p><ul><li><p>对判别器D来说，这是一个二分类问题。V(D,G) 为二分类问题中常见的交叉熵损失。</p></li><li><p>对于生成器 G 来说，为了尽可能欺骗 D，所以需要最大化生成样本的判别概率 D(G(z))（最小化   log(1-D(G(z)))  ）。生成器优化的目标是：最小化 V(D,G) 的最大值。</p></li><li><p>D和G采取交替训练的方法，先训练D，目标是希望V(G, D)越大越好，所以采用梯度上升；之后训练G，目标是希望V(G, D)越小越好，所以采用梯度下降</p></li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-05-033903.png" alt="image-20190805113902723"></p><ul><li>生成器G固定时，可以对V(D, G)求导，求出最佳判别器（已经被作者证明该D*(x)存在且唯一）</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-07-083018.png" alt="image-20190807163018201"></p><ul><li>判别函数代入上面的目标函数，可以求出在最佳判别器下，生成器的目标函数等价于优化 Pdata(x) , Pg(x) 的 JS 散度 (JS-Divergence)。</li><li>全局的优化目标为Pg &#x3D; Pdata。经过若干次训练之后，如果G和D有一定的复杂度，那么二者会达到Pg &#x3D; Pdata这个均衡点，即生成器的密度概率函数等于真实数据的密度概率函数，即生成数据和密度数据一样，D(x) &#x3D; 1&#x2F;2。</li></ul><p>训练总结起来有以下步骤：</p><ol><li>参数优化过程</li></ol><p>要寻找最优的生成器，那给定一个判别器，可以将 max V(G,D) 看作训练生成器的损失函数 L(G)。设定了损失函数之后，就可以利用Adam等优化算法通过梯度下降来更新生成器G的参数。</p><ul><li>给定 G_0，最大化 V(G_0,D)，求得 D_0*，即 max[JSD(P_data(x)||P_G0(x)]；</li><li>固定 D_0*，计算θ_G1 ← θ_G0 −η(dV(G,D_0*) &#x2F;dθ_G) 以求得更新后的 G_1；</li><li>固定 G_1，最大化 V(G_1,D_0*) 以求得 D_1*，即 max[JSD(P_data(x)||P_G1(x)]；</li><li>固定 D_1*，计算θ_G2 ← θ_G1 −η(dV(G,D_0*) &#x2F;dθ_G) 以求得更新后的 G_2；</li><li>。。。</li></ul><ol start="2"><li>实际训练过程</li></ol><p>根据价值函数 V(G,D) 的定义，要求两个数学期望， E[log(D(x))] 和 E[log(1-D(G(z)))]， x 服从真实数据分布，z 服从初始化分布。实践中没法利用积分求解，所以一般是从无穷的真实数据和无穷的生成器中做采样以逼近真实的数学期望。</p><p>最大化价值函数：P_data(x) 采样 m 个样本， P_G(x) 采样 m 个样本</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-020303.png" alt="image-20190812100303119"></p><p>最小化损失函数：P_data(x) 抽取样本作为正样本，从 P_G(x) 抽取样本作为负样本，同时将逼近 -V(G,D) 的函数作为损失函数。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-020352.png" alt="image-20190812100351590"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-020434.png" alt="image-20190812100433912"></p><p>——用迭代和数值计算的方式实现极小极大化博弈过程。</p><ul><li><p>从真实数据分布 P_data 抽取 m 个样本</p></li><li><p>从先验分布 P_prior(z) 抽取 m 个噪声样本</p></li><li><p>将噪声样本投入 G 而生成数据，通过最大化 V 的近似而更新判别器参数θ_d，即极大化，判别器参数的更新迭代式：<img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-022447.png" alt="image-20190812102447202"></p><p>—— 以上是学习判别器D的过程。学习D的过程是计算JS散度的过程，我们希望最大化价值函数，所以会进行K次迭代。实践中好像一般K取1也足够。</p></li><li><p>从先验分布 P_prior(z) 中抽取另外 m 个噪声样本 {z^1,…,z^m}</p></li><li><p>生成器参数的更新迭代式：<img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-022556.png" alt="image-20190812102556437"></p><p>——以上是学习生成器G的过程。为避免更新太多使得JS散度上升，在一次迭代中只进行一次。</p></li></ul><h3 id="1-4-优缺点"><a href="#1-4-优缺点" class="headerlink" title="1.4 优缺点"></a>1.4 优缺点</h3><p>优点：无需马尔可夫链，仅仅使用反向传播来获得梯度，学习间无需推理，且模型中可以融合入多种函数。</p><p>缺点：需要同步D和G；p(x)的隐式表示（？？？不太懂）</p><ul><li>生成对抗网络模型和其他生成模型之间的对比：</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-054441.png" alt="image-20190812134440513"></p><h2 id="2-其他常见生成式模型"><a href="#2-其他常见生成式模型" class="headerlink" title="2. 其他常见生成式模型"></a>2. 其他常见生成式模型</h2><h3 id="2-1-PixelCNN-和-PixelRNN"><a href="#2-1-PixelCNN-和-PixelRNN" class="headerlink" title="2.1 PixelCNN 和 PixelRNN"></a>2.1 PixelCNN 和 PixelRNN</h3><p>对图像数据的概率分布Pdata(x)进行显式建模，并利用极大似然估计优化模型。给定 x1,x2,…,xi-1 条件下，所有 p(xi) 的概率乘起来就是图像数据的分布。如果使用 RNN 对上述依然关系建模，就是 pixelRNN。如果使用 CNN，则是 pixelCNN。</p><p>优点：定义了一个易于处理的密度函数，可以直接优化训练数据的似然。</p><p>缺点：像素值是从图像的一个角落开始，一个个生成的，所以速度会很慢。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-11-155649.png" alt="image-20190811235648428"></p><h3 id="2-2-VAE-Variational-Auto-Encode-变分自编码器"><a href="#2-2-VAE-Variational-Auto-Encode-变分自编码器" class="headerlink" title="2.2 VAE: Variational Auto-Encode 变分自编码器"></a>2.2 VAE: Variational Auto-Encode 变分自编码器</h3><p>真实样本X通过神经网络计算出均值方差，假设隐变量服从正态分布。然后通过采样得到采样变量Z进行重构。VAE和GAN均学习了隐变量 z 到真实数据分布的映射，但VAE的不同之处在于：</p><ul><li>GAN思路直接，使用一个判别器去度量分布转换模块（即生成器）生成分布与真实数据分布的距离。</li><li>VAE委婉，通过约束隐变量 z 服从标准正态分布以及重构数据实现了分布转换映射 X&#x3D;G(z)。</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-11-154857.png" alt="image-20190811234857262"></p><h2 id="3-GAN常见模型结构"><a href="#3-GAN常见模型结构" class="headerlink" title="3. GAN常见模型结构"></a>3. GAN常见模型结构</h2><h3 id="3-1-DCGAN"><a href="#3-1-DCGAN" class="headerlink" title="3.1 DCGAN"></a>3.1 DCGAN</h3><p>提出使用CNN结构来稳定GAN的训练，这允许了生成器和判别器学习优秀的上采样和下采样操作，这些操作可能提升图像合成的质量。</p><h3 id="3-2-层级结构"><a href="#3-2-层级结构" class="headerlink" title="3.2 层级结构"></a>3.2 层级结构</h3><p>GAN 对于高分辨率图像生成一直存在许多问题，层级结构的 GAN 通过逐层次，分阶段生成，一步步提生图像的分辨率。</p><ul><li>使用多对GAN：StackGAN、GoGAN</li><li>单一GAN，多阶段生成：ProgressiveGAN</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-11-161613.png" alt="image-20190812001612728"></p><h3 id="3-3-自编码结构"><a href="#3-3-自编码结构" class="headerlink" title="3.3 自编码结构"></a>3.3 自编码结构</h3><p>BEGAN，EBGAN，MAGAN ……</p><h2 id="4-GAN存在的问题"><a href="#4-GAN存在的问题" class="headerlink" title="4. GAN存在的问题"></a>4. GAN存在的问题</h2><ul><li><p>不收敛问题：由于GAN是采用极小极大博弈，D 在进行梯度下降时，使得在损失流形上下降，而G使其上升，可能造成两者的梯度相互抵消，最终在最优点附近徘徊。因此，不收敛问题也是GAN所面临的最大的问题。目前采用的优化方法都是采用的启发式的方法。WGAN也在一定程度上解决了收敛不稳定的问题。</p></li><li><p>模式崩溃：生成器”崩溃”，即用不同的输入生成相似的样本。可以理解成多样性问题，当G生成了一张比较真实的图片之后，就不再学习其他的分布，而仅靠这一张图片来欺骗，仅仅收敛到一种模式。这样即便训练时间再长也不会有好的结果。</p></li><li><p>梯度消失：判别器的损失很快收敛为零，从而没有足够强的梯度路径可以继续更新生成器</p></li><li><p>离散输出问题：GAN对生成器的唯一要求就是——生成器表示的函数必须可导，因此，GAN似乎无法用于离散输出，如文本。目前，仍未有将GAN应用于NLP领域。目前可能解决该问题三个可能的方向：采用强化学习、采用具体的分布、训练生成器产生连续的输出值，并将其编码为离散值。</p></li></ul><h2 id="5-GAN的发展"><a href="#5-GAN的发展" class="headerlink" title="5. GAN的发展"></a>5. GAN的发展</h2><h3 id="5-1-GAN-Generative-Adversarial-Networks，-2014"><a href="#5-1-GAN-Generative-Adversarial-Networks，-2014" class="headerlink" title="5.1 GAN: Generative Adversarial Networks， 2014"></a>5.1 GAN: Generative Adversarial Networks， 2014</h3><p>论文地址: <a href="https://link.juejin.im/?target=https://arxiv.org/abs/1406.2661">arxiv.org&#x2F;abs&#x2F;1406.26…</a></p><p>“GAN之父” Ian Goodfellow 发表的第一篇提出 GAN 的论文，提出了 GAN 这个模型框架，讨论了非饱和的损失函数，然后对于最佳判别器(optimal discriminator)给出其导数，然后进行证明；最后是在 Mnist、TFD、CIFAR-10 数据集上进行了实验。</p><p>结论和未来的研究方向：</p><ul><li>条件生成模型p(x∣c)可以通过将c作为G和D的输入来获得。</li><li>半监督学习：提供适量的带标签数据，以提高判别网络或推理网络的特征分类效果。</li><li>效率改善：设计更好的方法来协调D和G，或确定更好的分布来对 z 进行采样，以提高训练速率。</li><li>……</li></ul><h3 id="5-2-Conditional-GAN，-2014"><a href="#5-2-Conditional-GAN，-2014" class="headerlink" title="5.2 Conditional GAN， 2014"></a>5.2 Conditional GAN， 2014</h3><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1411.1784">arxiv.org&#x2F;abs&#x2F;1411.17…</a></p><p>之前的GAN是无监督模型，但给生成器提供随机噪声的话效果往往没有那么好。cGAN的提出将其拉回监督学习领域，缓和了GAN的训练不稳定的问题。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-024751.png" alt="image-20190812104750739"></p><h3 id="5-3-DCGAN"><a href="#5-3-DCGAN" class="headerlink" title="5.3 DCGAN"></a>5.3 DCGAN</h3><p> Deep Convolutional GAN </p><p>第一次采用CNN结构实现GAN。将G和D换成两个CNN，但对CNN的结构做出了一些改变来提高样本质量和收敛速度：</p><ul><li>取消池化层，G网络中使用转置卷积层（transposed convolutional layer）进行上采样，D网络中用加入stride的卷积代替pooling。</li><li>D和G中均使用batch normalization（？？？）</li><li>去掉全连接层，使网络变为全卷积网络</li><li>G网络中使用ReLU作为激活函数，最后一层使用tanh</li><li>D网络中使用LeakyReLU作为激活函数</li><li>采用Adam优化算法，学习率是0.0002，beta1&#x3D;0.5</li></ul><p>DCGAN中的G网络：</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-12-062835.png" alt="image-20190812142834368"></p><p>这篇论文介绍了如何使用卷积层，并给出一些额外的结构上的指导建议来实现。另外，它还讨论如何可视化 GAN 的特征、隐空间的插值、利用判别器特征训练分类器以及评估结果。</p><h3 id="5-4-Improved-Techniques-for-Training-GANs"><a href="#5-4-Improved-Techniques-for-Training-GANs" class="headerlink" title="5.4 Improved Techniques for Training GANs"></a>5.4 Improved Techniques for Training GANs</h3><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1606.03498">arxiv.org&#x2F;abs&#x2F;1606.03…</a></p><p>作者之一是 Ian Goodfellow。论文介绍了很多如何构建一个 GAN 结构的建议，可以帮助理解 GAN 不稳定的原因，给出稳定训练 DCGANs 的建议，比如特征匹配(feature matching)、最小批次判别(minibatch discrimination)、单边标签平滑(one-sided label smoothing)、虚拟批归一化(virtual batch normalization)等等。</p><h3 id="5-5-Pix2Pix"><a href="#5-5-Pix2Pix" class="headerlink" title="5.5 Pix2Pix"></a>5.5 Pix2Pix</h3><p>Image-to-Image Translation with Conditional Adversarial Networks</p><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1611.07004">arxiv.org&#x2F;abs&#x2F;1611.07…</a></p><p>目标是实现图像转换：语义图转街景，黑白图片上色，素描图变真实照片等。</p><p>在训练时候需要采用成对的训练数据，并对 GAN 模型采用了不同的配置。其中它应用到了 PatchGAN 这个模型，PatchGAN 对图片的一块 70*70 大小的区域进行观察来判断该图片是真是假，而不需要观察整张图片。生成器部分使用 U-Net 结构，即结合了 ResNet 网络中的 skip connections 技术，编码器和解码器对应层之间有相互连接。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-015316.png" alt="image-20190813095316532"></p><h3 id="5-6-CycleGAN"><a href="#5-6-CycleGAN" class="headerlink" title="5.6 CycleGAN"></a>5.6 CycleGAN</h3><p>Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks</p><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1703.10593">arxiv.org&#x2F;abs&#x2F;1703.10…</a></p><p>和上面的Pix2Pix不同，不需要原图和转换后的图来训练，仅仅需要准备两个领域的数据集即可，比如说普通马的图片和斑马的图片，但不需要一一对应。这篇论文提出了一个非常好的方法–循环一致性(Cycle-Consistency)损失函数。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-015734.png" alt="image-20190813095734307"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-015719.png" alt="image-20190813095719444"></p><h3 id="5-7-Progressive-Growing-of-GANs"><a href="#5-7-Progressive-Growing-of-GANs" class="headerlink" title="5.7 Progressive Growing of GANs"></a>5.7 Progressive Growing of GANs</h3><p>Progressive Growing of GANs for Improved Quality, Stability, and Variation</p><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1710.10196">arxiv.org&#x2F;abs&#x2F;1710.10…</a></p><p>利用一个多尺度结构，从 <code>4*4</code> 到 <code>8*8</code> 一直提升到 <code>1024*1024</code> 的分辨率，如下图所示的结构，这篇论文提出了一些如何解决由于目标图片尺寸导致的不稳定问题。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-020009.png" alt="image-20190813100008687"></p><h3 id="5-8-StackGAN"><a href="#5-8-StackGAN" class="headerlink" title="5.8 StackGAN"></a>5.8 StackGAN</h3><p>StackGAN: Text to Photo-realistic Image Synthesis with Stacked Generative Adversarial Networks</p><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1612.03242">arxiv.org&#x2F;abs&#x2F;1612.03…</a></p><p>StackGAN 和 cGAN、Progressively GANs 两篇论文比较相似，它同样采用了先验知识，以及多尺度方法。整个网络结构如下图所示，第一阶段根据给定文本描述和随机噪声，然后输出 <code>64*64</code>的图片，接着将其作为先验知识，再次生成 <code>256*256</code>大小的图片。相比前面 7 篇论文，StackGAN 通过一个文本向量来引入文本信息，并提取一些视觉特征。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-020146.png" alt="image-20190813100146022"></p><h3 id="5-9-BigGAN"><a href="#5-9-BigGAN" class="headerlink" title="5.9 BigGAN"></a>5.9 BigGAN</h3><p>Large Scale GAN Training for High Fidelity Natural Image Synthesis</p><p>论文地址：<a href="https://link.juejin.im/?target=https://arxiv.org/abs/1809.11096">arxiv.org&#x2F;abs&#x2F;1809.11…</a></p><p>当前 ImageNet 上图片生成最好的模型，但这篇论文比较难在本地电脑上进行复现。它同时结合了很多结构和技术，包括自注意机制(Self-Attention)、谱归一化(Spectral Normalization)等。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-020411.png" alt="image-20190813100410787"></p><h2 id="6-GAN的实现"><a href="#6-GAN的实现" class="headerlink" title="6. GAN的实现"></a>6. GAN的实现</h2><h3 id="6-1-MNIST数据集上的应用"><a href="#6-1-MNIST数据集上的应用" class="headerlink" title="6.1 MNIST数据集上的应用"></a>6.1 MNIST数据集上的应用</h3><ul><li>进行GAN实验时候，只是将二维的数据拉伸成一维，没有用到卷积，只是多层神经网络的叠加。</li><li>生成器和判别器使用不同的激活函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>...</span><br><span class="line"><span class="keyword">from</span> skimage.io <span class="keyword">import</span> imsave     <span class="comment">#保存影像</span></span><br><span class="line"><span class="comment">#from tensorflow.examples.tutorials.mnist import input_data  #第一次下载数据时解注释</span></span><br><span class="line"><span class="comment">#data = input_data.read_data_sets(&#x27;MNIST_data/&#x27;)             #第一次下载数据时解注释</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置超参数</span></span><br><span class="line">image_height = ...</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义load_data()函数以读取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">data_path</span>):...</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义GAN的生成器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">z_prior</span>):...</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义GAN的判别器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">discriminator</span>(<span class="params">x_data, x_generated, keep_prob</span>):...</span><br><span class="line"> </span><br><span class="line"><span class="comment">#显示结果的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_result</span>(<span class="params">batch_res, fname, grid_size=(<span class="params"><span class="number">8</span>, <span class="number">8</span></span>), grid_pad=<span class="number">5</span></span>):...</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义训练过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():...</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> train:</span><br><span class="line">        train()</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mnist数据集下载，下载之后的文件在MNIST_data文件夹下</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">data = input_data.read_data_sets(<span class="string">&#x27;MNIST_data/&#x27;</span>, one_hot = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义load_data()函数以读取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">data_path</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    函数功能：导出MNIST数据</span></span><br><span class="line"><span class="string">    输入: data_path   传入数据所在路径（解压后的数据）</span></span><br><span class="line"><span class="string">    输出: train_data  输出data，形状为(60000, 28, 28, 1)    </span></span><br><span class="line"><span class="string">         train_label  输出label，形状为(60000, 1)                 </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    f_data = <span class="built_in">open</span>(os.path.join(data_path, <span class="string">&#x27;train-images.idx3-ubyte&#x27;</span>))</span><br><span class="line">    loaded_data = np.fromfile(file=f_data, dtype=np.uint8)</span><br><span class="line">    <span class="comment">#前16个字符为说明符，需要跳过</span></span><br><span class="line">    train_data = loaded_data[<span class="number">16</span>:].reshape((-<span class="number">1</span>, <span class="number">784</span>)).astype(np.<span class="built_in">float</span>)</span><br><span class="line"> </span><br><span class="line">    f_label = <span class="built_in">open</span>(os.path.join(data_path, <span class="string">&#x27;train-labels.idx1-ubyte&#x27;</span>))</span><br><span class="line">    loaded_label = np.fromfile(file=f_label, dtype=np.uint8)</span><br><span class="line">    <span class="comment">#前8个字符为说明符，需要跳过</span></span><br><span class="line">    train_label = loaded_label[<span class="number">8</span>:].reshape((-<span class="number">1</span>)).astype(np.<span class="built_in">float</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> train_data, train_label</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入需要的包</span></span><br><span class="line"><span class="keyword">import</span> os                         <span class="comment">#读取路径下文件</span></span><br><span class="line"><span class="keyword">import</span> shutil                     <span class="comment">#递归删除文件</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf           <span class="comment">#编写神经网络</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                <span class="comment">#矩阵运算操作</span></span><br><span class="line"><span class="keyword">from</span> skimage.io <span class="keyword">import</span> imsave     <span class="comment">#保存影像</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data  <span class="comment">#第一次下载数据时用</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 图像的size为(28, 28, 1)</span></span><br><span class="line">image_height = <span class="number">28</span>           </span><br><span class="line">image_width = <span class="number">28</span></span><br><span class="line">image_size = image_height * image_width</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 是否训练和存储设置</span></span><br><span class="line">train = <span class="literal">True</span></span><br><span class="line">restore = <span class="literal">False</span>              <span class="comment">#是否存储训练结果</span></span><br><span class="line">output_path = <span class="string">&quot;./output/&quot;</span>    <span class="comment">#存储文件的路径</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实验所需的超参数</span></span><br><span class="line">max_epoch = <span class="number">500</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">h1_size = <span class="number">256</span>         <span class="comment">#第一隐藏层的size，即特征数</span></span><br><span class="line">h2_size = <span class="number">512</span>         <span class="comment">#第二隐藏层的size，即特征数</span></span><br><span class="line">z_size = <span class="number">128</span>          <span class="comment">#生成器的传入参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义GAN的生成器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">z_prior</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    函数功能：生成影像，参与训练过程</span></span><br><span class="line"><span class="string">    输入：z_prior,       #输入tf格式，size为（batch_size, z_size）的数据</span></span><br><span class="line"><span class="string">    输出：x_generate,    #生成图像</span></span><br><span class="line"><span class="string">         g_params,      #生成图像的所有参数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 第一个链接层 </span></span><br><span class="line">    <span class="comment">#以2倍标准差stddev的截断的正态分布中生成大小为[z_size, h1_size]的随机值，权值weight初始化。</span></span><br><span class="line">    w1 = tf.Variable(tf.truncated_normal([z_size, h1_size], stddev=<span class="number">0.1</span>), name=<span class="string">&quot;g_w1&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#生成大小为[h1_size]的0值矩阵，偏置bias初始化</span></span><br><span class="line">    b1 = tf.Variable(tf.zeros([h1_size]), name=<span class="string">&quot;g_b1&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#通过矩阵运算，将输入z_prior传入隐含层h1。激活函数为relu</span></span><br><span class="line">    h1 = tf.nn.relu(tf.matmul(z_prior, w1) + b1)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 第二个链接层 </span></span><br><span class="line">    <span class="comment">#以2倍标准差stddev的截断的正态分布中生成大小为[h1_size, h2_size]的随机值，权值weight初始化。</span></span><br><span class="line">    w2 = tf.Variable(tf.truncated_normal([h1_size, h2_size], stddev=<span class="number">0.1</span>), name=<span class="string">&quot;g_w2&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#生成大小为[h2_size]的0值矩阵，偏置bias初始化</span></span><br><span class="line">    b2 = tf.Variable(tf.zeros([h2_size]), name=<span class="string">&quot;g_b2&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#通过矩阵运算，将h1传入隐含层h2。激活函数为relu</span></span><br><span class="line">    h2 = tf.nn.relu(tf.matmul(h1, w2) + b2)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 第三个链接层 </span></span><br><span class="line">    <span class="comment">#以2倍标准差stddev的截断的正态分布中生成大小为[h2_size, image_size]的随机值，权值weight初始化。</span></span><br><span class="line">    w3 = tf.Variable(tf.truncated_normal([h2_size, image_size], stddev=<span class="number">0.1</span>), name=<span class="string">&quot;g_w3&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#生成大小为[image_size]的0值矩阵，偏置bias初始化</span></span><br><span class="line">    b3 = tf.Variable(tf.zeros([image_size]), name=<span class="string">&quot;g_b3&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#通过矩阵运算，将h2传入隐含层h3。</span></span><br><span class="line">    h3 = tf.matmul(h2, w3) + b3</span><br><span class="line">    <span class="comment">#利用tanh激活函数，将h3传入输出层</span></span><br><span class="line">    x_generate = tf.nn.tanh(h3)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#将所有参数合并到一起</span></span><br><span class="line">    g_params = [w1, b1, w2, b2, w3, b3]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> x_generate, g_params</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义GAN的判别器 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">discriminator</span>(<span class="params">x_data, x_generated, keep_prob</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    函数功能：对输入数据进行判断，并保存其参数</span></span><br><span class="line"><span class="string">    输入：x_data,        #输入的真实数据 </span></span><br><span class="line"><span class="string">        x_generated,     #生成器生成的虚假数据</span></span><br><span class="line"><span class="string">        keep_prob，      #dropout率，防止过拟合</span></span><br><span class="line"><span class="string">    输出：y_data,        #判别器对batch个数据的处理结果</span></span><br><span class="line"><span class="string">        y_generated,     #判别器对余下数据的处理结果</span></span><br><span class="line"><span class="string">        d_params，       #判别器的参数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 合并输入数据，包括真实数据x_data和生成器生成的假数据x_generated</span></span><br><span class="line">    x_in = tf.concat([x_data, x_generated], <span class="number">0</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 第一个链接层</span></span><br><span class="line">    <span class="comment">#以2倍标准差stddev的截断的正态分布中生成大小为[image_size, h2_size]的随机值，权值weight初始化。</span></span><br><span class="line">    w1 = tf.Variable(tf.truncated_normal([image_size, h2_size], stddev=<span class="number">0.1</span>), name=<span class="string">&quot;d_w1&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#生成大小为[h2_size]的0值矩阵，偏置bias初始化</span></span><br><span class="line">    b1 = tf.Variable(tf.zeros([h2_size]), name=<span class="string">&quot;d_b1&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#通过矩阵运算，将输入x_in传入隐含层h1.同时以一定的dropout率舍弃节点，防止过拟合</span></span><br><span class="line">    h1 = tf.nn.dropout(tf.nn.relu(tf.matmul(x_in, w1) + b1), keep_prob)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 第二个链接层</span></span><br><span class="line">    <span class="comment">#以2倍标准差stddev的截断的正态分布中生成大小为[h2_size, h1_size]的随机值，权值weight初始化。</span></span><br><span class="line">    w2 = tf.Variable(tf.truncated_normal([h2_size, h1_size], stddev=<span class="number">0.1</span>), name=<span class="string">&quot;d_w2&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#生成大小为[h1_size]的0值矩阵，偏置bias初始化</span></span><br><span class="line">    b2 = tf.Variable(tf.zeros([h1_size]), name=<span class="string">&quot;d_b2&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#通过矩阵运算，将h1传入隐含层h2.同时以一定的dropout率舍弃节点，防止过拟合</span></span><br><span class="line">    h2 = tf.nn.dropout(tf.nn.relu(tf.matmul(h1, w2) + b2), keep_prob)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 第三个链接层</span></span><br><span class="line">    <span class="comment">#以2倍标准差stddev的截断的正态分布中生成大小为[h1_size, 1]的随机值，权值weight初始化。</span></span><br><span class="line">    w3 = tf.Variable(tf.truncated_normal([h1_size, <span class="number">1</span>], stddev=<span class="number">0.1</span>), name=<span class="string">&quot;d_w3&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#生成0值，偏置bias初始化</span></span><br><span class="line">    b3 = tf.Variable(tf.zeros([<span class="number">1</span>]), name=<span class="string">&quot;d_b3&quot;</span>, dtype=tf.float32)</span><br><span class="line">    <span class="comment">#通过矩阵运算，将h2传入隐含层h3</span></span><br><span class="line">    h3 = tf.matmul(h2, w3) + b3</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#从h3中切出batch_size张图像</span></span><br><span class="line">    y_data = tf.nn.sigmoid(tf.<span class="built_in">slice</span>(h3, [<span class="number">0</span>, <span class="number">0</span>], [batch_size, -<span class="number">1</span>], name=<span class="literal">None</span>))</span><br><span class="line">    <span class="comment">#从h3中切除余下的图像</span></span><br><span class="line">    y_generated = tf.nn.sigmoid(tf.<span class="built_in">slice</span>(h3, [batch_size, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>], name=<span class="literal">None</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#判别器的所有参数</span></span><br><span class="line">    d_params = [w1, b1, w2, b2, w3, b3]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> y_data, y_generated, d_params</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示结果的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_result</span>(<span class="params">batch_res, fname, grid_size=(<span class="params"><span class="number">8</span>, <span class="number">8</span></span>), grid_pad=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    函数功能：输入相关参数，将运行结果以图片的形式保存到当前路径下</span></span><br><span class="line"><span class="string">    输入：batch_res,       #输入数据</span></span><br><span class="line"><span class="string">        fname,             #输入路径</span></span><br><span class="line"><span class="string">        grid_size=(8, 8),  #默认输出图像为8*8张</span></span><br><span class="line"><span class="string">        grid_pad=5，       #默认图像的边缘留白为5像素</span></span><br><span class="line"><span class="string">    输出：无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#将batch_res进行值[0, 1]归一化，同时将其reshape成（batch_size, image_height, image_width）</span></span><br><span class="line">    batch_res = <span class="number">0.5</span> * batch_res.reshape((batch_res.shape[<span class="number">0</span>], image_height, image_width)) + <span class="number">0.5</span></span><br><span class="line">    <span class="comment">#重构显示图像格网的参数</span></span><br><span class="line">    img_h, img_w = batch_res.shape[<span class="number">1</span>], batch_res.shape[<span class="number">2</span>]</span><br><span class="line">    grid_h = img_h * grid_size[<span class="number">0</span>] + grid_pad * (grid_size[<span class="number">0</span>] - <span class="number">1</span>)</span><br><span class="line">    grid_w = img_w * grid_size[<span class="number">1</span>] + grid_pad * (grid_size[<span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line">    img_grid = np.zeros((grid_h, grid_w), dtype=np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> <span class="built_in">enumerate</span>(batch_res):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= grid_size[<span class="number">0</span>] * grid_size[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        img = (res) * <span class="number">255.</span></span><br><span class="line">        img = img.astype(np.uint8)</span><br><span class="line">        row = (i // grid_size[<span class="number">0</span>]) * (img_h + grid_pad)</span><br><span class="line">        col = (i % grid_size[<span class="number">1</span>]) * (img_w + grid_pad)</span><br><span class="line">        img_grid[row:row + img_h, col:col + img_w] = img</span><br><span class="line">    <span class="comment">#保存图像</span></span><br><span class="line">    imsave(fname, img_grid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    函数功能：训练整个GAN网络，并随机生成手写数字</span></span><br><span class="line"><span class="string">    输入：无</span></span><br><span class="line"><span class="string">    输出：sess.saver()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 加载数据</span></span><br><span class="line">    train_data, train_label = load_data(<span class="string">&quot;MNIST_data&quot;</span>)</span><br><span class="line">    size = train_data.shape[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 构建模型---------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># 定义GAN网络的输入，其中x_data为[batch_size, image_size], z_prior为[batch_size, z_size]</span></span><br><span class="line">    x_data = tf.placeholder(tf.float32, [batch_size, image_size], name=<span class="string">&quot;x_data&quot;</span>) <span class="comment"># (batch_size, image_size)</span></span><br><span class="line">    z_prior = tf.placeholder(tf.float32, [batch_size, z_size], name=<span class="string">&quot;z_prior&quot;</span>) <span class="comment"># (batch_size, z_size)</span></span><br><span class="line">    <span class="comment"># 定义dropout率</span></span><br><span class="line">    keep_prob = tf.placeholder(tf.float32, name=<span class="string">&quot;keep_prob&quot;</span>) </span><br><span class="line">    rate = <span class="number">1</span> - keep_prob</span><br><span class="line">    global_step = tf.Variable(<span class="number">0</span>, name=<span class="string">&quot;global_step&quot;</span>, trainable=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 利用生成器生成数据x_generated和参数g_params</span></span><br><span class="line">    x_generated, g_params = generator(z_prior)</span><br><span class="line">    <span class="comment"># 利用判别器判别生成器的结果</span></span><br><span class="line">    y_data, y_generated, d_params = discriminator(x_data, x_generated, rate)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 定义判别器和生成器的loss函数</span></span><br><span class="line">    d_loss = - (tf.log(y_data) + tf.log(<span class="number">1</span> - y_generated))</span><br><span class="line">    g_loss = - tf.log(y_generated)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 设置学习率为0.0001，用AdamOptimizer进行优化</span></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(<span class="number">0.0001</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 判别器discriminator 和生成器 generator 对损失函数进行最小化处理</span></span><br><span class="line">    d_trainer = optimizer.minimize(d_loss, var_list=d_params)</span><br><span class="line">    g_trainer = optimizer.minimize(g_loss, var_list=g_params)</span><br><span class="line">    <span class="comment"># 模型构建完毕--------------------------------------------------------------------</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 全局变量初始化</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 启动会话sess</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    sess.run(init)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 判断是否需要存储</span></span><br><span class="line">    <span class="keyword">if</span> restore:</span><br><span class="line">        <span class="comment">#若是，将最近一次的checkpoint点存到outpath下</span></span><br><span class="line">        chkpt_fname = tf.train.latest_checkpoint(output_path)</span><br><span class="line">        saver.restore(sess, chkpt_fname)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#若否，判断目录是存在，如果目录存在，则递归的删除目录下的所有内容，并重新建立目录</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(output_path):</span><br><span class="line">            shutil.rmtree(output_path)</span><br><span class="line">        os.mkdir(output_path)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 利用随机正态分布产生噪声影像，尺寸为(batch_size, z_size)</span></span><br><span class="line">    z_sample_val = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=(batch_size, z_size)).astype(np.float32)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 逐个epoch内训练</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sess.run(global_step), max_epoch):</span><br><span class="line">        <span class="comment"># 图像每个epoch内可以放(size // batch_size)个size</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(size // batch_size):</span><br><span class="line">            <span class="keyword">if</span> j%<span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;epoch:%s, iter:%s&quot;</span> % (i, j))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 训练一个batch的数据</span></span><br><span class="line">            batch_end = j * batch_size + batch_size</span><br><span class="line">            <span class="keyword">if</span> batch_end &gt;= size:</span><br><span class="line">                batch_end = size - <span class="number">1</span></span><br><span class="line">            x_value = train_data[ j * batch_size : batch_end ]</span><br><span class="line">            <span class="comment"># 将数据归一化到[-1, 1]</span></span><br><span class="line">            x_value = x_value / <span class="number">255.</span></span><br><span class="line">            x_value = <span class="number">2</span> * x_value - <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 以正太分布的形式产生随机噪声</span></span><br><span class="line">            z_value = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=(batch_size, z_size)).astype(np.float32)</span><br><span class="line">            <span class="comment"># 每个batch下，输入数据运行GAN，训练判别器</span></span><br><span class="line">            sess.run(d_trainer,</span><br><span class="line">                     feed_dict=&#123;x_data: x_value, z_prior: z_value, rate: np.<span class="built_in">sum</span>(<span class="number">0.7</span>).astype(np.float32)&#125;)</span><br><span class="line">            <span class="comment"># 每个batch下，输入数据运行GAN，训练生成器</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">                sess.run(g_trainer,</span><br><span class="line">                         feed_dict=&#123;x_data: x_value, z_prior: z_value, rate: np.<span class="built_in">sum</span>(<span class="number">0.7</span>).astype(np.float32)&#125;)</span><br><span class="line">        <span class="comment"># 每一个epoch中的所有batch训练完后，利用z_sample测试训练后的生成器</span></span><br><span class="line">        x_gen_val = sess.run(x_generated, feed_dict=&#123;z_prior: z_sample_val&#125;)</span><br><span class="line">        <span class="comment"># 每一个epoch中的所有batch训练完后，显示生成器的结果，并打印生成结果的值</span></span><br><span class="line">        show_result(x_gen_val, os.path.join(output_path, <span class="string">&quot;sample%s.jpg&quot;</span> % i))</span><br><span class="line">        <span class="built_in">print</span>(x_gen_val)</span><br><span class="line">        <span class="comment"># 每一个epoch中，生成随机分布以重置z_random_sample_val</span></span><br><span class="line">        z_random_sample_val = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=(batch_size, z_size)).astype(np.float32)</span><br><span class="line">        <span class="comment"># 每一个epoch中，利用z_random_sample_val生成手写数字图像，并显示结果</span></span><br><span class="line">        x_gen_val = sess.run(x_generated, feed_dict=&#123;z_prior: z_random_sample_val&#125;)</span><br><span class="line">        show_result(x_gen_val, os.path.join(output_path, <span class="string">&quot;random_sample%s.jpg&quot;</span> % i))</span><br><span class="line">        <span class="comment"># 保存会话</span></span><br><span class="line">        sess.run(tf.assign(global_step, i + <span class="number">1</span>))</span><br><span class="line">        saver.save(sess, os.path.join(output_path, <span class="string">&quot;model&quot;</span>), global_step=global_step)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> train:</span><br><span class="line">        train()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>Epoch 1: <img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-012847.png" alt="image-20190813092847343"></p><p>Epoch 10:<img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-013022.png" alt="image-20190813093021600"></p><p>Epoch 50:<img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-013053.png" alt="image-20190813093052998"></p><p>Epoch 100:<img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-013115.png" alt="image-20190813093115056"></p><p>Epoch 300:<img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-013131.png" alt="image-20190813093130880"></p><h3 id="6-2-在图网络中的应用"><a href="#6-2-在图网络中的应用" class="headerlink" title="6.2 在图网络中的应用"></a>6.2 在图网络中的应用</h3><p>详见：<a href="https://www.jiqizhixin.com/articles/2019-07-19-3?from=synced&keyword=GAN">综述 | 生成对抗网络（GAN）在图网络中的应用</a></p><p>GraphGAN采用GAN网络中常见的对抗机制：生成器G尽可能的逼近Ptrue(V|Vc)以找到与Vc的相邻节点极其相似的节点来欺骗判别器D，而判别器D则会反过来检测给定的节点V是Vc的真实邻居还是由生成器生成的。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-13-021645.png" alt="image-20190813101644848"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://www.bilibili.com/video/av15999082?from=search&seid=7361319389662604746">什么是 GAN 生成对抗网络 (深度学习)? - 莫烦Python</a></li><li><a href="https://zhuanlan.zhihu.com/p/24767059">GAN学习指南：从原理入门到制作生成Demo</a></li><li><a href="https://www.jiqizhixin.com/articles/2019-03-19-12?from=synced&keyword=GAN">万字综述之生成对抗网络 (GAN)</a></li><li><a href="http://ir.ia.ac.cn/handle/173211/20218">生成式对抗网络GAN的研究进展与展望</a></li><li><a href="https://juejin.im/post/5d234eb16fb9a07f0870b9be#heading-9">必读的10篇关于GAN的论文</a></li><li><a href="https://www.cnblogs.com/fydeblog/p/9439024.html">GAN笔记——理论与实现</a></li></ol><h2 id="一些相关资料"><a href="#一些相关资料" class="headerlink" title="一些相关资料"></a>一些相关资料</h2><ol><li><a href="https://github.com/zhangqianhui/AdversarialNetsPapers">GAN论文汇总</a></li><li><a href="https://github.com/TwistedW/tensorflow-GANs">tensorflow-GANs</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&mid=2650731540&idx=1&sn=193457603fe11b89f3d298ac1799b9fd&chksm=871b306ab06cb97c502af9552657b8e73f1f5286bc4cc71b021f64604fd53dae3f026bc9ac69&scene=21#wechat_redirect">机器之心GitHub项目：GAN完整理论推导与实现，Perfect！</a></li><li><a href="https://zhuanlan.zhihu.com/p/27549418">花式解释AutoEncoder与VAE</a></li><li><a href="https://zhuanlan.zhihu.com/p/34998569">变分自编码器VAE：原来是这么一回事 | 附开源代码</a></li><li><a href="http://www.sohu.com/a/164497415_610300">十个生成模型(GANs)的最佳案例和原理 | 代码+论文</a></li><li><a href="https://blog.csdn.net/z704630835/article/details/82017892">对抗生成网络学习（一）——GAN实现mnist手写数字生成(tensorflow实现)</a></li><li><a href="https://me.csdn.net/z704630835">全部梭哈迟早暴富 的CSDN博客</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Artificial Intelligence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neo4j图数据库</title>
    <link href="/2019/08/01/neo4j-notes/"/>
    <url>/2019/08/01/neo4j-notes/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Neo4j-amp-CQL"><a href="#Neo4j-amp-CQL" class="headerlink" title="Neo4j &amp; CQL"></a>Neo4j &amp; CQL</h2><ul><li><p>Neo4j</p><ul><li>特点：查询语言CQL和SQL很类似；包含一个用于执行CQL命令的UI：Neo4j数据浏览器；支持UNIQUE约束；提供了REST API，可以被任何编程语言（如Java，Spring，Scala等）访问……</li><li>优点：很容易表示连接的数据、半结构化数据；检索&#x2F;遍历&#x2F;导航连接数据更容易和快速；人性化，易于学习；数据模型简单而强大……</li><li>缺点：在支持节点数，关系和属性方面存在限制； 不支持Sharding</li></ul></li><li><p>CQL代表Cypher查询语言，它是Neo4j图形数据库的查询语言，是一种声明性模式匹配语言，遵循SQL语法，简单且人性化。</p></li></ul><h3 id="1-CQL命令"><a href="#1-CQL命令" class="headerlink" title="1. CQL命令"></a>1. CQL命令</h3><h4 id="1-1-CREATE-x2F-MATCH-x2F-RETURN"><a href="#1-1-CREATE-x2F-MATCH-x2F-RETURN" class="headerlink" title="1.1 CREATE &#x2F; MATCH &#x2F; RETURN"></a>1.1 CREATE &#x2F; MATCH &#x2F; RETURN</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- create return </span><br><span class="line">create (n:MEMBER&#123;zuche_member_id:12345678, name:&#x27;Hu Bing&#x27;&#125;)-[r:HOLD&#123;tag:&#x27;hahaha&#x27;&#125;]-&gt;(m:MOBILE&#123;mobile:&#x27;18020690578&#x27;&#125;) return n, m, r</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-071802.png" alt="image-20190801151802240"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- match return</span><br><span class="line">match (n:MEMBER&#123;name:&#x27;Hu Bing&#x27;&#125;)-[r]-&gt;(m:MOBILE&#123;mobile:&#x27;18020690578&#x27;&#125;) return r</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-071913.png" alt="image-20190801151912751"></p><h4 id="1-2-关系基础"><a href="#1-2-关系基础" class="headerlink" title="1.2 关系基础"></a>1.2 关系基础</h4><ul><li>Neo4j数据库遵循属性图模型来存储和管理数据。关系应该是定向的，否则会报错。<ul><li>单向关系</li><li>双向关系</li></ul></li><li>每个关系包含两个节点：从节点（From Node），到节点（To Node）</li></ul><h4 id="1-3-Label"><a href="#1-3-Label" class="headerlink" title="1.3 Label"></a>1.3 Label</h4><ul><li>创建标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE (&lt;node-name&gt;:&lt;label-name&gt;)</span><br><span class="line">CREATE (&lt;node-name&gt;:&lt;label_1&gt;:&lt;label_2&gt;...:&lt;label_n&gt;)</span><br><span class="line">-- eg. 为关系创建标签</span><br><span class="line">create (n:MEMBER)-[r:HOLD]-&gt;(m:DEVICE) return n, r, m</span><br></pre></td></tr></table></figure><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-063701.png" alt="image-20190801143700656"></p><h4 id="1-4-WHERE-x2F-DELETE-x2F-REMOVE-x2F-SET"><a href="#1-4-WHERE-x2F-DELETE-x2F-REMOVE-x2F-SET" class="headerlink" title="1.4 WHERE &#x2F; DELETE &#x2F; REMOVE &#x2F; SET"></a>1.4 WHERE &#x2F; DELETE &#x2F; REMOVE &#x2F; SET</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- where </span><br><span class="line">MATCH (emp:Employee) WHERE emp.name = &#x27;Abc&#x27; OR emp.name = &#x27;Xyz&#x27; RETURN emp</span><br><span class="line">-- delete (用于删除节点和关联关系)</span><br><span class="line">MATCH (cc: CreditCard)-[rel]-(c:Customer) </span><br><span class="line">DELETE cc,c,rel</span><br><span class="line">-- remove (用于删除属性和标签，此例为删除属性) - 下面给出了运行截图</span><br><span class="line">create (n:MEMBER&#123;name:&#x27;User1&#x27;, age:20, sex:&#x27;male&#x27;, nation:&#x27;China&#x27;&#125;)</span><br><span class="line">match (n:MEMBER) where n.name=&#x27;User1&#x27; return n</span><br><span class="line">match (n:MEMBER) where n.name=&#x27;User1&#x27; remove n.nation return n</span><br><span class="line">-- set - 用于 向现有节点或关系添加新属性 或 添加或更新属性值</span><br><span class="line">match (n:MEMBER) where n.name=&#x27;User1&#x27; set n.age=23 return n.age</span><br></pre></td></tr></table></figure><ul><li>上面的Remove实例</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-074220.png" alt="image-20190801154219774"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-074441.png" alt="image-20190801154440600"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-074959.png" alt="image-20190801154958826"></p><ul><li>DELETE和REMOVE命令之间的主要区别<ul><li>DELETE操作用于删除节点和关联关系</li><li>REMOVE操作用于删除标签和属性</li></ul></li><li>DELETE和REMOVE命令之间的相似性<ul><li>两个命令都应该与MATCH命令一起使用</li></ul></li></ul><h4 id="1-5-ORDER-BY"><a href="#1-5-ORDER-BY" class="headerlink" title="1.5 ORDER BY"></a>1.5 ORDER BY</h4><ul><li>用法类似SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- eg. </span><br><span class="line">MATCH (emp:Employee)</span><br><span class="line">RETURN emp.empid,emp.name,emp.salary,emp.deptno</span><br><span class="line">ORDER BY emp.name DESC</span><br></pre></td></tr></table></figure><h4 id="1-6-UNION-x2F-UNION-ALL"><a href="#1-6-UNION-x2F-UNION-ALL" class="headerlink" title="1.6 UNION &#x2F; UNION ALL"></a>1.6 UNION &#x2F; UNION ALL</h4><p>已经在数据库中创建了以下两个MEMBER: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(n:MEMBER&#123;name:&#x27;User1&#x27;, age:23, sex:&#x27;male&#x27;&#125;)</span><br><span class="line">(m:MEMBER&#123;name:&#x27;User2&#x27;, age:21, sex:&#x27;female&#x27;&#125;)</span><br></pre></td></tr></table></figure><p>现在要对二者进行查询并统一返回结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match (n:MEMBER) where n.name=&#x27;User1&#x27; return n.name, n.age, n.sex</span><br><span class="line">union</span><br><span class="line">match (m:MEMBER) where m.name=&#x27;User2&#x27; return m.name, m.age, m.sex</span><br></pre></td></tr></table></figure><p>报错如下，原因是虽然二者有相同的属性名，但是有不同的节点名称前缀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">All sub queries in an UNION must have the same column names (line 2, column 1 (offset: 66))</span><br><span class="line">&quot;union&quot;</span><br><span class="line"> ^</span><br></pre></td></tr></table></figure><p>为避免这种错误，CQL提供AS字句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match (n:MEMBER) where n.name=&#x27;User1&#x27; return n.name as name, n.age as age, n.sex as sex</span><br><span class="line">union</span><br><span class="line">match (m:MEMBER) where m.name=&#x27;User2&#x27; return m.name as name, m.age as age, m.sex as sex</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-01-083048.png" alt="image-20190801163047919"></p><ul><li>是否加ALL的区别：在合并查询结果的时候，UNION过滤重复行，UNION ALL不过滤</li></ul><h4 id="1-7-LIMIT-x2F-SKIP"><a href="#1-7-LIMIT-x2F-SKIP" class="headerlink" title="1.7 LIMIT &#x2F; SKIP"></a>1.7 LIMIT &#x2F; SKIP</h4><p>二者用于过滤或限制查询返回的行数。</p><ul><li>LIMIT:  修减CQL查询结果集底部的结果。</li><li>SKIP: 修减了CQL查询结果集顶部的结果。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (n:MEMBER) RETURN n LIMIT 25</span><br><span class="line">MATCH (n:MEMBER) RETURN n SKIP 25</span><br></pre></td></tr></table></figure><h4 id="1-8-MERGE"><a href="#1-8-MERGE" class="headerlink" title="1.8 MERGE"></a>1.8 MERGE</h4><ul><li><p>MERGE &#x3D; CREATE + MATCH</p></li><li><p>MERGE命令检查该节点在数据库中是否可用。 如果它不存在，它创建新节点。 否则，它不创建新的。</p></li></ul><h3 id="2-CQL函数"><a href="#2-CQL函数" class="headerlink" title="2. CQL函数"></a>2. CQL函数</h3><h4 id="2-1-字符串函数"><a href="#2-1-字符串函数" class="headerlink" title="2.1 字符串函数"></a>2.1 字符串函数</h4><ul><li><p>用于在CQL查询中获取所需的结果</p></li><li><p>UPPER &#x2F; LOWER : 字符串作为输入并转化为大(小)写字母</p><p><code>MATCH (e:Employee) RETURN e.id, UPPER(e.name), e.sal</code></p></li></ul><h4 id="2-2-聚合函数"><a href="#2-2-聚合函数" class="headerlink" title="2.2 聚合函数"></a>2.2 聚合函数</h4><ul><li><p>COUNT &#x2F; MAX &#x2F; MIN &#x2F; AVG &#x2F; SUM : </p><p><code>MATCH (e:Employee) RETURN COUNT(*)</code></p><p><code>MATCH (e:Employee) RETURN MAX(e.sal),MIN(e.sal)</code></p></li></ul><h4 id="2-3-关系函数"><a href="#2-3-关系函数" class="headerlink" title="2.3 关系函数"></a>2.3 关系函数</h4><ul><li><p>STARTNODE &#x2F; ENDNODE &#x2F; ID &#x2F; TYPE</p><p>(起始节点 &#x2F; 结束节点 &#x2F; ID &#x2F; 关系的类型)</p><p><code>STARTNODE(&lt;relationship-label-name&gt;)</code></p><p><code>MATCH (a)-[movie:ACTION_MOVIES]-&gt;(b) RETURN STARTNODE(movie)</code></p></li></ul><h3 id="3-Cypher语法"><a href="#3-Cypher语法" class="headerlink" title="3. Cypher语法"></a>3. Cypher语法</h3><h4 id="3-1-类型系统"><a href="#3-1-类型系统" class="headerlink" title="3.1 类型系统"></a>3.1 类型系统</h4><p>分为三类：属性类型、复合类型和结构类型</p><h5 id="3-1-1-属性类型"><a href="#3-1-1-属性类型" class="headerlink" title="3.1.1 属性类型"></a>3.1.1 属性类型</h5><p>Interger 、 Float 、 String 、 Boolean</p><ul><li><p>String: ‘Hello’ &#x2F; “World”</p></li><li><p>Boolean: true &#x2F; false &#x2F; TRUE &#x2F; FALSE</p></li></ul><h5 id="3-1-2-复合类型"><a href="#3-1-2-复合类型" class="headerlink" title="3.1.2 复合类型"></a>3.1.2 复合类型</h5><p>List: 有序的值的集合</p><ul><li>[‘a’, ‘b’],  [1, 2, 3], [‘a’, 2, n.property, $param], [ ]</li></ul><p>Map: 无序的Key&#x2F;Value对的集合，通常用于存储节点和关系的属性</p><ul><li>n是节点，prop是节点的属性键，引用属性的值的格式：n.prop</li></ul><h5 id="3-1-3-结构类型"><a href="#3-1-3-结构类型" class="headerlink" title="3.1.3 结构类型"></a>3.1.3 结构类型</h5><p>Node类型、关系类型、Path类型</p><ul><li>Node类型表示一个节点，由Id、Label和Map构成</li><li>关系类型表示一个关系，由Id、Type、Map和关系两端的两个节点的Id构成</li><li>Path类型表示路径，是节点和关系的序列。Path模式：(a)–&gt;()&lt;–(b)</li></ul><h4 id="3-2-命名规则、作用域"><a href="#3-2-命名规则、作用域" class="headerlink" title="3.2 命名规则、作用域"></a>3.2 命名规则、作用域</h4><p>命名规则</p><ul><li>英语字符开头，能包含数字，但数字不能作为首字符</li><li>除了下划线和$，不能包含其他符号</li><li></li></ul><p>作用域</p><ul><li><p>节点的Lable、关系类型和属性键是不同的作用域</p></li><li><p>在相同的作用域下，名称不允许重复</p></li><li><p>在不同的作用域下，名称允许重复，且表示不同的含义</p><p><code>CREATE (a:a &#123;a: &#39;a&#39;&#125;)-[r:a]→(b:a &#123;a: &#39;a&#39;&#125;)</code></p></li></ul><h4 id="3-3-传递参数"><a href="#3-3-传递参数" class="headerlink" title="3.3 传递参数"></a>3.3 传递参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MATCH (n)</span><br><span class="line">WHERE id(n) IN $ID</span><br><span class="line">RETURN n.name</span><br><span class="line">-- 可以传递的参数</span><br><span class="line">/*</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ID&quot; : [ 0, 1, 2, 3, 4 ]</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="3-4-操作符"><a href="#3-4-操作符" class="headerlink" title="3.4 操作符"></a>3.4 操作符</h4><h5 id="3-4-1-通用操作符"><a href="#3-4-1-通用操作符" class="headerlink" title="3.4.1 通用操作符"></a>3.4.1 通用操作符</h5><ul><li>distinct 用于移除重复值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- ......</span><br><span class="line">RETURN DISTINCT n.property</span><br></pre></td></tr></table></figure><h5 id="3-4-2-数学操作符"><a href="#3-4-2-数学操作符" class="headerlink" title="3.4.2 数学操作符"></a>3.4.2 数学操作符</h5><ul><li>加减乘除： +, -, *, &#x2F;</li><li>取幂： ^</li><li>取模： %</li></ul><h5 id="3-4-3-比较运算符"><a href="#3-4-3-比较运算符" class="headerlink" title="3.4.3 比较运算符"></a>3.4.3 比较运算符</h5><ul><li>等于：&#x3D;</li><li>不等于：&lt;&gt;</li><li>小于、大于、小于等于、大于等于：&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;</li><li>IS NULL和 IS NOT NULL</li></ul><h5 id="3-4-4-逻辑运算符"><a href="#3-4-4-逻辑运算符" class="headerlink" title="3.4.4 逻辑运算符"></a>3.4.4 逻辑运算符</h5><ul><li>与（AND）、或（OR）、非（NOT）、异或（XOR）</li></ul><h5 id="3-4-5-字符串"><a href="#3-4-5-字符串" class="headerlink" title="3.4.5 字符串"></a>3.4.5 字符串</h5><ul><li>拼接： + </li><li>匹配正则表达式： &#x3D;~</li><li>STARTS WITH &#x2F; ENDS WITH &#x2F; CONTAINS 过滤字符串</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (n)</span><br><span class="line">WHERE n.name =~ &#x27;.*abc.*&#x27; OR n.name CONTAINS &#x27;abc&#x27;</span><br><span class="line">RETURN n</span><br></pre></td></tr></table></figure><h5 id="3-4-6-列表操作"><a href="#3-4-6-列表操作" class="headerlink" title="3.4.6 列表操作"></a>3.4.6 列表操作</h5><ul><li>+，列表追加</li><li>IN：检查成员</li><li>[]：索引<ul><li>[start .. end]，从start开始，递增1，但是不包括end</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RETURN [1,2,3]+[4,5] AS nList</span><br><span class="line"></span><br><span class="line">WITH [2, 3, 4, 5] AS numberlist</span><br><span class="line">UNWIND numberlist AS number</span><br><span class="line">WITH number</span><br><span class="line">WHERE number IN [2, 3, 8]</span><br><span class="line">RETURN number</span><br><span class="line"></span><br><span class="line">WITH [&#x27;Anne&#x27;, &#x27;John&#x27;, &#x27;Bill&#x27;, &#x27;Diane&#x27;, &#x27;Eve&#x27;] AS names</span><br><span class="line">RETURN names[1..3] AS result</span><br></pre></td></tr></table></figure><h3 id="4-多度数相关"><a href="#4-多度数相关" class="headerlink" title="4. 多度数相关"></a>4. 多度数相关</h3><p>eg. 查询和两个以上的涉黑节点有过CALL关系&amp;有申请记录的 节点个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MATCH (b2:LABEL)&lt;-[:IS_BAD]-(:IDCARD)-[:BIND]-&gt;(a2)-[:CALL]-(a)-[:CALL]-(a1)&lt;-[:BIND]-(:IDCARD)-[:IS_BAD]-&gt;(b1:LABEL)</span><br><span class="line">WHERE id(a) &lt;&gt; id(a1) AND id(a) &lt;&gt; id(a2) AND id(a1) &lt;&gt; id(a2)</span><br><span class="line">WITH a MATCH (a)-[:APPLY]-&gt;(:ACTION)</span><br><span class="line">RETURN COUNT(DISTINCT(a))</span><br></pre></td></tr></table></figure><p>eg. 查询和三&#x2F;多个以上的涉黑节点有过CALL关系&amp;有申请记录的节点（列表）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MATCH (:ACTION)-[:APPLY]-(a)-[:CALL]-(a1)&lt;-[:BIND]-(:IDCARD)-[:IS_BAD]-&gt;(b1:LABEL)</span><br><span class="line">WHERE id(a) &lt;&gt; id(a1)</span><br><span class="line">WITH a.mobile as mobile, count(a1) as cnt where cnt&gt;=3</span><br><span class="line">with mobile, cnt order by cnt desc</span><br><span class="line">RETURN mobile, cnt</span><br><span class="line">-- 结果是一个列表，记录下符合条件的所有节点，按cnt由高到低排列</span><br></pre></td></tr></table></figure><p>eg. 查看和多个涉黑节点有CALL关系的列表，列表中体现是否涉黑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MATCH (:ACTION)-[:APPLY]-(a)-[:CALL]-(a1)&lt;-[:BIND]-(:IDCARD)-[:IS_BAD]-&gt;(b1:LABEL)</span><br><span class="line">WHERE id(a) &lt;&gt; id(a1)</span><br><span class="line">WITH a.mobile as m, count(a1) as cnt where cnt&gt;=10</span><br><span class="line">with m, cnt </span><br><span class="line">optional match p=(a:MOBILE&#123;mobile:m&#125;)-[:BIND]-(:IDCARD)-[:IS_BAD]-&gt;(:LABEL)</span><br><span class="line">RETURN m, cnt, sign(count(p)) order by cnt desc</span><br></pre></td></tr></table></figure><h3 id="5-py2neo使用"><a href="#5-py2neo使用" class="headerlink" title="5. py2neo使用"></a>5. py2neo使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">graph = Graph(</span><br><span class="line">    host = <span class="string">&quot;xxxxxxxxxxx&quot;</span>,</span><br><span class="line">    http_port = <span class="number">9092</span>,</span><br><span class="line">    user = <span class="string">&quot;neo4j&quot;</span>,</span><br><span class="line">    password = <span class="string">&quot;neo4j&quot;</span></span><br><span class="line">)</span><br><span class="line">query1 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">MATCH (:ACTION)-[:APPLY]-(a)-[:CALL]-(a1)&lt;-[:BIND]-(:IDCARD)-[:IS_BAD]-&gt;(b1:LABEL)</span></span><br><span class="line"><span class="string">WHERE id(a) &lt;&gt; id(a1)</span></span><br><span class="line"><span class="string">WITH a.mobile as m, count(a1) as cnt where cnt&gt;=10</span></span><br><span class="line"><span class="string">with m, cnt </span></span><br><span class="line"><span class="string">optional match p=(a:MOBILE&#123;mobile:m&#125;)-[:BIND]-(:IDCARD)-[:IS_BAD]-&gt;(:LABEL)</span></span><br><span class="line"><span class="string">RETURN m, cnt, sign(count(p)) order by cnt desc</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = graph.run(query1).to_data_frame()</span><br><span class="line">tmp</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.w3cschool.cn/neo4j/">W3CSchool: neo4j教程</a></p><p><a href="https://www.cnblogs.com/ljhdo/p/10911426.html">博客园 - 悦光阴的博客: Neo4j 第六篇：Cypher语法</a></p><p><a href="https://www.cnblogs.com/ljhdo/p/5516793.html">博客园 - 悦光阴的博客: Neo4j 第三篇：Cypher查询入门</a></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow Notes</title>
    <link href="/2019/07/31/TensorFlow_Learning/"/>
    <url>/2019/07/31/TensorFlow_Learning/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>该笔记是自己学习郑泽宇、梁博文、顾思宇所著《TensorFlow 实战Google深度学习框架（第二版）》时所记录，其中的概念和代码基本来自该书，个人对自己认为较为重要的内容加以整理，所选内容带有主观成分。这本书是我认为入门TensorFlow的不错选择。特此向作者表达敬意。</p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-数据模型-——-Tensor-——-张量"><a href="#1-1-数据模型-——-Tensor-——-张量" class="headerlink" title="1.1 数据模型 —— Tensor —— 张量"></a>1.1 数据模型 —— Tensor —— 张量</h3><ul><li>可以被简单地理解为多维数组。</li><li>TensorFlow计算的结果不是一个具体的数字，而是一个张量的结构</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># tf.constant 计算的结果为一个张量，保存在变量a中</span></span><br><span class="line">a = tf.constant(<span class="number">1.0</span>, name = <span class="string">&quot;a&quot;</span>)</span><br><span class="line">b = tf.constant(<span class="number">2.0</span>, name = <span class="string">&quot;b&quot;</span>)</span><br><span class="line">result = tf.add(a, b, name = <span class="string">&quot;add&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (result)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">Tensor(&quot;add:0&quot;, shape=(), dtype=float32)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>张量的两个用途</p><ul><li>计算中间计算结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>], name = <span class="string">&quot;a&quot;</span>)</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>, <span class="number">3.0</span>], name = <span class="string">&quot;b&quot;</span>)</span><br><span class="line">result = a + b</span><br></pre></td></tr></table></figure><ul><li>当计算图构造完成之后，用来获得计算结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Session().run(result)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-计算模型-——-Flow-——-流"><a href="#1-2-计算模型-——-Flow-——-流" class="headerlink" title="1.2 计算模型 —— Flow —— 流"></a>1.2 计算模型 —— Flow —— 流</h3><ul><li><p>张量之间通过计算相互转化的过程。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-31-030646.png" alt="image-20190731110645460"></p><center>通过TensorBoard可视化向量相加的计算图</center></li><li><p>计算图可以用来隔离张量和计算</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">g1 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g1.as_default():</span><br><span class="line">  <span class="comment"># 在计算图g1中定义变量v，并初始化为0</span></span><br><span class="line">  v = tf.get_variable(<span class="string">&quot;v&quot;</span>, shape = [<span class="number">1</span>], initializer = tf.zeros_initializer)</span><br><span class="line"> </span><br><span class="line">g2 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g1.as_default():</span><br><span class="line">  <span class="comment"># 在计算图g2中定义变量v，并初始化为1</span></span><br><span class="line">  v = tf.get_variable(<span class="string">&quot;v&quot;</span>, shape = [<span class="number">1</span>], initializer = tf.ones_initializer)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在计算图g1中读取变量v的值</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g1) <span class="keyword">as</span> sess:</span><br><span class="line">  tf.global_variables_initializer().run()</span><br><span class="line">  <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;&quot;</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 在计算图g1中，变量v的取值为0</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(tf.get_variable(<span class="string">&quot;v&quot;</span>)))</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 在计算图g2中读取变量v的值</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g2) <span class="keyword">as</span> sess:</span><br><span class="line">  tf.global_variables_initializer().run()</span><br><span class="line">  <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;&quot;</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 在计算图g2中，变量v的取值为1</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(tf.get_variable(<span class="string">&quot;v&quot;</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">[0.]</span></span><br><span class="line"><span class="string">[1.]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>计算图提供了管理张量和计算的方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = ...</span></span><br><span class="line"><span class="string">b = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">g = tf.Graph()</span><br><span class="line"><span class="comment"># 指定设备来执行计算操作</span></span><br><span class="line"><span class="keyword">with</span> g.device(<span class="string">&#x27;/gpu:0&#x27;</span>):</span><br><span class="line">  result = a + b</span><br></pre></td></tr></table></figure><ul><li>TensorFlow中可以使用集合Collection来管理不同类别的资源</li></ul><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-31-032008.png" alt="image-20190731112008372"></p><center>TensorFlow中维护的集合列表</center>### 1.3 运行模型 —— Session —— 会话<ul><li>执行定义好的运算。会话拥有并管理TensorFlow程序运行时候的所有资源，所有计算完成之后需要关闭会话来帮助系统回收资源。</li><li>为了解决异常退出时候资源释放的问题，TensorFlow可以通过Python的上下文管理器来使用会话</li><li>可以在交互式环境下构建默认会话函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant(<span class="number">1.0</span>, name = <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = tf.constant(<span class="number">2.0</span>, name = <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">result = a + b</span><br><span class="line"><span class="comment"># 创建一个对话并通过Python的上下文管理器来管理这个对话</span></span><br><span class="line"><span class="comment"># 不需要调用Session.close()来关闭会话，解决资源泄露的问题</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="built_in">print</span>(sess.run(result))</span><br><span class="line"><span class="comment"># 在交互式环境下直接构建默认会话的函数，自动将生成的会话注册为默认会话</span></span><br><span class="line"><span class="comment"># 可以省去将产生的会话注册为默认会话的过程</span></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">eval</span>())</span><br><span class="line">sess.close()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">3.0</span></span><br><span class="line"><span class="string">3.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-运用神经网络"><a href="#2-运用神经网络" class="headerlink" title="2. 运用神经网络"></a>2. 运用神经网络</h2><h3 id="运用神经网络解决分类问题步骤"><a href="#运用神经网络解决分类问题步骤" class="headerlink" title="运用神经网络解决分类问题步骤"></a>运用神经网络解决分类问题步骤</h3><ol><li>提取问题中实体的特征向量作为神经网络的输入</li><li>定义神经网络的结构，并定义如何从神经网络的输入得到输出</li><li>通过训练数据来调整神经网络中参数的取值，即训练神经网络的过程</li><li>使用训练好的神经网络来预测未知的数据</li></ol><h3 id="训练神经网络的步骤"><a href="#训练神经网络的步骤" class="headerlink" title="训练神经网络的步骤"></a>训练神经网络的步骤</h3><ol><li>定义神经网络的结构和前向传播的输出结果</li><li>定义损失函数以及选择反向传播优化的算法</li><li>生成会话并且在训练数据上反复运行反向传播优化算法</li></ol><p>下面将通过一个实例来加深理解。</p><h2 id="3-简单实例：训练神经网络解决二分类问题"><a href="#3-简单实例：训练神经网络解决二分类问题" class="headerlink" title="3. 简单实例：训练神经网络解决二分类问题"></a>3. 简单实例：训练神经网络解决二分类问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">训练神经网络以解决二分类问题</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> RandomState</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义batch的大小</span></span><br><span class="line">batch_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络的参数</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>,<span class="number">1</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在shape的一个维度上使用None来控制batch大小，以适应训练和测试时候不同的需求</span></span><br><span class="line">x =tf.placeholder(tf.float32, shape = (<span class="literal">None</span>, <span class="number">2</span>), name = <span class="string">&#x27;x-input&#x27;</span>)</span><br><span class="line">y_ =tf.placeholder(tf.float32, shape = (<span class="literal">None</span>, <span class="number">1</span>), name = <span class="string">&#x27;y-input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络前向传播的过程</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数和反向传播函数</span></span><br><span class="line">y = tf.sigmoid(y)</span><br><span class="line">cross_entropy = -tf.reduce_mean(<span class="comment"># 交叉熵</span></span><br><span class="line">    y_ * tf.log(tf.clip_by_value(y, <span class="number">1e-10</span>, <span class="number">1.0</span>))</span><br><span class="line">    + (<span class="number">1</span>-y_) * tf.log(tf.clip_by_value(<span class="number">1</span>-y, <span class="number">1e-10</span>, <span class="number">1.0</span>)))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机数生成模拟数据集</span></span><br><span class="line">rdm = RandomState(<span class="number">1</span>)</span><br><span class="line">dataset_size = <span class="number">128</span></span><br><span class="line">X = rdm.rand(dataset_size, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义规则来给出样本的标签 x1+x2&lt;1的样例都被认为是正样本</span></span><br><span class="line">Y = [[<span class="built_in">int</span>(x1+x2 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个会话来运行TensorFlow程序</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="comment"># 初始化全部变量</span></span><br><span class="line">  init_op = tf.global_variables_initializer()</span><br><span class="line">  sess.run(init_op)</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;w1: &quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(sess.run(w1))</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;w2: &quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(sess.run(w2))</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  训练之前的神经网络参数值：</span></span><br><span class="line"><span class="string">  w1: </span></span><br><span class="line"><span class="string">  [[-0.8113182   1.4845988   0.06532937]</span></span><br><span class="line"><span class="string">   [-2.4427042   0.0992484   0.5912243 ]]</span></span><br><span class="line"><span class="string">  w2: </span></span><br><span class="line"><span class="string">  [[-0.8113182 ], [ 1.4845988 ], [ 0.06532937]]</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设定训练的轮数</span></span><br><span class="line">  STEPS = <span class="number">5000</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(STEPS):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每次选batch_size个样本进行训练</span></span><br><span class="line">    start = (i * batch_size) % dataset_size</span><br><span class="line">    end = <span class="built_in">min</span>(start + batch_size, dataset_size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过选取的样本训练神经网络并更新参数</span></span><br><span class="line">    sess.run(train_step, feed_dict = &#123;x: X[start:end], y_: Y[start:end]&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="comment"># 每隔一段时间计算在所有数据上的交叉熵并输出</span></span><br><span class="line">      total_cross_entropy = sess.run(cross_entropy, feed_dict = &#123;x:X, y_: Y&#125;)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;After %d training step(s), cross entropy on all data is %g&quot;</span> %(i, total_cross_entropy) )</span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      输出：</span></span><br><span class="line"><span class="string">      After 0 training step(s), cross entropy on all data is 1.89805</span></span><br><span class="line"><span class="string">      After 1000 training step(s), cross entropy on all data is 0.655075</span></span><br><span class="line"><span class="string">      After 2000 training step(s), cross entropy on all data is 0.626172</span></span><br><span class="line"><span class="string">      After 3000 training step(s), cross entropy on all data is 0.615096</span></span><br><span class="line"><span class="string">      After 4000 training step(s), cross entropy on all data is 0.610309</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      随着训练的进行，交叉熵在减小，即预测结果和真实结果差距缩小</span></span><br><span class="line"><span class="string">      &#x27;&#x27;&#x27;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;w1: &quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(sess.run(w1))</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;w2: &quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(sess.run(w2))</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  训练之后的神经网络参数值</span></span><br><span class="line"><span class="string">  w1: </span></span><br><span class="line"><span class="string">  [[ 0.02476985  0.5694868   1.6921942 ]</span></span><br><span class="line"><span class="string">   [-2.1977348  -0.23668921  1.1143898 ]]</span></span><br><span class="line"><span class="string">  w2: </span></span><br><span class="line"><span class="string">  [[-0.45544702], [ 0.49110925], [-0.9811033 ]]</span></span><br><span class="line"><span class="string">  发现两个参数的取值发生变化，这个变化就是训练的结果</span></span><br><span class="line"><span class="string">  这两个参数使得这个神经网络能够更好地拟合提供的训练数据</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-未完待续"><a href="#4-未完待续" class="headerlink" title="4. 未完待续"></a>4. 未完待续</h2>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How I Prepare My Personal Statement</title>
    <link href="/2019/07/30/PersonalStatement/"/>
    <url>/2019/07/30/PersonalStatement/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1、申请动机：我为什么要申请这个专业"><a href="#1、申请动机：我为什么要申请这个专业" class="headerlink" title="1、申请动机：我为什么要申请这个专业"></a>1、申请动机：我为什么要申请这个专业</h2><p>进阶学习，本科已有的积累让自己更想进一步了解，热爱这个学科，转专业，学科很有发展前景，能推动社会进步，实现自己的价值</p><h2 id="2、申请优势：详细阐述细节"><a href="#2、申请优势：详细阐述细节" class="headerlink" title="2、申请优势：详细阐述细节"></a>2、申请优势：详细阐述细节</h2><p>本科CS，专业课成绩，个人的两段实习两段交流，自己在实习中做过的经历过的学到的，机器学习深度学习的学习之路（实习算法，大创项目，数学建模）为未来学习这个专业有推动作用，兴趣和热爱给与了持续学习的动力，转专业的经历带来的抗压能力，擅长主动学习（公司自学，搭建网站技术总结，），刚转专业过去就积极参加比赛（建模省一，机器人校三），对新环境的强大适应能力（台湾交流，新加坡项目，转专业）</p><p>我的兴趣和过去的工作：</p><p>机器学习、深度学习、大数据：大创项目计算机视觉+数学建模+神州算法岗位+模式识别90、数字图像92、大数据89</p><p>软件的开发维护：农行实习+课程设计+软件体系94、Java92</p><h2 id="3、未来规划：找一下专业的培养方向"><a href="#3、未来规划：找一下专业的培养方向" class="headerlink" title="3、未来规划：找一下专业的培养方向"></a>3、未来规划：找一下专业的培养方向</h2><p>在该专业学习之后，加入企业，岗位如算法工程师，</p><h2 id="简介部分"><a href="#简介部分" class="headerlink" title="简介部分"></a>简介部分</h2><p>精炼简短，个人评价：主要成就，重大事件和转折，洞察自身的特性、价值观、理想抱负，表现自己的积极向上和对该专业的热爱</p><h2 id="重点陈述本科经历-相关实践经验"><a href="#重点陈述本科经历-相关实践经验" class="headerlink" title="重点陈述本科经历+相关实践经验"></a>重点陈述本科经历+相关实践经验</h2><p>要组织事实，分不同维度</p><p>虽然大一遗憾没有能够加入计算机系，但是下定决心转专业并且通过了转专业考试，进入计算机系。虽然由于课业繁重和初来乍到，第一学期没有能够很好地适应，但是因为对专业的喜爱以及学习兴趣，付出了更多的时间精力，之后把成绩拉上来；在多个课程组积极担任组长，专业学习积极性很高。</p><p>数据、机器学习方向是学院的核心学科，自己在模式识别课程获得92分，大数据课程89分；本科期间自己对机器学习深度学习以及设计到海量数据处理的方向十分感兴趣，参与数学建模学习到问题的分析和建模，接触到大数据处理分析的方法比如主成分分析PCA等；将所学知识运用到实习中：农行实习除了做软件开发，接触底层数据库，还参与对用户数据的分析和用户画像建模；神州实习算法工程师，参与风控项目，利用机器学习相关知识以及分析方法，根据海量数据提取关键特征，建立对用户信用的评价模型，并将AUC由初始的0.6提升到0.8。在学习和实践的过程中自己有了很大的进步，希望这能成为自己以后的研究方向。听过一些名师的分享，如学院王程教授、纪嵘荣教授，觉得目前人工智能深度学习正处于风口，需要大量的高精尖人才；也研究了一些论文，发现目前这些方面的论文发表正处在蓬勃期，学科的进步速度飞快，认为自己需要在这个方向上继续前进，跟上时代并能够为社会创造价值。</p><p>自己的成长：从一个对计算机一窍不通的人，花了两年的时间逐渐跟上了学科的发展，有了一些自己的理解。刚转专业之初成绩不理想，转专业一学期适应之后，大二下绩点3.26均分82.8，大三下绩点3.3均分83.6。学习了大数据、机器学习、深度学习。</p><p>前往台湾的日子里不断接受新事物的冲击，胸怀宽广。balabala</p><p>对学科的理解和创见：</p><p>学士论文的课题方向：还没有开题，但是希望能够是计算机视觉方向？</p><p>自己未来打算的研究方向：</p><p><strong>自己的能力：敢于及时转换方向，不服从现状，保持持续性的学习热情；</strong></p><p><strong>重点要突出自己在工作中取得的成绩</strong></p><p>为什么是CS？自己的优势、热爱</p><p>为什么是港中文？中大的优势，对该校的向往、认识来自世界各地的优秀的朋友，</p><p>为什么是科大？<a href="https://www.ust.hk/zh-hans/research#research%EF%BC%8C%E5%B9%B4%E8%BD%BB%E7%9A%84%E5%AD%A6%E6%A0%A1%E5%85%85%E6%BB%A1%E6%B4%BB%E5%8A%9B%EF%BC%8C%E4%B8%8E%E7%A7%91%E6%8A%80%E8%A1%8C%E4%B8%9A%E5%AF%86%E5%88%87%E7%9B%B8%E5%85%B3%E6%AD%A3%E6%98%AF%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%98%AF%E7%A7%91%E5%A4%A7%E7%9A%84%E9%87%8D%E7%82%B9%E7%A0%94%E7%A9%B6%E9%A2%86%E5%9F%9F%EF%BC%8Chttps://vprd.ust.hk/Research-Focus/Data-science">https://www.ust.hk/zh-hans/research#research，年轻的学校充满活力，与科技行业密切相关正是自己喜欢的，数据科学是科大的重点研究领域，https://vprd.ust.hk/Research-Focus/Data-science</a></p><p><a href="https://pg.ust.hk/prospective-students/why-hkust/why-hkust">https://pg.ust.hk/prospective-students/why-hkust/why-hkust</a></p><p>为什么是港大？</p><p>港大Science <a href="https://www.scifac.hku.hk/prospective/tpg/about">https://www.scifac.hku.hk/prospective/tpg/about</a> 数据科学MSC in Data Science的目标学生是：</p><ol><li>those who are interested in acquiring skills in big data analytics&#x2F;artificial intelligence, and</li><li>those who wish to pursue further study in the field of data science after studying science, social sciences, engineering, medical sciences, information systems, computing and data analytics in their undergraduate studies.</li></ol><p>具体我们会对应每个学校专业的具体要求来创作，着重阐明：</p><p>\1. 为什么选择这个专业</p><p>\2. 为什么学校要录取你</p><p>\3. 你是否足够unique</p><p>大致从以上方面来充分展示出你的个人想法&#x2F;目的阐述&#x2F;以及从CV和推荐信中未能详尽的内容</p><p>学习方法：化整为零，任务分解，海量知识的学习；</p><blockquote><p>。我记得在《图像处理及计算机视觉》这门课里，教授布置了一个作业，就是写一篇论文的report。论文会放在mendeley上（一款文献管理软件），然后在半个月内完成。那么这个论文有多少篇呢？80+篇！没错，就是这么大的一个论文量，教授要求我们写一篇report来阐述概括这些论文的内容。那时候听到这个作业，我听到身边同学的抱怨和吃惊。“MY GOD!!!!!”更难过的事，教授会把这次作业按照比例，计入结课成绩。那么我是如何完成的呢？前3天我把摘要都简要过一遍，明白了这些论文都在讲述什么（先明白你面对的挑战）。</p></blockquote><blockquote><p>接下来3天我进行了分类，按照2d和3d以及图像中是单人还是多人分成五类：multiple 2D pose（多2D姿态）、multiple 3d pose and shape（多3d姿态和形状）、single 3d pose（单一3d姿态）、single 3d shape（单一3d形状）、weakly supervised 3d pose（弱监督3d（然后分解成一个个小目标），之后5天我开始选出每个类别有代表的论文进行说明对比，撰写report（攻克比较重要的目标）。最后3天，不同于别的同学大段文字，我把其中一部分文字转换为图表，使其更加通俗易懂（与他人与众不同）。最后我的作业拿到了专业里为数不多的高分</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>1.自己为什么想要学习计算机：有创造性的，敲出代码时候的快感，解决问题，</p><p>2.自己在学习、竞赛、课程研究、实习当中取得的成绩</p><p>3.学习CS需要的品质以及自己的独特之处？严谨，</p><p>农行的实习：接触底层数据库的操作，将课程中学到的应用进去，维护系统正常运行，为公司系统的运作提供保障，对公司数据库软件的查询相关功能进行代码优化提升查询的速度， </p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><em>申请香港中文大学信息工程系的PS</em></p><p>In my first year at Xiamen University majoring in Oceanography, I would never have thought that my fortuitous participation in the Contest of Robotic Innovations could greatly change my academic path. By self-learning programming and completing a significant number of coding tasks, I led my teammates to complete the design of an intelligent tracking car and it performed quite well in the contest. I witnessed the magic of the information world, turning my ideas into reality, which motivated me to go further study. </p><p>With strong determination, I passed an exam that allowed me to change my major to computer science and technology. However, that turned out to be the easiest part. Catching up with the missed sessions of the course soon overloaded my work schedule. It knew it would be a challenge to master the current course without enough basic knowledge, but I did not think twice about it. I studied the prerequisites online to catch up, and took responsibility for presentations and report writing, knowing that these would give me a much more comprehensive understanding of the subject. Although this approach took more time, it certainly worked. I performed very well in critical modules such as Structure and Development Environment for Software (94%), Blockchain Principle, Design and Application (97%), and Principles and Applications of Big Data Technology (89%).</p><p>Keeping up with challenging courses inspired me to test my knowledge and understanding against my peers in a competition. I put a team of students together and we participated in the China Undergraduate Mathematical Contest in Modelling. One of the problems we encountered was determining the optimal material-processing order. I took the lead and subdivided the problem into three sub-systems, including a time-management system, a scoring system and a decision-making system. We independently encoded each possible material-processing scheme, took the total processing time as the objective function, and used the idea of a genetic algorithm to quickly screen out the scheme with the fastest processing speed. It turned out to be a game-changer – not only did we win first prize in the Fujian province section, but I was awarded an ‘Academic Innovation Scholarship’ for my endeavours. Despite the honours, however, I never lost sight of the bigger picture; I noted how well I dealt with a complicated situation and, at the same time, was able to showcase my technical skills on a grand scale. </p><p>To better combine information theories and practices, I started my first internship as an information technology engineer at the Agricultural Bank of China in March 2019. My responsibilities included using the bank’s ‘Taihang’ management system to extract the cash flow and loan history of clients, and building a model that could generate their credit rating. I later interned as an Algorithm Engineer at UCAR, China’s largest online car rental platform. There, I applied the Mask-RCNN framework to process the pictures of thousands of cars that were damaged in collisions. After many model optimisations, we were able to identify the various impacts and determine the amount of compensation due. Through these two work experiences, I became extremely comfortable working with the companies’ various operations, processes, and data flows. More importantly, my ability to deal with information engineering problems in real life was greatly strengthened.   </p><p>As well as participating in internships, I also connected with the world and explored information technology trends in the global market. Last summer, I participated in an international programme, Exploring New Space Technology and Applications, at the National University of Singapore. After the courses and field studies, I had greater understanding of how critical information engineering are involved in the development of Singapore’s aerospace industry as well as other fields. Later, I attended the National Chiao Tung University in Taiwan as an exchange student. During many lectures delivered by famous companies such as Google and the Taiwan Semiconductor Manufacturing Company (TSMC), I witnessed fierce global market competition in core information technologies; this encouraged to be a lifelong IE learner.</p><p>Despite my determination to excel in the field of information engineering, I understand the importance of diversifying my interests and trying new things. For instance, with my recent accomplishment of finishing a half marathon in Xiamen, I am now preparing for another in Taipei. Anyone who runs long distances knows that the keys to success are discipline and practical time-management skills. By persisting with running, I am getting healthier, physically and psychologically, and becoming fearless when faced with difficulties. These qualities are all important for my future career. In addition, under the guidance of my initial intentions to stay in tune with the constant evolution of information technology and to use it for the betterment of society, I continue to learn how to be a good citizen. I am proud to say I have completed more than two hundred hours of volunteering, including two weeks at the China International Fair for Investment &amp; Trade. </p><p>With so many rich learning experiences behind me, I am now more keen to study in a city that is buzzing with multiculturalism, innovation, and openness. As a global financial centre with a genuinely cosmopolitan environment, Hong Kong is my number one choice. The Chinese University of Hong Kong is a vibrant university with a soaring reputation in information engineering, which provides students with a solid foundation in the field of IE. Having reviewed the university’s curriculum in great detail, e.g. IEMS5711 (Technology Management from a Managerial Perspective) and IEMS5730 (Big Data Systems and Information Processing), I am confident that the MSc in Information Engineering is the right choice. </p><p>I believe I have the right overall package to make substantial contributions to this programme. My combined qualities of academic excellence, productive internships and project experience, diverse educational background, and my energetic and motivated outlook confirm that I am an outstanding candidate for this honourable programme. I would, therefore, ask for your favourable consideration of my application.</p>]]></content>
    
    
    <categories>
      
      <category>Applying</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>蓝色之阴翳与肉体之罪恶</title>
    <link href="/2019/07/30/%E8%93%9D%E8%89%B2%E4%B9%8B%E9%98%B4%E7%BF%B3%E4%B8%8E%E8%82%89%E4%BD%93%E4%B9%8B%E7%BD%AA%E6%81%B6/"/>
    <url>/2019/07/30/%E8%93%9D%E8%89%B2%E4%B9%8B%E9%98%B4%E7%BF%B3%E4%B8%8E%E8%82%89%E4%BD%93%E4%B9%8B%E7%BD%AA%E6%81%B6/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>前一阵子有幸参观了厦门大学美术系毕业生的毕业画展，看到了不少有意思的作品，于是写下这样一篇”游记”以记录所想所感。其实我个人是很喜欢看画展的，只要有条件我都会尽可能去了解这样一些和自己的专业不相关可是又常常能意外地带给自己思考和启发的事物。近距离去感受画中世界，于我而言甚妙。</p><p>这次的展出作品形式很多，有雕塑有油画，也有其他我了解较少的形式。比较吸引我的是下面的这两幅画，当时拍摄的时候没有拍下来名字，离画展也过去了有些时日，所以这两幅画作的名字自己已记不清。但是画本身给人的感受还是很强烈的，我试着脱离开画作的名字，做出自己的解读。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-30-024519.jpg" alt="UNADJUSTEDNONRAW_thumb_1ddd"></p><p>这幅画画的是一个赤裸的女人被蓝色的类似火焰又好像是巨大的树叶之物所托起，从脸部闭着的双眼和下垂的手臂来看，她似乎已经死去。她身形瘦弱，头顶皇冠，这样的死亡的场景令人感到些许的沉重。可以注意到画作的主要色调是蓝色，其所传递出来的忧郁是很强烈的，在我的感受中这个人好像是受到了某种程度上的惩罚。在对这幅画做出进一步分析之前，我想再介绍这次画展中另外一幅画。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-30-024545.jpg" alt="UNADJUSTEDNONRAW_thumb_1dfb"></p><p>这幅画给人的第一感觉就是画面布局比较杂乱，好像是多个时空的场景融合在了一起，有脑袋空空的男人托住了似已经闭上了双眼的女人，在他的左上角是一个裸着上半身的男性在天空中看着这一幕，我猜测他代表这个失去大脑的男性的精神象征；而画作右上角又好像打开了一扇门，门前站着一个身姿奇特的人，灯光照射进来在地上投射出难以言喻的光影，”地上”的蓝色”波纹”又好像这是在水底一般。阴影的运用使我们看不清人物的眼睛，就好像在上一幅画中我们也无法分辨脸部神情。</p><p>这两幅画的人物都是裸体的，而且其运用的蓝色与暗色的结合也让人感觉沉闷与阴森，虽然能够从两幅画对细节刻画的不同看出它们作画技巧、方式、流派的差别，但是二者给了我共同的很直观的感受是，主人公们好像都有”罪”。我不禁想到了中世纪绘画。在当时的宗教观念中，肉体是有原罪的，肉体欲望是低贱的、自私的、有害的，是自私之源，当时盛行的禁欲主义强调了对肉体欲望和享乐的节制。相比于古希腊理想的写实主义中对于美好人体的推崇，上面两幅画中的裸体带给人的印象并不美好，反而很是沉重，仿佛作者是刻意地去强调、讽刺他们所带有的罪。尤其是第二幅画作，似乎在用男性大脑的缺失来讽刺肉欲的无节制，为他们前一刻的男女之欢刻上罪恶之烙印。而蓝色的使用我认为恰到好处，衬托了主题，又给人阴翳的代入感，让人联想到毕加索蓝色时期的那些画作，渲染阴翳和压迫、愁苦与贫瘠，似乎把画作的一切笼罩在了模糊和悲怆的边缘。</p><p>当然，并非所有主题色调是蓝色的画作都显得”Blue”。只不过和肉体的结合让人感到了置身其中般强烈的阴暗和忧郁、罪恶与彷徨，或许当年毕加索在好友卡萨吉玛斯死后进入的绘画”蓝色时期”，也为当下我们分析蓝色与人体结合的画作盖上了一层暗沉的色彩吧。</p>]]></content>
    
    
    <categories>
      
      <category>Reading&amp;Thinking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从克莱因蓝谈我心中的极简主义</title>
    <link href="/2019/07/29/%E4%BB%8E%E5%85%8B%E8%8E%B1%E5%9B%A0%E8%93%9D%E8%B0%88%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/"/>
    <url>/2019/07/29/%E4%BB%8E%E5%85%8B%E8%8E%B1%E5%9B%A0%E8%93%9D%E8%B0%88%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-30-025901.png" alt="image-20190730105901043"></p><p>说到蓝色，你会想到什么？是蓝天，还是大海？可能这二者就是唯二的马上就能浮现在脑海中的事物了，毕竟这个颜色在世界上的其他事物上并不自然地出现。而谈到蓝色，那个熟悉的名词伴随着它背后的一连串神奇的故事就会开始浮现——克莱因蓝。我想通过这个神奇的颜色来聊聊他和我心中极简主义的关系，以及我自己的一些思考。在艺术领域里，是否能将克莱因的这样一种风格的作品归类为极简主义对我而言还是一件无法确定的事情，我就聊聊我自己的的一些理解吧。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-30-031624.png" alt="image-20190730111624368"></p><center>“国际克莱因蓝”（International Klein Blue, 简称IKB）</center>## 1、克莱因蓝、"齐马蓝"和极简主义<p>在了解蓬皮杜艺术中心的讯息的时候，我被法国艺术家克莱因的作品所吸引，作品中有他用自己创造的”克莱因蓝”这样一种单色来展现的画作，也有《蓝色时代的人体测量》这样的表演艺术。给人的第一感觉就是：这也能称之为艺术作品么？我不知道别人会有何种程度的共鸣，但是于我而言，尽管克莱因蓝作品颜色的使用及其单一，可还是令我感到很惊艳，就好像一个蓝色的陷阱，给人极大的视觉冲击。</p><p>在创作这些作品的时候，克莱因在想什么？这是我很好奇的。我想起前不久刚刚推出的动画剧集《爱，死亡和机器人》，其中第14集的故事《齐马蓝》，便是对克莱因蓝的致敬。故事讲的是艺术家Zima在创作”Zima Blue”系列作品的时候，从不断变大的以齐马蓝为元素创作的壁画、到拓展至太空中的行星带也染上齐马蓝，不断追求作品尺寸、形态上的极限，直到将自己作为艺术的一部分，并最终在自己的最后一个作品的展示现场，跃入一片齐马蓝的巨型泳池中，在这片神秘的蓝色之下解体了自己，最终只存留下一个泳池瓷砖清洗机器人的模样，那便是他的故事的开始，他被他的缔造者不断改造之前，最初的形态。他的”齐马蓝”，就是起源于泳池瓷砖的颜色，他终于探寻到了艺术最终的真谛，就是回归本初。</p><p>现实生活中，齐马的原型——克莱因，他所追求的，也是回归单纯，用单一的色调来创造更广阔的思考空间，以达到艺术的理想化、精神的绝对性。他相信，”只有最单纯的色彩才能唤起最强烈的心灵感受力”。这样的一种单一的蓝色，我很难讲清楚为什么给人一种很强烈的艺术体验，让人好像是来到了一个新的维度。或许如果这样一件作品，换成红色、绿色、灰色、黄色，都没有这样强烈的感觉。原因可能是”先入为主”，克莱因做到了使用单一颜色进行大规模创作的”第一”；也或许正如克莱因自己说的那样：”蓝色没有维度，和其他颜色不同，它超越了维度……所有的颜色都和某些有形的或是心理上的理念相关联，而蓝色却指向大海和天空，是深度和无限，是自由和生命，蓝色是宇宙最本质的颜色”。</p><blockquote><p>克莱因的单色画摆脱了色彩本身的悦目和谐等视觉心里效应，而进入了纯精神性的观念领域。在他看来，”表达这种感觉，不用解释，也无需语言，就能让心灵感知——我相信，这就是引导我画单色画的感觉。”</p><p>“克莱因蓝”的RGB比值是0:47:147，但是明确的数据并不能减少人们面对它时那种震惊——蓝色本身象征着天空和海洋，象征着没有界限，又因为”克莱因蓝”太过纯净，以至于很难找到可与之搭配的颜色，因此它的冲击力格外强烈。这种蓝被誉为一种理想之蓝、绝对之蓝，其明净空旷往往使人迷失其中。</p><p>——泓如.克莱因的虚无之蓝[J].环境经济,2018(21):70-72.</p></blockquote><p>在齐马蓝那一集的影评下有这样一句：这是极简主义的胜利。对于现实生活中克莱因来说，或许其创作初衷并非”极简”，而是超着他心中的”宇宙最本质的颜色”而去。但这样的不掺杂质的绝对理想化，也确实将极简主义的风格推上了高峰。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-30-031439.png" alt="image-20190730111439260"></p><center>克莱因《田纳西州》</center>## 2、精心雕琢，还是做做减法？<p>在我自己的经验中，往往在欣赏一幅写实的画作的时候，人们会细细品味，观察尽可能多的细节，从作品的构图、人物的形态、颜色的使用来分析作品的精妙以及良苦用意；创作这些作品的艺术家，也往往是使用更多的色彩和细节来赋予作品更为强大的艺术生命力。而若是一个作品的组成元素很少，颜色也比较单一化，那我们可能就会开始思考作者到底是想要传达什么样的观念或思想，而我们思考的结果，或许并非作者本意，或许只是从自身处境出发自然而然做出的判断，往往是一千个人心中有一千个哈姆雷特。这两类艺术作品的差别，其实并无优劣之分，只是展现了艺术不一样的表达。</p><p>从追求多元复杂，到追求单一简净，往往是一个不断变化、相承相生的过程。艺术的流派繁多，不能简单地进行二元分类；艺术也百花齐放，不能用单一的评价标准来加以评判。元素的复杂度之外，作品细节的考究程度、宗教信仰的传达、色彩使用的差异等方面相结合，才构成了每一个不同的艺术流派各自的风格。那些伟大的艺术家们，或许绘画技艺高超，将平常之物刻画得细致入微，使人如临其境；或许理念超前，用前无古人的创作手法将观众带入了全新的维度，给人天马行空的广袤空间。这些都是人类艺术史的精华，是人类之幸运。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-30-030135.png" alt="image-20190730110135315"></p><center>伊夫·克莱因</center>## 3、关于极简，我想说的<p>尽管艺术没有优劣之分，但自己在艺术风格上的喜好，还是更倾向于极简主义的一方。之所以如此，其实有两方面的原因，一是因为其元素较少、色彩单一，可是作品的张力却丝毫不减，让所刻画之物超越了我们身处的维度，甚至有时候给人一种很不真实、夸张的感觉，但是这种强烈的印象却又能够挥之不去。另一方面原因，是因为在试图从看似有些荒谬的作品中揣测作者用意的时候，自己也成为了艺术创作的一部分，自己天马行空之后做出的解读，或许也成为了艺术品三维实体衍生出来的超维度的变体。我们可以这样理解，作者在创作出我们眼前这些艺术品的时候，艺术创作其实并未完成。而完成他们的最后的画笔，其实是在我们的手中。每个人都能有不同的、新奇的解读的时候，正是这样的艺术创作获得巨大成功的时候。能够成为艺术创作的一部分，又何尝不是一件令人为之兴奋的事情？</p><p>而这种对于简单、理想化的追求，其实也逐渐渗透到了我生活的方方面面。比如衣着方面对没有其他冗余色彩的基础款衣物的喜爱、家居布置方面偏好物件较少的日式风以及色调偏冷的北欧风等，都是自己对极简主义的支持和拥护。简单、不掺杂质的作品，让人感到轻松，不沉重。生活也是如此，我们获得的事物、争取的头衔、拉拢的人际关系，这些都在人生的旅途中给背包加上了沉甸甸的负担，给我们造成了无形之中的约束。学会适当地舍弃，对比拥有了很多之后的患得患失，回头看看曾经的少年气，或许会发现保持简单其实是一件很难得的事情。保持得了简单的初心，或许才能走得更远吧。</p>]]></content>
    
    
    <categories>
      
      <category>Reading&amp;Thinking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scikit-learn Algorithm Cheat-sheet</title>
    <link href="/2019/07/28/Cheat-sheet/"/>
    <url>/2019/07/28/Cheat-sheet/</url>
    
    <content type="html"><![CDATA[<p>Give Scikit a try! With too many  machine learning algorithms to experiment with, may this simple graph help you quickly shortlist a handful of algorithms. </p><span id="more"></span><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-28-scikit-learn_algorithm_cheat-sheet.png"></p><p>Graph from :</p><p><a href="http://n-chandra.blogspot.com/2013/01/picking-machine-learning-algorithm.html">http://n-chandra.blogspot.com/2013/01/picking-machine-learning-algorithm.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Artificial Intelligence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning Notes(2)</title>
    <link href="/2019/07/26/ML-Notes-2/"/>
    <url>/2019/07/26/ML-Notes-2/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>[toc]</p><h2 id="0-基础回顾"><a href="#0-基础回顾" class="headerlink" title="0. 基础回顾"></a>0. 基础回顾</h2><h3 id="CNN-Convolutional-Neural-Network"><a href="#CNN-Convolutional-Neural-Network" class="headerlink" title="CNN: Convolutional Neural Network"></a>CNN: Convolutional Neural Network</h3><p>卷积神经网络。下面是一个示意图。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-073614.png" alt="image-20190803153614261"></p><p>全连接神经网络的缺点：</p><ul><li>参数数量太多</li><li>没有利用像素之间的位置信息：一个神经元和上层所有神经元都进行连接，学习了大量不重要的权重</li><li>网络层数限制：用梯度下降方法训练全连接神经网络，梯度传递很难超过3层</li></ul><p>卷积神经网络的解决方案：</p><ul><li>局部连接：每个神经元只和上层的一小部分神经元进行连接，减少了参数的数量</li><li>权值共享：一组连接共用一个权重，而不是每个连接有一个不同的权重，再次减少参数</li><li>下采样：通过池化来减少每层的样本数，进一步减少参数，同时提升鲁棒性</li></ul><h4 id="A-卷积层-Convolution-Layer"><a href="#A-卷积层-Convolution-Layer" class="headerlink" title="A. 卷积层 Convolution Layer"></a>A. 卷积层 Convolution Layer</h4><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-063118.png" alt="image-20190803143118773"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-063203.png" alt="image-20190803143202748"></p><h4 id="B-池化-Pooling"><a href="#B-池化-Pooling" class="headerlink" title="B. 池化 Pooling"></a>B. 池化 Pooling</h4><p>下采样，去掉Feature Map中不重要的样本。最常用的是Max Pooling。最大池化保留了每一个小块内的最大值，相当于保留了这一块最佳的匹配结果（因为值越接近1表示匹配越好）。池化操作之后，原来的大图相当于变成了一幅小图。通过加入池化层，可以很大程度上减少计算量，降低负载。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-062654.png" alt="image-20190803142654671"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-062802.png" alt="image-20190803142801716"></p><p>除了最大池化之外，还有其他的池化方法比如Mean Pooling，即取各个样本的平均值。</p><h4 id="C-激活函数-or-修正线性单元-Rectified-Linear-Units"><a href="#C-激活函数-or-修正线性单元-Rectified-Linear-Units" class="headerlink" title="C. 激活函数 or 修正线性单元 Rectified Linear Units"></a>C. 激活函数 or 修正线性单元 Rectified Linear Units</h4><p>操作很小，但很重要。对于输入的负值，输出全为0；输入的正值，原样输出。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-063454.png" alt="image-20190803143454180"></p><p>使用的是ReLU函数 f(x) &#x3D; max(0, x)，而不是Sigmoid函数，有以下的优势：</p><ul><li>速度快：和sigmoid函数需要计算指数和倒数相比，relu函数计算代价小很多</li><li>减轻梯度消失的问题，可以训练更深的网络</li><li>稀疏性：输入小于0时完全不激活，保持较低的激活率</li></ul><p>把上面的卷积、池化、激活函数这几层放在一起，加大网络的深度，增加更多的层数，就得到了深度神经网络了。</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-063749.png" alt="image-20190803143749627"></p><h4 id="D-全连接层-Fully-Connected-Layers"><a href="#D-全连接层-Fully-Connected-Layers" class="headerlink" title="D. 全连接层 Fully Connected Layers"></a>D. 全连接层 Fully Connected Layers</h4><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-070857.png" alt="image-20190803150857326"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-08-03-070912.png" alt="image-20190803150911531"></p><h4 id="E-反向传播-Back-Propagation"><a href="#E-反向传播-Back-Propagation" class="headerlink" title="E. 反向传播 Back Propagation"></a>E. 反向传播 Back Propagation</h4><p>上面的一系列操作可以称为”前向传播”，我们可以得到一组输出。接着我们需要利用反向传播来不断纠正错误，进行学习。</p><h3 id="RNN-Recurrent-Neural-Network"><a href="#RNN-Recurrent-Neural-Network" class="headerlink" title="RNN: Recurrent Neural Network"></a>RNN: Recurrent Neural Network</h3><p>循环神经网络。</p><p>对于全连接神经网络和卷积神经网络，他们只能单独地处理一个个的输入，前一个输入和后一个输入是没有关系的。这样的缺点使得我们在需要处理一些序列化的数据的时候产生了不便。比如我们在预测一句话接下来的内容的时候，不能光看上一个单词的意思，而是需要结合整个句子每一个单词来理解。这时候就需要用到深度学习中一类很重要的神经网络：循环神经网络。</p><h2 id="1-LSTM-Long-Short-Time-Memory"><a href="#1-LSTM-Long-Short-Time-Memory" class="headerlink" title="1. LSTM: Long-Short Time Memory"></a>1. LSTM: Long-Short Time Memory</h2><p>长短期记忆</p><blockquote><p>20190726神州算法组第一期技术分享 - 景运鹏 分享内容</p></blockquote><h2 id="2-Isolation-Forest-孤立森林"><a href="#2-Isolation-Forest-孤立森林" class="headerlink" title="2.  Isolation Forest 孤立森林"></a>2.  Isolation Forest 孤立森林</h2><blockquote><p>20190726 神州算法组第一期技术分享 - 林文恩 分享内容 </p></blockquote><h2 id="3-SVM-支持向量机"><a href="#3-SVM-支持向量机" class="headerlink" title="3. SVM 支持向量机"></a>3. SVM 支持向量机</h2><blockquote><p>自学内容</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://www.jianshu.com/p/fe428f0b32c1">[透析] 卷积神经网络CNN究竟是怎样一步一步工作的？</a></li><li><a href="http://brohrer.github.io/how_convolutional_neural_networks_work.html">How do Convolutional Neural Networks work?</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Artificial Intelligence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning Models (1)</title>
    <link href="/2019/07/04/ML-Notes-1/"/>
    <url>/2019/07/04/ML-Notes-1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Models"><a href="#1-Models" class="headerlink" title="1. Models"></a>1. Models</h2><h3 id="1-1-LR-Logistic-Regression"><a href="#1-1-LR-Logistic-Regression" class="headerlink" title="1.1  LR: Logistic Regression"></a>1.1  LR: Logistic Regression</h3><blockquote><p>Wikipedia: Logistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable, although many more complex extensions exist. </p></blockquote><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-05-010608.png" alt="image-20190705090607682"></p><p>Since the linear regression has the same sensitivity in the whole real number domain,and the outlier noise will make the regression model perform poorly on the training set, so the robustness of the linear regression is not good. Logistic regression is a regression model that reduces the prediction range and limits the predicted value to [0,1].</p><h3 id="1-2-GBDT-Gradient-Boosting-Decison-Tree"><a href="#1-2-GBDT-Gradient-Boosting-Decison-Tree" class="headerlink" title="1.2  GBDT: Gradient Boosting Decison Tree"></a>1.2  GBDT: Gradient Boosting Decison Tree</h3><p>1.2.1 Gradient Boosting</p><p>Gradient Boosting is machine learning technique for regression and classification problems, which produces a prediction model in the form of an ensemble of weak prediction models, typically decision trees. It builds the model in a stage-wise fashion like other boosting methods do, and it generalizes them by allowing optimization of an arbitrary differentiable loss function. </p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-27-024146.png" alt="image-20190727104146761"></p><p>1.2.2 GBDT</p><p>Gradient Boosting is typically used with decision trees (especially CART trees) of a fixed size as base learners. As the meaning of the name, GBDT is the combination of Gradient Boosting and Decision Trees. It is worth noting that the decision tree here is the regression tree. GBDT is used for regression prediction. It can also be used for classification after adjustment. </p><p>GBDT is to accumulate the conclusions of all trees to me final conclusion. The core of GBDT is that each tree learns residuals of all previous trees’ conclusions. And   the residual is a accumulated amount that can get the real value after plusing the predictive value. </p><h3 id="1-3-XGBoost-eXtreme-Gradient-Boosting"><a href="#1-3-XGBoost-eXtreme-Gradient-Boosting" class="headerlink" title="1.3  XGBoost: eXtreme Gradient Boosting"></a>1.3  XGBoost: eXtreme Gradient Boosting</h3><p>It is an advanced implementation of gradient boosting algorithm. The basic learners in XGBoost can be either gbtree or gblinear. </p><p>Advantages of XGBoost compared to GBM: Regularization &#x2F; Parallel Processing &#x2F; High Flexibility &#x2F; Handling Missing Values &#x2F; Tree Pruning &#x2F; Built-in Cross-Validation &#x2F; Continue on Existing Model</p><h3 id="1-4-LightGBM-Light-Gradient-Boosting-Machine"><a href="#1-4-LightGBM-Light-Gradient-Boosting-Machine" class="headerlink" title="1.4  LightGBM: Light Gradient Boosting Machine"></a>1.4  LightGBM: Light Gradient Boosting Machine</h3><p>LightBGM is a framework for implementing the GBDT algorithm, supports efficient parallel training, and has the following advantages:</p><ul><li>Faster training speed</li><li>Lower memory consumption</li><li>Better accuracy</li><li>Distributed support for fast processing of massive amounts of data</li></ul><p>The main reason that LightGBM proposes is to solve the problems that GBDT encounters when dealing with massive data, so that GBDT can be used in industrial practice better and faster. </p><h2 id="2-Model-Evaluation"><a href="#2-Model-Evaluation" class="headerlink" title="2. Model Evaluation"></a>2. Model Evaluation</h2><h3 id="2-1-Confusion-Matrix"><a href="#2-1-Confusion-Matrix" class="headerlink" title="2.1  Confusion Matrix"></a>2.1  Confusion Matrix</h3><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114851.jpg" alt="image-20190704164834691"></p><h3 id="2-2-ROC-Receiver-Operating-Characteristic-curve"><a href="#2-2-ROC-Receiver-Operating-Characteristic-curve" class="headerlink" title="2.2  ROC: Receiver Operating Characteristic curve"></a>2.2  ROC: Receiver Operating Characteristic curve</h3><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114758.jpg" alt="image-20190704151333932"></p><p>In a two-class model,  it is assumed that a logistic regression classifier is used, which gives a probability that each instance is a positive class. Then, by setting a threshold such, a probability of greater than or equal to this threshold is a positive class, and a probability less than that is a negative class.</p><p>(Each point on the ROC curve corresponds to one threshold.)</p><p>X-axis: False Positive Rate, FPR. </p><p>Y-axis: True Positive Rate, TPR. —— Sensitivity &#x2F; Recall Rate</p><p>(TP: True Positive; FP: False Positive; TN: True Negative; FN: False Negative)</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114810.jpg" alt="image-20190704152454087"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114818.jpg" alt="image-20190704152623593"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114823.jpg" alt="image-20190704152752758"></p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114839.jpg" alt="image-20190704160924481"></p><p>Ideal goal: TPR &#x3D; 1, FPR &#x3D; 0, which corresponds to point (0,1) in the graph above. </p><p>The bigger sensitivity and specificity, the better.</p><h3 id="2-3-AUC-Area-Under-the-Curve"><a href="#2-3-AUC-Area-Under-the-Curve" class="headerlink" title="2.3  AUC: Area Under the Curve"></a>2.3  AUC: Area Under the Curve</h3><blockquote><p>The AUC value is equivalent to the probability that a randomly chosen positive example is ranked higher than a randomly chosen negative example.</p><p>——Fawcett, 2006</p></blockquote><p>The AUC value is used as the evaluation criterion because many times the ROC curve does not clearly indicate which classifier works better, and as a numerical value, the classifier corresponding to the larger AUC is better.</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-04-114845.jpg" alt="image-20190704162738656"></p><h4 id="Since-there-are-so-many-evaluation-criteria-why-use-ROC-and-AUC"><a href="#Since-there-are-so-many-evaluation-criteria-why-use-ROC-and-AUC" class="headerlink" title="Since there are so many evaluation criteria, why use ROC and AUC?"></a>Since there are so many evaluation criteria, why use ROC and AUC?</h4><p>The ROC curve can remain unchanged as the distribution of positive and negative samples in the test set changes. (Compare to Precision-Recall curve)</p><h3 id="2-4-KS-Kolmogorov-Smirnov-curve"><a href="#2-4-KS-Kolmogorov-Smirnov-curve" class="headerlink" title="2.4  KS: Kolmogorov-Smirnov curve"></a>2.4  KS: Kolmogorov-Smirnov curve</h3><p>KS curve and ROC curve have the same data source. The ROC curve considers the TPR and the FPR as the horizontal and vertical axes, while the K-S curve considers both the TPR and the FPR as the vertical axis, and the horizontal axis is the selected threshold.</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-05-025518.png" alt="image-20190705105518133"></p><p>The discrimination index (KS) is the maximum gap between the normal sample and the default sample distribution under the specific model. First, the credit scores of the samples are sorted from small to large, and then the cumulative proportion of good and bad samples under each score is calculated. The maximum value of the cumulative difference between the normal and default samples is the discrimination index.</p><h3 id="2-5-Lift"><a href="#2-5-Lift" class="headerlink" title="2.5  Lift"></a>2.5  Lift</h3><p>The Lift chart measures how much the model’s predictive ability “gets better” compared to not using the model. The larger the lift (uplifting index), the better the model’s performance.</p><p>  <img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-05-023237.png" alt="image-20190705103236793"></p><h2 id="3-Model-Ensemble"><a href="#3-Model-Ensemble" class="headerlink" title="3. Model Ensemble"></a>3. Model Ensemble</h2><h3 id="3-1-Bagging-Bootstrap-Aggregation"><a href="#3-1-Bagging-Bootstrap-Aggregation" class="headerlink" title="3.1  Bagging: Bootstrap Aggregation"></a>3.1  Bagging: Bootstrap Aggregation</h3><p>Individual learners do not have dependencies, and can simultaneously take samples to generate individual learners.</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-29-021508.png" alt="image-20190729101508363"></p><p>——RandomForest</p><p>Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks that operates by constructing a multitude of decision trees at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees.</p><p>There’s an article I think best explain the key point of Random Forest:</p><p><a href="https://towardsdatascience.com/understanding-random-forest-58381e0602d2"><em>Understanding Random Forest</em></a></p><blockquote><p>The fundamental concept behind random forest is a simple but powerful one — the wisdom of crowds. In data science speak, the reason that the random forest model works so well is:</p><p><strong>A large number of relatively uncorrelated models (trees) operating as a committee will outperform any of the individual constituent models.</strong></p></blockquote><h3 id="3-2-Boosting"><a href="#3-2-Boosting" class="headerlink" title="3.2  Boosting"></a>3.2  Boosting</h3><p>Individual learners have dependencies, and new models are generated serially based on the training results of the previous models. </p><p>——Adaboost、GBDT、XGBoost</p><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-29-021441.png" alt="image-20190729101440968"></p><h3 id="3-3-Stacking"><a href="#3-3-Stacking" class="headerlink" title="3.3  Stacking"></a>3.3  Stacking</h3><p><img src="https://tencent-hb666-1253906972.cos.ap-chengdu.myqcloud.com/2019-07-29-021533.png" alt="image-20190729101532721"></p><p>There’s some articles I think describe these concept well:</p><blockquote><p><a href="https://www.hrwhisper.me/machine-learning-model-ensemble-and-bagging/">https://www.hrwhisper.me/machine-learning-model-ensemble-and-bagging/</a></p><p><a href="https://www.hrwhisper.me/machine-learning-model-ensemble-boostring-and-gbdt/">https://www.hrwhisper.me/machine-learning-model-ensemble-boostring-and-gbdt/</a></p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>Wikipedia：<a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">Receiver operating characteristic</a></li><li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Logistic_regression">Logistic regression</a></li><li><a href="https://www.jianshu.com/p/c61ae11cc5f6">机器学习之分类性能度量指标 : ROC曲线、AUC值、正确率、召回率</a></li><li><a href="https://www.zhihu.com/question/30643044">精确率、召回率、F1 值、ROC、AUC 各自的优缺点是什么？</a></li><li><a href="https://blog.csdn.net/zwqjoy/article/details/84859405">模型评估：ROC，AUC，KS，GINI，Lift，Gain, PSI 总结</a></li><li><a href="https://www.analyticsvidhya.com/blog/2016/03/complete-guide-parameter-tuning-xgboost-with-codes-python/">Complete Guide to Parameter Tuning in XGBoost with codes in Python</a></li><li><a href="https://www.analyticsvidhya.com/blog/2016/02/complete-guide-parameter-tuning-gradient-boosting-gbm-python/">Complete Machine Learning Guide to Parameter Tuning in Gradient Boosting (GBM) in Python</a></li><li><a href="https://towardsdatascience.com/understanding-random-forest-58381e0602d2">Understanding Random Forest</a></li><li><a href="https://www.zhihu.com/question/29036379">集成学习（ensemble learning）应如何入门？- 城东 的回答</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Artificial Intelligence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How I Build This Blog</title>
    <link href="/2019/06/26/ReferenceDocument/"/>
    <url>/2019/06/26/ReferenceDocument/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Operating System： Mac OS X</p><p>Framework：Hexo</p><p>Hexo Theme：NexT (greater scalability)</p><p>(To find more themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>)</p></blockquote><hr><p>Update: </p><p>2020.03.18 Add RSS feed</p><p>2020.03.11 Add Valine Comment System</p><span id="more"></span><p>Reference：<br><a href="https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">hexo - Next 主题添加评论功能</a><br><a href="https://valine.js.org/">Valine - 一款快速、简洁且高效的无后端评论系统</a></p><hr><p><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a></p><p><a href="http://theme-next.iissnan.com/">NetT官方文档</a></p><p><a href="https://www.lixint.me/hexo-theme-diy.html">Hexo博客主题安装及Next主题个性化修改</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc">Hexo的Next主题详细配置</a></p><p><a href="https://www.jianshu.com/p/efbeddc5eb19?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">Hexo+Next个人博客主题优化</a></p><p><a href="https://www.jianshu.com/p/f054333ac9e6?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">hexo的next主题个性化教程:打造炫酷网站</a></p><p><a href="https://www.jianshu.com/p/01ebebc1d063">GitHub+Hexo搭建个人博客（三）Hexo个性化配置进阶</a></p><p><a href="https://sspai.com/post/36275">iPic + Typora，方便快捷地在 Markdown 中插图 | 一日一技</a></p><p><a href="https://toolinbox.net/iPic/">iPic - Markdown 图床、文件上传工具</a></p><p><a href="http://mashirosorata.vicp.io/HEXO-NEXT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html">HEXO-NEXT主题个性化配置</a></p>]]></content>
    
    
    <categories>
      
      <category>Miscellaneous</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Exchange Student Selection Interview</title>
    <link href="/2019/04/03/20190403/"/>
    <url>/2019/04/03/20190403/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>更新：</p><p>最后去了台湾交通大学。也是台湾地区前三，工科强校。依然满足。</p><hr><p>来到面试现场的时候发现已经有不少人了，目测面试台大的有11个竞争对手吧，大概4个男生7个女生，台大实在是太抢手了。初步观察基本全是文科的专业的同学，理工科的屈指可数。</p><p>主要的几个问题如下：</p><p><strong>1、简单介绍一下你自己以及为什么想参加这次的交流？</strong></p><p><strong>2、你大四出去交流会不会影响到你的实习？</strong></p><p><strong>3、你对你自己的整个大学生涯有什么样的总结评价吗？</strong></p><p><strong>4、以目前两岸的局势来看，如果你出去交流遇到了一些困难你会怎么应对？</strong></p><p><strong>5、你去交流肯定不只是去上课，肯定还有和其他同学的各种各样的接触，你要如何去影响你身边的同学？</strong></p><p>还有一些个人方面的问题比如你如果研究生申请香港的学校现在是不是就得开始准备语言成绩了之类的，这个应该每个人问的不一样。面试的时候老师其实没有问很深入的问题，感觉自己没有把风采很好地展示出来，不过坦白说这次的面试自己准备得并不充分，导致过程中有的问题回答得不是很满意。现在在这个事情上的初步的努力就告一段落了，就等着结果出来了。人事已尽，接下来就安天命了。</p><p>望能如愿。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Let&#39;s Start</title>
    <link href="/2019/03/23/20190323/"/>
    <url>/2019/03/23/20190323/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>这学期做了很多的争取，有的有成果有的没有成果，不管如何自己确实尽力了。记忆中从来也没有一次对自己的未来这么上心：申请暑期实习，找平时实习，准备雅思，忙课内成绩，申请台湾交流，团支部评优团员评优团支书评优，申请校奖等等等等。所有的努力其实都是为了申请香港的MSc，港大港中文港科技。有时候会感到累，但是这学期极为明确的目标还是让自己感到欣喜。</p><p>在之前的两年半当中，自己的大学一直都在尝试，参加各种社团活动学生工作辩论，篮球皮划艇马拉松，建模大创转专业，自己似乎一直没有停下来过，但是究竟是为了什么自己其实也说不出个准头。但这次不一样了，感觉自己浑身上下充满了力量，自己目前所作的所有的努力，都是为了在今年的年底明年的年初，能够顺利申请上心仪的学校。要说这种对香港求学的坚定来源于什么，可以说有很多人在其中起到了很重要的作用。明确了我目标的梦畅姐，给我极大鼓励的天大苏子瑞学长，给我雅思上支持的一些朋友，平日里和老友对于未来的不断探讨，当然还有最重要的是，父母态度的转变以及精神物质上的支持，让我相信自己的努力最后都能得到保障。很是感慨，虽然现在的自己还是会像以前那样偶尔有些拖延，但是情况已经有所好转，我开始享受这种掌握自己人生的节奏了。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
